### %Z% %M% %I%
### from domestic @(#)sysuif.cf.d 5.1.2.77+inv(fms940010)+5.1.2.80 inv-MDR mods
#
#########################################################################
### M A I N   M E N U   D E F I N I T I O N S
#########################################################################

###############################################################################
### Main menu
### Provides signon for all users
### Selection menu for four-digit signons, AMs and QCMs on terminals
.MENU MAIN "%phlanget 981 'Main Menu' ''"
	.ENTER
			###### Modificacion MEXICO - LINUX set tty2 as FMS console
			if "$_SYSTTY" != "tty2" goto no_fconf
				system "loadkeys /usr/bin/ph/tables/defkeymap.fms >/dev/null 2>&1"
			@no_fconf
				######
		### Initialize/signon.
		###
		###  Check to see if system is in Practice Mode.
		###  If in practice mode then goto main menu.
		###
		if "$FMS_TRAIN" == Y		goto trainmenu
		###
		###  Check to see if employee information was restored
		###  after returning from SUS.
		###
		if "$EMPL_SIGNON" != ""		goto trainmenu
		call SIGNON
	   @trainmenu
		### Check if two-digit signin (didn't enter password)
		### If it is, go to order and clock in/out menu
		substr _EMP_PASSWD 2 "$EMPL_SIGNON"
		if "$_EMP_PASSWD" == "" then
			menu CUSTSERV
			logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
			exit 0
		endif

		### Check and see if four digit id is used on a terminal
		### other than the console.
		substr _EMP_TEMP 0,5 "$EMPL_SIGNON"
		if "$_EMP_TEMP" == "ADMIN" goto admn
                set SANDPATH "/usr/fms"
                if "$SANDPATH" != ""	set _IAMCONSOLE Y
		if "$_IAMCONSOLE" == "Y"                goto admn
		menu CUSTSERV
		logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
		exit 0
       	  @admn
                ### Check for existance of $FMS_DATA/.invnotclosed.
		### If it is, display system unavailable message.
		access f $FMS_DATA/.invnotclosed
		if $_SYSSTAT == 0 then
			phlanget 2486 "                        Inventory Not Closed!!" "" _TEMP_SA
			phlanget 2487 "                 Close Inventory first. Then use the" "" _TEMP_SB
			phlanget 2488 "            \"Missing Day Recovery\" option from the FMS" "" _TEMP_SC
			phlanget 2489 "                   Administration menu to recover." "" _TEMP_SD
			dpywerr "$_TEMP_SA" "$_TEMP_SB" "$_TEMP_SC" "$_TEMP_SD"
		endif
		if $_SYSSTAT == 0 	goto norecover
                ### Check for existence of $FMS_DATA/.recovery.
		### If it is, display system unavailable message.
		access f $FMS_DATA/.recovery
		if $_SYSSTAT != 0 	goto norecover
		phlanget 982 "                   Recovery Required!!" "" _TEMP_SA
	        phlanget 983 "   Use \"Missing Day Recovery\" option from the FMS" "" _TEMP_SB
	 	phlanget 985 "   Administration menu to recover." "" _TEMP_SC
		dpywerr "$_TEMP_SA" "$_TEMP_SB" "$_TEMP_SC"
	    @norecover
 		if $FMS_TRAIN == Y	goto mainmenu
		call CHKNOTIFY
		if "$SANDPATH" != "" access f $SANDPATH/lock/remote
		if "$SANDPATH" == "" access f $FMS/lock/remote
		if $_SYSSTAT == 0	then
			phlanget 986 "Another Terminal is Accessing FMS Applications" "" _TEMP_SA
			dpywerr "$_TEMP_SA"
			exit 0
		endif
		if "$EMPL_SIGNON" == ""		call SIGNON
		call RSLOCK "remote"
	    @mainmenu
	.ITEM "%phlanget 987 '\\  CUSTOMER SERVICE' ''"
	.ITEM "%phlanget 988 'a)  Order Processing' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	return
		call ORDERPROC
		refresh
	.ITEM "%phlanget 989 'b)  Employee Clock In' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	return
		call CLOCKIN
	.ITEM "%phlanget 990 'c)  Employee Clock Out' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	return
		call CLOCKOUT
	.ITEM "\\ "
	.ITEM "%phlanget 1005 '\\  SERVICE PLANNING' ''"
	.ITEM "%phlanget 1112 'd)  Guest Check Forecasting' ''"
		call SYSLEVEL "FORECAST" 
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSLEVEL" "$_MS_CALLSUPP"
			return
		endif
		if $_SYSLEVEL == "BASIC"	goto gcfcstb
  		call RSLOCK "forecast"
		if $_SYSSTAT != 0    return
		phlanget 1853 "    ... Forecasting Program Being Loaded ... " "" _TEMP_SA
		dpywmsg "$_TEMP_SA $_MS_PATIENT"
		### mazd
		call SAFECMD "fcmgovrd" "gchistry.dat" $_UE_PREP "forecast"
		if $_SYSSTAT == $_UE_NONE then
			phlanget 1854 "    ... Processing ... " "" _TEMP_SA
		 	dpywmsg "$_TEMP_SA $_MS_PATIENT"
			goto lbrplan
                endif
		if $_SYSSTAT != $_UE_PREP then
    			set _ERRMSG $_SYSERROR
			refresh
			call RSUNLOCK "forecast"
			dpywerr "$_ERRMSG" "$_MS_CALLSUPP" 
			unset _ERRMSG
			return
		endif
		system "lbrlgprf"
		rm "$FMS_DATA/lbrcrsum.dat"
		systemc "lbrplans"
		if $_SYSSTAT != 0 then
			dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		endif
	    @lbrplan
	###	system "invsldmn $FMS_STORE"
		call RSUNLOCK "forecast"
		refresh
		return
	    @gcfcstb
		#"Run guest check forecast report"
		set _WROW	6
		phlanget 1687  "Enter Starting Date" "" _TEMP_STA
		ask $_WROW 34 _SBDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
                if $_SYSSTAT != 0		return
		call NEXTLINE 0
		# default end date is 13 days (1209599 seconds) later
		systemv _YYMMDD "syspdate -k$_SBDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATE "$_MM/$_DD/$_YY"
		systemv _FUTURE "syspdate -g -a+1209599 $_SEDATE"
		substr _MM 0,2 $_FUTURE
		substr _DD 3,2 $_FUTURE
		substr _YY 6,2 $_FUTURE
		set _YYMMDD "$_YY$_MM$_DD"
		systemv _SEDATE "syspdate -f$_YYMMDD 2>/dev/null"
		phlanget 1688 "Enter Ending Date" "" _TEMP_STA
		ask $_WROW 34 _SEDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SEDATE
                if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER  $_WROW 41
                if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SBDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SBDATE "$_MM/$_DD/$_YY"
		systemv _YYMMDD "syspdate -k$_SEDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "fcgcprnt $_SBDATE $_SEDATE"
		if $_SYSSTAT != 0 then
			phlanget 1855  "Unable To Print Guest Check History Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_MS_CALLSUPP" 
		endif	
		return
	.ITEM "%phlanget 1856 'e)  Prep Planning' ''"
		call SYSLEVEL "PREP" 
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSLEVEL" "$_MS_CALLSUPP"
			return
		endif
		if $_SYSLEVEL == "BASIC"	goto prepplnb
		call RSLOCK "prepplan"
		if $_SYSSTAT != 0 return
		## Ask for date repeatedly
		systemv _YYMMDD "syspdate -k$_SYSDATE 2>/dev/null"
	    @askprp
	 	phlanget 1857 "Enter date to process" "" _TEMP_STA
		ask 16 32 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0  then
			call RSUNLOCK "prepplan"
			return
		endif
		systemv _SYYMMDD "syspdate -k$_SDATE 2>/dev/null"
		#if date selected is on or after today proceed
		if $_SYYMMDD -ge $_YYMMDD goto contprp
	     	phlanget 1858 "Can't Modify Prep Plans for Dates Previous to the Current Date" "" _TEMP_STA
		dpywerr -l "$_TEMP_STA"
		#if today is less than date selected, ask for date again
		goto askprp
	    @contprp
		### Determine values for file names
		call SPLITYYMMDD $_SYYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		systemv _FILETODAY "syspdate -d $_RPTDATE 2>/dev/null"
		expr _FILETOMORROW "$_FILETODAY + 1"
		### Check if prep plan file exists
		access f "$FMS_DATA/prep$_FILETODAY.dat"
		if $_SYSSTAT != 0 then
			phlanget 1859 "Prep Plans do not exist for" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_SDATE"
			call RSUNLOCK "prepplan"
			return
		endif
		access f "$FMS_DATA/prep$_FILETOMORROW.dat"
		if $_SYSSTAT != 0 then
			phlanget 1859 "Prep Plans do not exist for" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_SDATE"
			call RSUNLOCK "prepplan"
			return
		endif
		phlanget 1860 "   Loading Prep Planning for" "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_SDATE ... $_MS_PATIENT"
		### mazd
		call SAFECMDC "planprep $_RPTDATE" \
			     "prep$_FILETODAY.dat prep$_TOMORROW.dat" $_UE_PREP "prepplan"
		if $_STATBKUP == 16 then
			phlanget 1861  "    Prep Plan Not Available For" "" _TEMP_STA
			phlanget 1862 " "  "" _TEMP_STB
			phlanget 1863 "    Possible Reasons: "  "" _TEMP_STC
			phlanget 1864 "    1)  Unit has converted to FMS in the last 7 days " "" _TEMP_STD
			phlanget 1865 "    2)  Unit has had hardware or software replaced" "" _TEMP_STE
			phlanget 1866 "        and/or repaired in the last 7 days" "" _TEMP_STF
			dpywerr "$_TEMP_STA $_SDATE!" $_TEMP_STB $_TEMP_STC $_TEMP_STD $_TEMP_STE
			call RSUNLOCK "prepplan"
			return
		endif
		if $_SYSSTAT != $_UE_PREP then
			call RSUNLOCK "prepplan"
			dpywclr
  			return
		endif
		dpywclr
		phlanget 1867 "   Updating Prep Forecasting ......" "" _TEMP_STA

		dpywmsg "$_TEMP_STA"
		### mazd
		call SAFECMD "mkprpfct $_RPTDATE" "prep$_FILETODAY.dat" "" "prepplan"
		if $_SYSSTAT != 0 then
			phlanget 1868  "mkprpfct Program Failure!" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_MS_CALLSUPP"
		endif
		call RSUNLOCK "prepplan"
		dpywclr
		return
	    @prepplnb
		set _WROW 8
		phlanget 1869 "Enter date to report" "" _TEMP_STA
		ask $_WROW 34 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]:" $_SYSDATE
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 43
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "prpptdpp $_RPTDATE A"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
#	.ITEM "%phlanget 1870 'f)  Labor Planning' ''"
#		call SYSLEVEL "LABOR" 
#		if $_SYSSTAT != 0 then
#			dpywerr "$_MS_SYSLEVEL" "$_MS_CALLSUPP"
#			return
#		endif
#		if $_SYSLEVEL == "BASIC"	goto lbrplnb
#		systemv _FUTURE "syspdate -g -a+86400 2>/dev/null"
#		substr _MM 0,2 $_FUTURE
#		substr _DD 3,2 $_FUTURE
#		substr _YY 6,2 $_FUTURE
#		set _YYMMDD "$_YY$_MM$_DD"
#		systemv _FUTUREX "syspdate -f$_YYMMDD 2>/dev/null"
#		## Ask for date repeatedly
#	    @asklbra
#		phlanget 1871 "Enter Crew Schedule Date" "" _TEMP_STA
#		ask 17 29 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_FUTUREX
#		if $_SYSSTAT != 0		return
#		systemv _SYYMMDD "syspdate -k$_SDATE 2>/dev/null"
#		#if date selected is on or after tomorrow, proceed
#		if $_SYYMMDD -ge $_YYMMDD goto contlbra
#		phlanget 1872  "Can Modify Crew Schedules for Future Dates Only .." "" _TEMP_STA
#		dpywerr "$_TEMP_STA"
#		#if tomorrow is less than date selected, ask for date again
#		goto asklbra
#	    @contlbra
#		phlanget 1873 "Loading the Labor Schedule ... Please Wait" "" _TEMP_STA
#		dpywmsg "$_TEMP_STA"
#		call SPLITYYMMDD $_SYYMMDD 
#		set _RPTDATE "$_MM/$_DD/$_YY"
#		call RSLOCK "lbrplans"
#		if $_SYSSTAT != 0 	return
#		system "lbrupsch $_RPTDATE" 
#		refresh
#		if $_SYSSTAT == 0 then
#			rm "$FMS_DATA/lbrcrsum.dat"
#			call RSUNLOCK "lbrplans"
#			return
#		endif
#
# 		if $_SYSSTAT == $_UE_LBRMSCH then
#			phlanget 1874 "No Crew Schedule for Requested Date" "" _TEMP_STA
#			dpywerr "$_TEMP_STA $_SDATE ..."
#			call RSUNLOCK "lbrplans"
#			return
#		endif
#
#		set _MS_LBRERR  "NULL"
#		phlanget 1362 "Missing" "" _TEMP_STA
#
#		if $_SYSSTAT == $_UE_LBRMCMA then 
#	    		call TESTSTORE
#		endif
#		if $_SYSSTAT == $_UE_LBRMEMP then
#			set _MS_LBRERR  "hrcempl.dat"
#		endif
# 		if $_SYSSTAT == $_UE_LBRMSYS then 
#			set _MS_LBRERR  "sysparm.dat"
#		endif
# 		if $_SYSSTAT == $_UE_LBRMTSK then
#			set _MS_LBRERR "lbrtasks.txt"
#		endif
# 		if $_SYSSTAT == $_UE_LBRMALT then
#			set _MS_LBRERR "lbratask.txt"
#		endif
# 		if $_SYSSTAT == $_UE_LBRMPCT then 
#			set _MS_LBRERR  "lbrvpcnt.txt"
#		endif
# 		if $_SYSSTAT == $_UE_LBRMSST then
#			set _MS_LBRERR  "sysstor.dat"
#		endif
# 		if $_SYSSTAT == $_UE_FATAL then
#			phlanget 1875 "Fatal lbrupsch error." "" _MS_LBRERR
#			set _TEMP_STA ""
#		endif
#		if $_MS_LBRERR != "NULL" then 
#			dpywerr "$_TEMP_STA $_MS_LBRERR" "$_MS_CALLSUPP"
#		endif
#
#		if $_MS_LBRERR == "NULL" then
#			phlanget 1876 "Unknown lbrupsch error." "" _TEMP_STA
#			dpywerr  "$_TEMP_STA" "$_MS_CALLSUPP"
#		endif
#		call RSUNLOCK "lbrplans"
#		refresh
#		return
#	    @lbrplnb
#		systemv _FUTURE "syspdate -g -a+86400 2>/dev/null"
#		substr _MM 0,2 $_FUTURE
#		substr _DD 3,2 $_FUTURE
#		substr _YY 6,2 $_FUTURE
#		set _YYMMDD "$_YY$_MM$_DD"
#		systemv _FUTUREX "syspdate -f$_YYMMDD 2>/dev/null"
#		## Ask for date repeatedly
#	    @asklbrb
#		phlanget 1877 "Enter Staffing Guide Date" "" _TEMP_STA
#		ask 5 29 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_FUTUREX
#		if $_SYSSTAT != 0		return
#		systemv _SYYMMDD "syspdate -k$_SDATE 2>/dev/null"
#		#if date selected is on or after tomorrow, proceed
#		if $_SYYMMDD -ge $_YYMMDD goto contlbrb
#		phlanget 1878  "Can View/Print Staffing Guides For Future Dates Only .." "" _TEMP_STA
#		dpywerr "$_TEMP_STA"
#		#if tomorrow is less than date selected, ask for date again
#		goto asklbrb
#	    @contlbrb
#		call GETPRINTER 7 38
#		if $_SYSSTAT != 0		return
#		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
#		call SPLITYYMMDD $_YYMMDD 
#		set _RPTDATE "$_MM/$_DD/$_YY"
#		call CALLPRINTER "ptcrewrq $_RPTDATE"
#		if $_SYSSTAT != 0 then
#			phlanget 1879  "No Staffing Guide for Requested Date" "" _TEMP_STA
#			dpywerr "$_TEMP_STA ($_SDATE)..."
#		endif
#		return
	.ITEM "\\ "
	.ITEM "%phlanget 991 '\\  OPERATIONS CONTROL' ''"
	.ITEM "%phlanget 992 'g)  Inventory/PCA' ''"
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	return
		menu INVMAINT
	.ITEM "%phlanget 993 'h)  Timekeeping' ''"
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	return
		menu TKMAINT
	.ITEM "%phlanget 1003 'i)  Scheduled Maintenance' ''"
		call RSLOCK "csdaily"
		if $_SYSSTAT != 0 return
                phlanget 995  "        .... Creating Scheduled Maintenance List ...." "" _TEMP_SA
		dpywmsg "$_TEMP_SA"
		call DOBACKUP "lbrdschm.dat lbrtschm.dat"
		### mazd 
		systemc "trap 'rm /usr/fms/lock/csdaily' 1; cmachkof"
		if $_SYSSTAT == $_UE_LABOR then
			call RMBACKUP "lbrdschm.dat lbrtschm.dat"
			call RSUNLOCK "csdaily"
			return
		endif
		if $_SYSSTAT == $_UE_WARN then
			call RMBACKUP "lbrdschm.dat lbrtschm.dat"
			call RSUNLOCK "csdaily"
			phlanget 996 "All Scheduled Maintenance Completed" "" _TEMP_SA
			dpywerr "$_TEMP_SA"
			return
		endif
		if $_SYSSTAT != 0 then
			call RECOVER "lbrdschm.dat lbrtschm.dat"
			phlanget 997 "Scheduled Maintenance Checkoff Unsuccessful" "" _TEMP_SA
			dpywerr "$_TEMP_SA $_MS_CALLSUPP"
			call RSUNLOCK "csdaily"
			return
		endif
                phlanget 998 ".... Updating Earned Scheduled Maintenance Hours ...." "" _TEMP_SA
		dpywmsg "$_TEMP_SA"
		call DOBACKUP "lbrprfrm.dat lbrprday.dat"
		system "updatcma 2>/dev/null"
		if $_SYSSTAT != 0 then
			call RECOVER \
			  "lbrdschm.dat lbrtschm.dat lbrprfrm.dat lbrprday.dat"
			phlanget 999 "Earned Scheduled Maintenance Hours Were NOT Updated" "" _TEMP_SA
			dpywerr -l "$_TEMP_SA $_MS_CALLSUPP"
			call RSUNLOCK "csdaily"
			return
		endif
		dpywclr
		call RMBACKUP \
			"lbrdschm.dat lbrtschm.dat lbrprfrm.dat lbrprday.dat"
		call RSUNLOCK "csdaily"
		return
	
         .ITEM "%phlanget 2617 'j)  Crew Selection' ''"
                call CHKACCESS 0 1 2 3 5
                if $_SYSSTAT != 0       return
                if $EMPL_ACCESS -lt 4 then
                        call CHKCONSOLE "Crew Selection"
                        if $_SYSSTAT != 0       return
                endif
                unset MENU_LEVEL
                menu CREWSEL

	.ITEM "%phlanget 2618 'k)  Employee Setup and Changes' ''"
		call RSLOCK "humanrsc"  
		if $_SYSSTAT != 0	return
		phlanget 1001  "... Loading Employee Information Screen ......." "" _TEMP_SA
		dpywmsg "$_TEMP_SA"
		### mazd
		call SAFECMDC "empmain" "hrcempl.dat hrcrate.dat" "" "humanrsc"
		if $_SYSSTAT != 0 then
			
			phlanget 1002 "Unable to Update Employee Master File" "" _TEMP_SA
			dpywerr "$_TEMP_SA $_MS_CALLSUPP"
			return
		endif

		call EMPUPDATE
		access f $FMS/lock/humanrsc
		if $_SYSSTAT == 0	call RSUNLOCK "humanrsc"
	.ITEM "\\ "
	.ITEM "%phlanget 1880 '\\  BUSINESS ANALYSIS' ''"
	.ITEM "%phlanget 2619 'l)  Critical Reports' ''"
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	return
		call SYSLEVEL "LABOR" 
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSLEVEL" "$_MS_CALLSUPP"
			return
		endif
		if $_SYSLEVEL == "BASIC" then
			menu CRTRPTSB
		endif
		if $_SYSLEVEL == "ADVANCED" then
			menu CRTRPTSA
		endif
	.ITEM "%phlanget 2620 'm)  Reports By Application' ''"
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	return
		menu RPTSAPP
	.ITEM "\\ "
	.ITEM "\\"
	.ITEM "%phlanget 1883 '\\  FMS TRAINING' ''"
	.ITEM "%phlanget 2621 'n)  Computer Based Training' ''"
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	return
		if $EMPL_ACCESS -lt 4 then
			phlanget 1885 "Computer Based Training" "" _TEMP_STA
			call CHKCONSOLE "$_TEMP_STA"
			if $_SYSSTAT != 0	return
		endif
		access f $SEC/bin/cbt
		if $_SYSSTAT == -1 then
			phlanget 1886  "CBT Function Not Available ..." "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		logwarn "Invoking CBT (ID=$EMPL_SIGNOUT)"
		set _TOUCHDEV "no"
		access r "$FMS/.touchscrn"
		if $_SYSSTAT == 0	read $FMS/.touchscrn _TOUCHDEV
		call SAFECMD "syscbt $_TOUCHDEV" 
		if $_SYSSTAT != 0 then
			refresh
			refresh
			phlanget 1887 "Error Invoking CBT" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		refresh
		refresh
		return
	.ITEM "%phlanget 2622 'o)  Training Database' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		### Determine if we should continue with the previous session.
		phlanget 1889 "Continue previous session" "" _TEMP_STA
		phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
		ask 12 20 _ANSWER boolean 1 "$_TEMP_STA $_TEMP_YESNO? "
		if $_SYSSTAT != 0		return
		set _TRAIN_PREV $_ANSWER
		phlanget 1891 "Are you sure" "" _TEMP_STA
		phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
		ask 14 27 _ANSWER boolean 1 "$_TEMP_STA $_TEMP_YESNO? "
		if $_SYSSTAT != 0		return
		phlanget 1316 "N" "No" _TEMP_NO
		if $_ANSWER == $_TEMP_NO	return
		popall
		call INITTRAIN $_TRAIN_PREV
		if $_SYSSTAT != 0	return
		###
		###  Go to Main Menu and fall through with Training flags
		###
		menu MAIN
		leave
	.ITEM "%phlanget 2623 'p)  EXPERT Testing' ''"
		set _TOUCHDEV no
		access r "$FMS/.touchscrn"
		if $_SYSSTAT == 0	read $FMS/.touchscrn _TOUCHDEV
		set _AM_PWD "SECRET"
		access r "$FMS/data/syspass.txt"
		read -2 $FMS/data/syspass.txt _AM_PWD
	    @execops
		system "sushell /bin/chown fms /dev/$_SYSTTY"
		system "sushell /bin/chmod 666 /dev/$_SYSTTY"
		call SAFECMDC "opsmain $_TOUCHDEV $_AM_PWD" "hrcempl.dat"
		if $_SYSSTAT != 0 then 
			phlanget 1893 "Unable to Load Expert Testing" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
	.ITEM "\\ "
	.ITEM "%phlanget 1894 '\\  SYSTEMS SUPPORT' ''"
	.ITEM "%phlanget 2624 'q)  Systems Administration ' ''"
		if $EMPL_ACCESS -lt 4 then
			phlanget 176 "FMS Administration" "" _TEMP_STA
			call CHKCONSOLE "$_TEMP_STA"
			if $_SYSSTAT != 0	return
		endif
		menu FMSADMIN
	.ITEM "%phlanget 2625 'r)  Cancel Printing Reports' ''"
		call CANCELPRT
# MEXICO - LINUX insert SUS start of day "phsod_linux.s"
	.ITEM "s)  Inicio de Dia"
		clear
		system  "phsod_linux.s"
		refresh
	.LEAVE
		if $FMS_TRAIN != Y then
			if "$SANDPATH" != ""  rm -f $SANDPATH/lock/remote
			if "$SANDPATH" != ""  access f $SANDPATH/lock/remote
			if "$SANDPATH" == "" rm -f $FMS/lock/remote
			if "$SANDPATH" == "" access f $FMS/lock/remote
			if $_SYSSTAT == 0	call RSUNLOCK "remote"
			logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
			exit 0
		endif
		if $FMS_TRAIN == Y then
			call EXITTRAIN
			if "$SANDPATH" != "" rm -f $SANDPATH/lock/remote
			if "$SANDPATH" != "" access f $SANDPATH/lock/remote
			if "$SANDPATH" == "" rm -f $FMS/lock/remote
			if "$SANDPATH" == "" access f $FMS/lock/remote
			if $_SYSSTAT == 0	call RSUNLOCK "remote"
			menu MAIN
		endif

###############################################################################
### Customer Service (2-digit signon) Menu
.MENU CUSTSERV "%phlanget 1897 'Customer Service' ''"
	.ENTER
		if "$EMPL_SIGNON" == ""		call SIGNON
	.ITEM "%phlanget 988 'a)  Order Processing' ''"
		call ORDERPROC
		refresh
	.ITEM "%phlanget 989 'b)  Employee Clock In' ''"
		call CLOCKIN
	.ITEM "%phlanget 990 'c)  Employee Clock Out' ''"
		call CLOCKOUT
	.LEAVE
	
###############################################################################
### Inventory Maintenance and Close Processes
.MENU INVMAINT "%phlanget 1038 'Inventory' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 1898 'a)  Inventory Updates/Transfers' ''"
		call RSLOCK "invmgmt"
		if $_SYSSTAT != 0  return
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		if "$CURHR" < "04" then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		systemv _DATEPROC "sysflag -p last_date_proc 2>/dev/null"
		systemv _DATEPROC "syspdate -b $_DATEPROC 2>/dev/null"
		if $_TODAYSDATE != $_DATEPROC	then
			phlanget 978 "Ideal Usage for today is current ... " "" _TEMP_STA
			dpywmsg "$_TEMP_STA"
			sleep 4
			set _TEMP_STA "edit"
		endif
		if "$_TEMP_STA" == "edit" goto invedit
		call UPDIDEAL $_TODAYSDATE
		if $_SYSSTAT -gt 6 then
			phlanget 1007 "The posting of ideal usage for today did not successfully complete." "" _TEMP_STA
			phlanget 1912 "The F9-PCA Variance option and the Ending Inventory validation checks" "" _TEMP_STB
			phlanget 1913 "will not reflect current ideal usage information." "" _TEMP_STC
			phlanget 1914 "                      Press ANY KEY to continue." "" _TEMP_STD
			dpywmsg "$_TEMP_STA" \
				"$_TEMP_STB" \
				"$_TEMP_STC" \
				" " \
				"$_TEMP_STD"
		 	pause
		endif
	      @invedit
		phlanget 1899 " Loading Inventory Updates/Transfers ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_PATIENT"
		systemv _CURYYPPSP "syscalgt -p invcaldr.txt 2>/dev/null"
		substr _CURYY 0,2 $_CURYYPPSP
		substr _CURPRD 3,2 $_CURYYPPSP
		### mazd 
		call SAFECMDC "invedit" \
			     "invtran.$_CURYY$_CURPRD invxfers.dat invseq.dat" $_UE_IUPDATE "invmgmt"
		if $_SYSSTAT == $_UE_IUPDATE  set _SYSSTAT 0       
		if $_SYSSTAT != 0  then        
			phlanget 1900 "  Error Updating Inventory ......." "" _TEMP_STA
			dpywerr "$_TEMP_STA $_SYSSTAT"
		endif
		call RSUNLOCK "invmgmt"
		return
	.ITEM "%phlanget 1901 'b)  Physical Inventory Tally Form' ''"
		set _WROW 6
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		call CALLPRINTER "invptall"
		if $_SYSSTAT == 0	return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 1902 'c)  Inventory Transfer Form' ''"
		systemc "invdtrnf"
		if $_SYSSTAT == 0	return
		if $_SYSSTAT == $_UE_DBACCESS then
			phlanget 1903 "Unable to Access Transfers Database" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $_SYSSTAT == $_UE_WARN then
			phlanget 1904 "No Inventory Transfers to Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		phlanget 1905 "Unable to Create Transfer Form" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 1906 'd)  Product Cost Analysis Report' ''"
		set _WROW 6
		call GETSUBPRD
                if $_SYSSTAT != 0 		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		systemv _CURYYPPSP "syscalgt -p invcaldr.txt 2>/dev/null"
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		if $CURHR < 04 then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		systemv _DATEPROC "sysflag -p last_date_proc 2>/dev/null"
		systemv _DATEPROC "syspdate -b $_DATEPROC 2>/dev/null"
		if $_TODAYSDATE != $_DATEPROC goto nousage

		call UPDIDEAL $_TODAYSDATE
		if $_SYSSTAT > 6 then
			phlanget 1907 "Ideal Usage Generation Failure" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
	       @nousage
		call CALLPRINTER "invppca -p$_RPTYYPPSP"
		if $_SYSSTAT == 0	return
		if $_SYSSTAT == $_UE_BADIDATE then
			phlanget 2626 "Data not on File for Year/Period/Sub-Period" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_RPTYYPPSP"
			return
		endif
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 1909 'e)  Inventory Close' ''"
		### mazd
        systemc "/usr/bin/ph/rsunlock.s invclo"
	    call RSLOCK "invclo"
		if $_SYSSTAT != 0  return
		### end mazd
		call RSLOCK "invmgmt"
		if $_SYSSTAT != 0  return
		system "rm -f $FMS/tmp/.pca*"
		system "grep PCA_SUMMARY $FMS_LOG >$FMS/tmp/.pca 2>/dev/null"
		if $_SYSSTAT != 0 then
			logwarn "invclose not allowed- invppca not reviewed."
			phlanget 1910 "             You are performing an INVENTORY CLOSE OUT" "" _TEMP_STA
			phlanget 1911 "  In order to accomplish a CLOSE OUT these steps must be completed:" "" _TEMP_STB
			phlanget 2627 "  1. PFS Receipts, Transfers & Ending Inventory updated for the sub-period." "" _TEMP_STC
			phlanget 1916 "  2. Unit Costs verified." "" _TEMP_STD
			phlanget 1917 "  3. Inventory Reports reviewed." "" _TEMP_STE
			phlanget 2450 "                   INVENTORY CLOSE NOT ALLOWED ! " "" _TEMP_STF
			phlanget 2451 "         Please verify your Product Cost Analysis report " "" _TEMP_STG
			phlanget 2452 "                     before closing inventory. " "" _TEMP_STH
			phlanget 2453 "                    Press ANY KEY to continue." "" _TEMP_STI
			dpywmsg -b " " " " "$_TEMP_STA" "$_TEMP_STB" " " \
				"$_TEMP_STC" "$_TEMP_STD" "$_TEMP_STE" " " " " \
				"$_TEMP_STF" "$_TEMP_STG" "$_TEMP_STH" " " \
				"$_TEMP_STI" " " 
			pause
			dpywclr
			goto invexit
		endif
		## Hacker Alert- PCA_SUMMARY placed in logfile by invedit
		## this is a messy way to get it but sysuif2 does not allow
		## complicated shell commands. 
		system "grep PCA= $FMS/tmp/.pca \|tail -1 >$FMS/tmp/.pca1"
		systemv _PCA "cat $FMS/tmp/.pca1 | cut -d\" \" -f4-5"
		systemv _COS "cat $FMS/tmp/.pca1 | cut -d\" \" -f7-8"
		systemv _VAR "cat $FMS/tmp/.pca1 | cut -d\" \" -f10-11"
		phlanget 2454 "                      INVENTORY CLOSE OUT" "" _TEMP_STA
		phlanget 2455 " In order to accomplish a CLOSE OUT these steps must be completed:" "" _TEMP_STB
		phlanget 2627 "  1. PFS Receipts, Transfers & Ending Inventory updated for the sub-period." "" _TEMP_STC
		phlanget 1916 "  2. Unit Costs verified." "" _TEMP_STD
		phlanget 1917 "  3. Inventory Reports reviewed." "" _TEMP_STE
		phlanget 2456 "                      PCA REPORT SUMMARY" "" _TEMP_STF
		phlanget 2457 "                   Total PCA:" "" _TEMP_STG
		phlanget 2458 "                  Actual COS:" "" _TEMP_STH
		phlanget 2459 "                    Variance:" "" _TEMP_STI
		phlanget 2460 "If any steps have NOT been completed Press N to return to the" "" _TEMP_STJ
		phlanget 2461 "INVMAINT MENU and complete these steps." "" _TEMP_STK
		dpywmsg -b "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC" "$_TEMP_STD" \
			"$_TEMP_STE" " " "$_TEMP_STF" "$_TEMP_STG $_PCA" \
			"$_TEMP_STH $_COS" "$_TEMP_STI $_VAR" " " "$_TEMP_STJ" \
			"$_TEMP_STK"
		system "rm -f $FMS/tmp/.pca*"
		phlanget 1918 "Have you completed all Inventory steps? " "" _TEMP_STA
		phlanget 1316 "N" "No" _TEMP_NO
		ask 5 16 _ANSWER boolean 1 "$_TEMP_STA" "$_TEMP_NO"
		if $_SYSSTAT == 0		poplast
		dpywclr
		if $_SYSSTAT != 0		goto invexit
		if $_ANSWER == "$_TEMP_NO"	goto invexit
		phlanget 2628 " Closing Out Inventory For the Sub-Period ..." "" _TEMP_STA 
		dpywmsg "$_TEMP_STA $_MS_PATIENT"
		systemv _CURYYPPSP "syscalgt -p invcaldr.txt 2>/dev/null"
		substr _CURYY 0,2 $_CURYYPPSP
		substr _CURPRD 3,2 $_CURYYPPSP
		### Save current copy of invtran.YYPP before closing
		system "(cd $FMS_DATA;rm -f invtran.tmp;cp invtran.$_CURYY$_CURPRD invtran.tmp 2>/dev/null)"
	### Check to make sure all PFS orders that have been received have
	### been posted
		if "$_RLSC" == "activ"	call PFSCHK
		if $_ANSWER == "$_TEMP_NO" goto invexit
	### Post usage for the day before closing inventory
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		if "$CURHR" < "04" then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		systemv _DATEPROC "sysflag -p last_date_proc 2>/dev/null"
		systemv _DATEPROC "syspdate -b $_DATEPROC 2>/dev/null"

		### Post ideal usage for current day if necessary
		### Check inventory date, if none default to 01/01/70
		### if 01/01/70 then do not run ideal usage nor any poll rpts

		systemv _INVDATE "/usr/fms/util/invdmp -d 2>/dev/null"

		if $_SYSSTAT != 0	set _INVDATE "01/01/70"
		if "$_INVDATE" == "01/01/70" 	goto nousage
		if $_TODAYSDATE != $_DATEPROC	goto nousage
		call UPDIDEAL $_TODAYSDATE
		if $_SYSSTAT -gt 6 then
			phlanget 1907 "Ideal Usage Generation Failure" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			goto invexit
		endif
	       @nousage
		call SAFECMD "invclose >/dev/null 2>&1" "invtran.$_CURYY$_CURPRD" $_UE_EARLY
		if $_SYSSTAT == $_UE_EARLY then                 
		     	phlanget 2629 "Too Early to Close Out Inventory for the Current Sub-Period ..." "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			call RSUNLOCK "invmgmt"
			return
		endif
		if $_SYSSTAT != 0 then                 
			logwarn "Error running invclose, ID = $EMPL_SIGNON"
			phlanget 1921 "   Error Closing Out Inventory .." "" _TEMP_STA
		 	dpywerr "$_TEMP_STA"
			call RSUNLOCK "invmgmt"
			return
		endif
		if "$_INVDATE" == "01/01/70"	goto noinvrpts
		if $FMS_TRAIN != Y then
			substr _unitnum 4,2 $FMS_STORE
			system "([ ! -d $FMS/op/rpts/inv ] && sushell /bin/mkdir $FMS/op/rpts/inv) 2>/dev/null"
			system "([ ! -d $FMS/op/rpts/pca ] && sushell /bin/mkdir $FMS/op/rpts/pca) 2>/dev/null"
			system "(sushell /bin/chown fms $FMS/op/rpts/inv $FMS/op/rpts/pca) 2>/dev/null"
			system "(sushell /bin/chgrp bin $FMS/op/rpts/inv $FMS/op/rpts/pca) 2>/dev/null"
			system "(sushell /bin/chmod 777 $FMS/op/rpts/inv $FMS/op/rpts/pca) 2>/dev/null"
			system "(invpwksh -p$_CURYYPPSP >$FMS/op/rpts/inv/$_unitnum) 2>/dev/null"
			system "(invppca -p$_CURYYPPSP >$FMS/op/rpts/pca/$_unitnum) 2>/dev/null"
			system "(invptrn -p$_CURYYPPSP >$FMS/op/poll/invdmp.txt) 2>/dev/null"
		endif
	       @noinvrpts
		### Save current copy of invtran.dat before closing
		system "(cd $FMS_DATA;mv inv/invtran.prv inv/invtran.bak 2>/dev/null)"
		system "(cd $FMS_DATA;mv invtran.tmp inv/invtran.prv 2>/dev/null)"
		if $_SYSSTAT != 0 then
			logwarn "FSS: inv/invtran.prv is from previous sub-prd."
			system "mv $FMS_DATA/inv/invtran.bak $FMS_DATA/inv/invtran.prv 2>/dev/null"
		endif
		system "rm -f $FMS_DATA/inv/invtran.bak 2>/dev/null"

		logwarn "INVCLOSE ran successfully by (ID = $EMPL_SIGNON)"
		rm -f $FMS_DATA/.invnotclosed $FMS_DATA/.invoveride
		phlanget 1922 "... Close Out Successful !!!!!! ........." "" _TEMP_STA
		dpywmsg -b "$_TEMP_STA"
		dpymsg "** $_MS_ENTER **"
		pause
		dpyxclr
		phlanget 1923 "Verifying Usages ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_PATIENT"
		## re-install all raw products in case invclose delete new ones
		system "invdrprd 2>/dev/null"
		call SAFECMD "invavgiu -p$_CURYYPPSP" "invtran.$_CURYY$_CURPP"
		if $_SYSSTAT != 0 then                 
		 	phlanget 1924  "   Error Updating Inventory for Reconstructed Day(s) .." "" _TEMP_STA
		 	dpywerr "$_TEMP_STA"
			call RSUNLOCK "invmgmt"
		endif
		dpywclr
	      @invexit
		### mazd
	    call RSUNLOCK "invclo"
		### end mazd
		call RSUNLOCK "invmgmt"
		system "rm -f $FMS_DATA/invtran.tmp 2>/dev/null"
		refresh
		return
	.ITEM "%phlanget 1529 'f)  Suggested Order Report' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		set _WROW 11
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		if "$CURHR" < "04" then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
	       @invsugorl1
		phlanget 1601 "Enter last forecast date to report" "" _TEMP_STA
		ask $_WROW 20 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]:" $_SYSDATE
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		systemv _TODAYYMMDD "syspdate -k$_TODAYSDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATE "$_MM/$_DD/$_YY"
		#if $_SEDATE < $_TODAYSDATE then
		if $_YYMMDD < $_TODAYYMMDD then
			phlanget 718 "Requested end date is before today" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		#if $_SEDATE < $_TODAYSDATE goto invsugorl1
		if $_YYMMDD < $_TODAYYMMDD goto invsugorl1

		call NEXTLINE 0
		call GETPRINTER $_WROW 43
		if $_SYSSTAT != 0		return
		call CALLPRINTER "invsugor $_SEDATE"
		if $_SYSSTAT == 0  return
		phlanget 2630 "Error running Suggested Order Report" "" _TEMP_SA
		dpywerr "$_TEMP_SA $_MS_CALLSUPP"
###### Modificacion MEXICO
#	.ITEM "g)  Ordenes a Proveedores"
#		system  "phinvord.s -v"
#		system "$FMS/etc/sysfkeys FMS"
#		refresh
#	.ITEM "h)  Recepciones de Proveedores"
#		system  "phinvrcp.s -v"
#		system "$FMS/etc/sysfkeys FMS"
#		refresh
	.ITEM "g)  Inventario de Criticos"
		system  "phcritin.s -v"
		if $_SYSSTAT != 0 then
			pause
		endif
		refresh
######
	.LEAVE

###############################################################################
### Timekeeping Maintenance and Close Processes
.MENU TKMAINT "%phlanget 1925 'Timekeeping' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 1926 'a)  Employees Currently Clocked In' ''"
		set _WROW	3
		if $FMS_TRAIN != Y then
			phlanget 1927 "   ....... Retrieving the Clock In/Out Data ........" "" _TEMP_STA
			dpywmsg "$_TEMP_STA"
			call NORGPUNCH
		endif
		call GETPRINTER $_WROW 43
		if $_SYSSTAT != 0	return
		popall
		call CALLPRINTER "tkclckin"
		if $_SYSSTAT != 0 then
			phlanget 1928 "Error Trying to Report Clocked-In Employees" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	#.ITEM "%phlanget 1929 'b)  Timekeeping Corrections' ''"
		#call RSLOCK "payroll"
		#if $_SYSSTAT != 0 return
		#if $FMS_TRAIN != Y then
		#	phlanget 1927 "   ....... Retrieving the Clock In/Out Data ........" "" _TEMP_STA
		#	dpywmsg "$_TEMP_STA"
		#	call NORGPUNCH
		#endif
		#call PAYTRAN
		#call RSUNLOCK "payroll"
##########MEXICO
		#system "tkclckin -c > /dev/null"
##########
	.ITEM "%phlanget 1930 'c)  Error Transactions' ''"
		call RSLOCK "payroll"
		if $_SYSSTAT != 0 return
		call ERRTRANRPT
		call RSUNLOCK "payroll"

		return
######
	.LEAVE

############################################################################
######## CREWSEL Crew selection menu
.MENU CREWSEL "%phlanget 2633 'Crew Selection' ''"
        .ENTER
	.ITEM "%phlanget 2634 'a) Enter Candidate Information' ''" 
		call CAND_INFO
        .ITEM "%phlanget 2635 'b) Candidate Score Profile' ''"
		call CAND_SCORE
        .ITEM "%phlanget 2636 'c) Candidate Score Listing' ''"
		call CAND_SCLST
        .ITEM "%phlanget 2637 'd) Cancel Printing' ''"
		call CANCELPRT
        .LEAVE

############################################################################
######## CREWRPTS selection menu 
.MENU CREWRPTS "%phlanget 2638 'Crew Selection Reports' ''"
        .ENTER
        .ITEM "%phlanget 2639 'a) Candidate Score Profile' ''"
		call CAND_SCORE
        .ITEM "%phlanget 2640 'b) Candidate Score Listing' ''"
		call CAND_SCLST
        .ITEM "%phlanget 2641 'c) Cancel Printing' ''"
               call CANCELPRT
        .LEAVE

###############################################################################
### Critical Reports Menu 
.MENU CRTRPTSA "%phlanget 1950 'Critical Reports' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "\\"
	.ITEM "%phlanget 1951 '\\    SALES' ''"
	.ITEM "\\"
	.ITEM "%phlanget 1952 '\\  SALES/SERVICE' ''"
	.ITEM "%phlanget 1953 'a)  Operations Summary       ' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  10 37
                if $_SYSSTAT != 0		return
		system "susrpts OD 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1955 "Unable to Generate Operations Summary Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/dosum/$_unitno"
		refresh
	.ITEM "%phlanget 1956 'b)  Daily Order Stats' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  10 37
                if $_SYSSTAT != 0		return
		system "susrpts DS 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1957 "Unable to Generate Daily Order Stats Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/stat/$_unitno"
	.ITEM "%phlanget 1958 'c)  Hourly Detail' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  10 37
                if $_SYSSTAT != 0		return
		system "susrpts HR 1>/dev/null 2>&1"
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/hour/$_unitno"
	.ITEM "%phlanget 1959 'd)  Delivery Performance' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  10 37
                if $_SYSSTAT != 0		return
		system "susrpts VD 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1960 "Unable to Generate Delivery Performance Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/vd/$_unitno"
	.ITEM "\\"
	.ITEM "%phlanget 1961 '\\  CASH CONTROL/AUDIT' ''"
	.ITEM "%phlanget 1962 'e)  Sales Analysis' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  6 2
                if $_SYSSTAT != 0		return
		system "susrpts SD 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1963  "Unable to Generate Sales Analysis Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/dsales/$_unitno"
	.ITEM "%phlanget 1964 'f)  Daily Cancels' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  6 2
                if $_SYSSTAT != 0		return
		system "susrpts CX 1>/dev/null 2>&1"
		#if $_SYSSTAT != 0 then
		#	dpywerr "Unable to Generate Daily Cancels Report" \
		#		"$_MS_CALLSUPP"
		#	return
		#endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/canx/$_unitno"
	.ITEM "%phlanget 1965 'g)  Driver Report' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  6 2
                if $_SYSSTAT != 0		return
		system "susrpts DR 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1966  "Unable to Generate Driver Report " "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/dr/$_unitno"
	.ITEM "%phlanget 1967 'h)  Unknown Tickets' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  6 2
                if $_SYSSTAT != 0		return
		system "susrpts UT 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1968 "Unable to Generate Unknown Tickets Report " "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP" 
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/untk/UK"
	.ITEM "\\"
	.ITEM "\\"
	.ITEM "\\"
	.ITEM "%phlanget 1969 '\\    MARGINS' ''"
	.ITEM "\\"
	.ITEM "%phlanget 1970 '\\  FOOD COSTS' ''"
	.ITEM "%phlanget 1971 'i)  Yesterday\'s Prep Status' ''"
		set _WROW 6
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0		return
		call CALLPRINTER "ptysprep"
		if $_SYSSTAT != 0 then
		    phlanget 1972 "Unable To Print Yesterday's Prep Status" "" _TEMP_STA
		    dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 1973 'j)  Prep Waste Report' ''"
		set _WROW 6
		phlanget 1974 "1)  Daily                  " "" _TEMP_STA
		phlanget 1975 "2)  Weekly" "" _TEMP_STB
		phlanget 1976 "3)  Period" "" _TEMP_STC
		ask $_WROW 44 _ANSWER menu 3 - 0 "" "$_TEMP_STA" "$_TEMP_STB" \
			"$_TEMP_STC"
		if $_SYSSTAT != 0		return
		call NEXTLINE $_ANSWER
		if $_ANSWER == 0		set _KEY "D"
      		if $_ANSWER == 1 		set _KEY "W"
      		if $_ANSWER == 2 		set _KEY "P"
		phlanget 1869 "Enter date to report" "" _TEMP_STA
		call GETPROMPTDAY 0
		ask $_WROW 34 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_PRMTDAY
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "ptpwaste $_RPTDATE $_KEY"
		if $_SYSSTAT != 0 then
		    phlanget 1977 "Unable To Print Waste Report" "" _TEMP_STA
		    dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 1978 'k)  Daily Ideal Usage' ''"
		set _WROW 6
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		if $CURHR < 04 then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		call GETPROMPTDAY 0
		phlanget 1940 "Enter Date to Report" "" _TEMP_STA 
		ask $_WROW 32 _RPTDATEX date 8 "$_TEMP_STA [$_DATEFMT]: " $_PRMTDAY
                if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_RPTDATEX 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		call NEXTLINE 0
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0		return
		if $_TODAYSDATE == $_RPTDATE	call UPDIDEAL $_TODAYSDATE
		if $_SYSSTAT != 0 then
			phlanget 1907 "Ideal Usage Generation Failure" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		call CALLPRINTER "invpiuse -d$_RPTDATE"
		if $_SYSSTAT == 0	return
		if $_SYSSTAT == $_UE_BADIDATE then
			phlanget 1979 "Data not on File for" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_RPTDATEX"
			return
		endif
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 1980 'l)  Product Cost Analysis' ''"
		set _WROW 6
		call GETSUBPRD
                if $_SYSSTAT != 0 		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		systemv _CURYYPPSP "syscalgt -p invcaldr.txt 2>/dev/null"
		substr _CURYY 0,2 $_CURYYPPSP
		substr _CURPRD 3,2 $_CURYYPPSP
		substr _CURSUBP 6,1 $_CURYYPPSP
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		if $CURHR < 04 then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		systemv _DATEPROC "sysflag -p last_date_proc 2>/dev/null"
		systemv _DATEPROC "syspdate -b $_DATEPROC 2>/dev/null"
		if $_TODAYSDATE != $_DATEPROC goto nousage

		call UPDIDEAL $_TODAYSDATE
		if $_SYSSTAT > 6 then
			phlanget 1907 "Ideal Usage Generation Failure" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
	       @nousage
		call CALLPRINTER "invppca -p$_RPTYYPPSP"
		if $_SYSSTAT == 0	return
		if $_SYSSTAT == $_UE_BADIDATE then
			phlanget 2642 "Data not on File for Period/Sub-Period" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_RPTPRD/$_RPTSUBP"
			return
		endif
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "\\"
	.LEAVE

###############################################################################
### Critical Reports Menu 
.MENU CRTRPTSB "%phlanget 1950 'Critical Reports' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "\\"
	.ITEM "%phlanget 1951 '\\    SALES' ''"
	.ITEM "\\"
	.ITEM "%phlanget 1952 '\\  SALES/SERVICE' ''"
	.ITEM "%phlanget 1953 'a)  Operations Summary       ' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  10 37
                if $_SYSSTAT != 0		return
		system "susrpts OD 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1955 "Unable to Generate Operations Summary Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/dosum/$_unitno"
	.ITEM "%phlanget 1956 'b)  Daily Order Stats' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  10 37
                if $_SYSSTAT != 0		return
		system "susrpts DS 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1957 "Unable to Generate Daily Order Stats Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/stat/$_unitno"
	.ITEM "%phlanget 1958 'c)  Hourly Detail' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  10 37
                if $_SYSSTAT != 0		return
		system "susrpts HR 1>/dev/null 2>&1"
		#endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/hour/$_unitno"
	.ITEM "%phlanget 1959 'd)  Delivery Performance' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  10 37
                if $_SYSSTAT != 0		return
		system "susrpts VD 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1960 "Unable to Generate Delivery Performance Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/vd/$_unitno"
	.ITEM "\\"
	.ITEM "%phlanget 1961 '\\  CASH CONTROL/AUDIT' ''"
	.ITEM "%phlanget 1962 'e)  Sales Analysis' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  6 2
                if $_SYSSTAT != 0		return
		system "susrpts SD 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1963  "Unable to Generate Sales Analysis Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/dsales/$_unitno"
	.ITEM "%phlanget 1964 'f)  Daily Cancels' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  6 2
                if $_SYSSTAT != 0		return
		system "susrpts CX 1>/dev/null 2>&1"
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/canx/$_unitno"
	.ITEM "%phlanget 1965 'g)  Driver Report' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  6 2
                if $_SYSSTAT != 0		return
		system "susrpts DR 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1966  "Unable to Generate Driver Report " "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/dr/$_unitno"
	.ITEM "%phlanget 1967 'h)  Unknown Tickets' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call GETPRINTER  6 2
                if $_SYSSTAT != 0		return
		system "susrpts UT 1>/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 1968 "Unable to Generate Unknown Tickets Report " "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP" 
			return
		endif
		substr _unitno 4,2 $FMS_STORE
		call CALLPRINTER "cat $FMS/rpts/untk/UK"
	.ITEM "\\"
	.ITEM "\\"
	.ITEM "\\"
	.ITEM "%phlanget 1969 '\\    MARGINS' ''"
	.ITEM "\\"
	.ITEM "%phlanget 1970 '\\  FOOD COSTS' ''"
	.ITEM "%phlanget 1971 'i)  Yesterday\'s Prep Status' ''"
		set _WROW 6
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0		return
		call CALLPRINTER "ptysprep"
		if $_SYSSTAT != 0 then
		    phlanget 1972 "Unable To Print Yesterday's Prep Status" "" _TEMP_STA
		    dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 1973 'j)  Prep Waste Report' ''"
		set _WROW 6
		phlanget 1974 "1)  Daily                  " "" _TEMP_STA
		phlanget 1975 "2)  Weekly" "" _TEMP_STB
		phlanget 1976 "3)  Period" "" _TEMP_STC
		ask $_WROW 44 _ANSWER menu 3 - 0 "" "$_TEMP_STA" "$_TEMP_STB" \
			"$_TEMP_STC"
		if $_SYSSTAT != 0		return
		call NEXTLINE $_ANSWER
		if $_ANSWER == 0		set _KEY "D"
      		if $_ANSWER == 1 		set _KEY "W"
      		if $_ANSWER == 2 		set _KEY "P"
		phlanget 1869 "Enter date to report" "" _TEMP_STA
		call GETPROMPTDAY 0
		ask $_WROW 34 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_PRMTDAY
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "ptpwaste $_RPTDATE $_KEY"
		if $_SYSSTAT != 0 then
		    phlanget 1977 "Unable To Print Waste Report" "" _TEMP_STA
		    dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 1978 'k)  Daily Ideal Usage' ''"
		set _WROW 6
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		if $CURHR < 04 then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		phlanget 1940 "Enter Date to Report" "" _TEMP_STA 
		call GETPROMPTDAY 0
		ask $_WROW 32 _RPTDATEX date 8 "$_TEMP_STA [$_DATEFMT]: " $_PRMTDAY
                if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_RPTDATEX 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		call NEXTLINE 0
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0		return
		if $_TODAYSDATE != $_RPTDATE goto nousage

		call UPDIDEAL $_TODAYSDATE
		if $_SYSSTAT > 6 then
			phlanget 1907 "Ideal Usage Generation Failure" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
	       @nousage
		call CALLPRINTER "invpiuse -d$_RPTDATE"
		if $_SYSSTAT == 0	return
		if $_SYSSTAT == $_UE_BADIDATE then
			phlanget 1979 "Data not on File for" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_RPTDATEX"
			return
		endif
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 1980 'l)  Product Cost Analysis' ''"
		set _WROW 6
		call GETSUBPRD
                if $_SYSSTAT != 0 		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		systemv _CURYYPPSP "syscalgt -p invcaldr.txt 2>/dev/null"
		substr _CURYY 0,2 $_CURYYPPSP
		substr _CURPRD 3,2 $_CURYYPPSP
		substr _CURSUBP 6,1 $_CURYYPPSP
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		if $CURHR < 04 then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		systemv _DATEPROC "sysflag -p last_date_proc 2>/dev/null"
		systemv _DATEPROC "syspdate -b $_DATEPROC 2>/dev/null"
		if $_TODAYSDATE != $_DATEPROC goto nousage

		call UPDIDEAL $_TODAYSDATE
		if $_SYSSTAT > 6 then
			phlanget 1907 "Ideal Usage Generation Failure" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
	       @nousage
		call CALLPRINTER "invppca -p$_RPTYYPPSP"
		if $_SYSSTAT == 0	return
		if $_SYSSTAT == $_UE_BADIDATE then
			phlanget 2642 "Data not on File for Period/Sub-Period" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_RPTPRD/$_RPTSUBP"
			return
		endif
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "\\"

	.ITEM "%phlanget 1603 'm)  Unit Performance Report' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		set _WROW 8
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		if "$CURHR" < "04" then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		phlanget 1869 "Enter date to report" "" _TEMP_STA
		call GETPROMPTDAY 0
		ask $_WROW 34 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]:" $_PRMTDAY
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATE "$_MM/$_DD/$_YY"
		call NEXTLINE 0
		call GETPRINTER $_WROW 43
		if $_SYSSTAT != 0		return
		phlanget 1673 "   ... Unit Performance Being Loaded ..." "" _TEMP_STA
		dpywmsg  "$_TEMP_STA $_MS_PATIENT"
		if $FMS_TRAIN == Y 	goto prtlbrptunp2
		if $_TODAYSDATE != $_SEDATE   goto prtlbrptunp2
		system "syspos getgc 2>/dev/null"
		dpywclr
		if $_SYSSTAT == $_UE_WARN then
			phlanget 2013 " POS Order file is empty" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $_SYSSTAT == $_UE_NOGCS then
			phlanget 2014 " No guest checks found" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $_SYSSTAT == $_UE_FATAL then
			phlanget 2015 " Error converting guest check files" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		if $_SYSSTAT != 0 then
			phlanget 2016 "POS Interface Failed" "" _TEMP_STA	
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
	### Copy current guest check data to today's file
		systemv _FILETODAY "syspdate -d $_SEDATE 2>/dev/null"
		system "cp $FMS_DATA/gcdata.dat $FMS_DATA/gcdata.$_FILETODAY 2>/dev/null"
	    @prtlbrptunp2
		systemv _FILEDAY "syspdate -d $_SEDATE 2>/dev/null"
		if $_TODAYSDATE == $_SEDATE   goto prtlbrptunp2a
		### Check if gcdata file exists
		access f "$FMS_DATA/gcdata.$_FILEDAY.Z"
		if $_SYSSTAT != 0 then
			phlanget 1674 "Guest Check data does not exist for" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_SDATE"
			return
		endif
		system "cat $FMS_DATA/gcdata.$_FILEDAY.Z|uncompress > $FMS_DATA/gcdata.$_FILEDAY 2>/dev/null"
	    @prtlbrptunp2a
		call CALLPRINTER "lbrptunp $_SEDATE"
		if $_SYSSTAT == 0 then
			system "rm -f $FMS_DATA/gcdata.$_FILEDAY"
			return
		endif
		system "rm -f $FMS_DATA/gcdata.$_FILEDAY"
		phlanget 2511 "Error running Unit Performance Report" "" _TEMP_SA
		dpywerr "$_TEMP_SA $_MS_CALLSUPP"
	.ITEM "%phlanget 1982 'n)  Day-Part Labor Analysis' ''"
		set _WROW 5
		phlanget 1983 "Enter process date" "" _TEMP_STA
		call GETPROMPTDAY 0
		ask $_WROW 35 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_PRMTDAY	 
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 40
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "lbrptdlb $_SDATE"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 1984 'o)  Daily Labor Report' ''"
		set _WROW 6
		phlanget 1983 "Enter process date" "" _TEMP_STA
		call GETPROMPTDAY 0
		ask $_WROW 35 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_PRMTDAY
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SDATE "$_MM/$_DD/$_YY"
		call GETPRINTER 9 35
                if $_SYSSTAT != 0	return
		phlanget 1985 "********* Report is Being Processed ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_PATIENT *********" 
		if $_PRINTER == 0 systemc "sysprntr -s lbrptlbr -d $_SDATE"
                set _OPT " "
		if $FMS_POSTYPE != NORAND set _OPT "-d"
	 	if $_PRINTER == 1 systemc "sysprntr -g lbrptlbr $_OPT $_SDATE"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2645 'p)  Timekeeping Summary Report' ''"
		set _WROW	4
		phlanget 1687 "Enter Starting Date" "" _TEMP_STA
		ask $_WROW 34 _SBDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		phlanget 1688 "Enter Ending Date" "" _TEMP_STA
		ask $_WROW 34 _SEDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SBDATE
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SBDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SBDATEI "$_MM/$_DD/$_YY"
		systemv _YYMMDD "syspdate -k$_SEDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATEI "$_MM/$_DD/$_YY"
		### Determine whether dates are valid
		system "tkpcktrn $_SBDATEI $_SEDATEI"
 		if $_SYSSTAT == 0		goto proceed
		phlanget 1990 "Dates not within current or previous payroll period" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_SBDATE $_SEDATE ($_SYSSTAT)"
		return
	    @proceed
		call NEXTLINE 0
		call GETPRINTER $_WROW 34
		if $_SYSSTAT != 0		return
		if $FMS_TRAIN != Y then
			phlanget 1927 "   ....... Retrieving the Clock In/Out Data ........" "" _TEMP_STA
			dpywmsg "$_TEMP_STA"
			call NORGPUNCH
		endif
		call CALLPRINTER "tksumrpt $_SBDATEI $_SEDATEI sysparm.dat $_UE_LABOR"
		goto status$_SYSSTAT -
		phlanget 1991 "Unable to Print Summary Report" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	    @status$_UE_LABOR
		dpywerr $_MS_NEGHOURS
	    @status$_UE_NONE
		return
        .ITEM "%phlanget 2646 'q)  Actual Cost of Labor (WTD)' ''"
                set _WROW       4
                phlanget 1940 "Enter Date to Report" "" _TEMP_STA
                ask $_WROW 34 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
                if $_SYSSTAT != 0               return
                systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
                call SPLITYYMMDD $_YYMMDD
                set _SDATE "$_MM/$_DD/$_YY"
                call NEXTLINE 0
                ### Determine whether dates are valid
                system "tkpcktrn $_SDATE"
                if $_SYSSTAT != 0 then
		phlanget 1941 "Date not within current or previous payroll period" "" _TEMP_STA
                    dpywerr "$_TEMP_STA"
                    return
                endif
		call GETPRINTER $_WROW 43
        	if $_SYSSTAT != 0		return
                call ACTCOL
	.LEAVE

###############################################################################
### Reports By Application Menu
.MENU RPTSAPP "%phlanget 1992 'Reports By Application' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 1994 'b)  Forecasting' ''"
		menu FCRPTS
	.ITEM "%phlanget 1995 'c)  Prep Planning' ''"
		menu PREPRPTS
	.ITEM "%phlanget 1996 'd)  Inventory Management' ''"
		menu INVRPTS
	.ITEM "%phlanget 2647 'f)  Crew Selection' ''"
		menu CREWRPTS  
	.ITEM "%phlanget 2005 'g)  Cancel Printing' ''"
		call CANCELPRT
	.LEAVE

#########################################################################
### Timekeeping Reports menu
.MENU TKRPTS "%phlanget 1999 'Timekeeping Reports' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2000 'a)  Timekeeping Summary Report' ''"
		set _WROW	4
		phlanget 1687 "Enter Starting Date" "" _TEMP_STA
		ask $_WROW 34 _SBDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		phlanget 1688 "Enter Ending Date" "" _TEMP_STA
		ask $_WROW 34 _SEDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SBDATE
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SBDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SBDATEI "$_MM/$_DD/$_YY"
		systemv _YYMMDD "syspdate -k$_SEDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATEI "$_MM/$_DD/$_YY"
		### Determine whether dates are valid
		system "tkpcktrn $_SBDATEI $_SEDATEI"
 		if $_SYSSTAT == 0		goto proceed
		phlanget 1990 "Dates not within current or previous payroll period" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_SBDATE $_SEDATE ($_SYSSTAT)"
		return
	    @proceed
		call NEXTLINE 0
		call GETPRINTER $_WROW 34
		if $_SYSSTAT != 0		return
		if $FMS_TRAIN != Y then
			phlanget 1927 "   ....... Retrieving the Clock In/Out Data ........" "" _TEMP_STA
			dpywmsg "$_TEMP_STA"
			call NORGPUNCH
		endif
		call CALLPRINTER "tksumrpt $_SBDATEI $_SEDATEI sysparm.dat $_UE_LABOR"
		goto status$_SYSSTAT -
		phlanget 1991 "Unable to Print Summary Report" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	    @status$_UE_LABOR
		dpywerr $_MS_NEGHOURS
	    @status$_UE_NONE
		return
	.ITEM "%phlanget 2001 'b)  Employees Currently Clocked In' ''"
		set _WROW	4
		if $FMS_TRAIN != Y then
			phlanget 1927 "   ....... Retrieving the Clock In/Out Data ........" "" _TEMP_STA
			dpywmsg "$_TEMP_STA"
			call NORGPUNCH
		endif
		call GETPRINTER $_WROW 43
		if $_SYSSTAT != 0	return
		popall
		call CALLPRINTER "tkclckin"
		if $_SYSSTAT != 0 then
			phlanget 1928  "Error Trying to Report Clocked-In Employees" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 2434 'c)  Timesheet' ''"
		set _WROW	4
		phlanget 1932 "1)  Current Pay Period            " "" _TEMP_STA
		phlanget 1949 "2)  Previous Pay Period" "" _TEMP_STB
		ask $_WROW 41 _PP menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
                if $_SYSSTAT != 0		return
		call NEXTLINE $_PP
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0		return
		call CALLPRINTER "tktimsht $_PP"
		goto status$_SYSSTAT -
		if $_SYSSTAT != 0 then
		    phlanget 1934 "Unable to Run Time Sheet Report" "" _TEMP_STA	
		    dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	    @status$_UE_LABOR
		dpywerr $_MS_NEGHOURS
		return
	    @status$_UE_DBACCESS
		phlanget 1935 "Error Accessing Database" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	    @status$_UE_NONE
		return
	.ITEM "%phlanget 2002 'd)  Worksheet' ''"
		set _WROW	4
		phlanget 1940 "Enter Date to Report" "" _TEMP_STA
		ask $_WROW 34 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
                if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SDATE "$_MM/$_DD/$_YY"
		call NEXTLINE 0
		### Determine whether dates are valid
		system "tkpcktrn $_SDATE"
		if $_SYSSTAT != 0 then
		    phlanget 1941 "Date not within current or previous payroll period" "" _TEMP_STA
		    dpywerr "$_TEMP_STA"
		    return
		endif
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0		return
		call CALLPRINTER "tkwrksht $_SDATE"
		if $_PRINTER == 1 		refresh
		if $_SYSSTAT != 0 then
		    phlanget 2648 "Unable to Run WorkSheet Report" "" _TEMP_STA	
		    dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 2003 'e)  Timelog Report' ''"
		set _WROW	11
		call GETPPSSN 13
		if $_SYSSTAT != 0	return
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0	return
		if $_PP == 0	call CALLPRINTER "tktimlog $_SSN"
		if $_PP == 1	call CALLPRINTER "tktimlog -o $_SSN"
		if $_SYSSTAT != 0 then
			phlanget 1944 "Unable to Run Time Log Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 2004 'f)  Change Report' ''"
		set _WROW	10
		call GETPPSSN 14
		if $_SYSSTAT != 0		return
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0		return
		call CALLPRINTER "tkchgrpt $_PP $_SSN"
		if $_SYSSTAT != 0 then
			phlanget 1946 "Unable to Run Payroll Change Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
        .ITEM "%phlanget 2649 'g)  Actual Cost of Labor (WTD)' ''"
                set _WROW       4
                phlanget 1940 "Enter Date to Report" "" _TEMP_STA
                ask $_WROW 34 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
                if $_SYSSTAT != 0               return
                systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
                call SPLITYYMMDD $_YYMMDD
                set _SDATE "$_MM/$_DD/$_YY"
                call NEXTLINE 0
                ### Determine whether dates are valid
                system "tkpcktrn $_SDATE"
                if $_SYSSTAT != 0 then
		phlanget 1941 "Date not within current or previous payroll period" "" _TEMP_STA
                    dpywerr "$_TEMP_STA"
                    return
                endif
		call GETPRINTER $_WROW 43
        	if $_SYSSTAT != 0		return
                call ACTCOL
	.ITEM "%phlanget 2033 'h)  Cancel Printing' ''"
		call CANCELPRT

#########################################################################
### Timekeeping Reports menu
.MENU FCRPTS "%phlanget 2006 'Forecasting Reports' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2007 'a)  Guest Check Forecast Report' ''"
		set _WROW	6
		phlanget 1687 "Enter Starting Date" "" _TEMP_STA
		ask $_WROW 34 _SBDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
                if $_SYSSTAT != 0		return
		call NEXTLINE 0
		# default end date is 13 days (1209599 seconds) later
		systemv _YYMMDD "syspdate -k$_SBDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATE "$_MM/$_DD/$_YY"
		systemv _FUTURE "syspdate -g -a+1209599 $_SEDATE"
		substr _MM 0,2 $_FUTURE
		substr _DD 3,2 $_FUTURE
		substr _YY 6,2 $_FUTURE
		set _YYMMDD "$_YY$_MM$_DD"
		systemv _SEDATE "syspdate -f$_YYMMDD 2>/dev/null"
		phlanget 1688 "Enter Ending Date" "" _TEMP_STA
		ask $_WROW 34 _SEDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SEDATE
                if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER  $_WROW 41
                if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SBDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SBDATE "$_MM/$_DD/$_YY"
		systemv _YYMMDD "syspdate -k$_SEDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "fcgcprnt $_SBDATE $_SEDATE"
		if $_SYSSTAT != 0 then
		    phlanget 1855 "Unable To Print Guest Check History Report" "" _TEMP_STA
		    dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 2008 'b)  Guest Check History By Date' ''"
		set _WROW	6
		phlanget 1687 "Enter Starting Date" "" _TEMP_STA
		ask $_WROW 34 _SBDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
                if $_SYSSTAT != 0		return
		call NEXTLINE 0
		phlanget 1688 "Enter Ending Date" "" _TEMP_STA
		ask $_WROW 34 _SEDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SBDATE
                if $_SYSSTAT != 0		return
		poplast
		poplast
		set _WROW	6
		call NEXTLINE 0
		call GETPRINTER  $_WROW 41
                if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SBDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SBDATE "$_MM/$_DD/$_YY"
		systemv _YYMMDD "syspdate -k$_SEDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "fcpgchis $_SBDATE $_SEDATE"
		if $_SYSSTAT != 0 then
		    phlanget 1855 "Unable To Print Guest Check History Report" "" _TEMP_STA
		    dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 2009 'c)  Guest Check History By Day of Week' ''"
		set _WROW	6
		phlanget 1687 "Enter Starting Date" "" _TEMP_STA
		ask $_WROW 34 _SBDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
                if $_SYSSTAT != 0		return
		call NEXTLINE 0
		phlanget 1688 "Enter Ending Date" "" _TEMP_STA
		ask $_WROW 34 _SEDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SBDATE
                if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER  $_WROW 41
                if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SBDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SBDATE "$_MM/$_DD/$_YY"
		systemv _YYMMDD "syspdate -k$_SEDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "fcpgcsrt $_SBDATE $_SEDATE"
		if $_SYSSTAT != 0 then
		    phlanget 2010 "Unable to Print Guest Check History Report" "" _TEMP_STA
		    dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
	.ITEM "%phlanget 2011 'd)  Guest Check Tracking' ''"
		set _WROW 8
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		phlanget 2012 "   ... Guest Check Tracking Being Loaded ..." "" _TEMP_STA
		dpywmsg  "$_TEMP_STA $_MS_PATIENT"
		system "syspos getgc xtcn 2>/dev/null"
		dpywclr
		if $_SYSSTAT == $_UE_WARN then
			phlanget 2013 " POS Order file is empty" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $_SYSSTAT == $_UE_NOGCS then
			phlanget 2014 " No guest checks found" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $_SYSSTAT == $_UE_FATAL then
			phlanget 2015 " Error converting guest check files" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		if $_SYSSTAT != 0 then
			phlanget 2016 "POS Interface Failed" "" _TEMP_STA	
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
	    @prtgctrack
		call GETPRINTER $_WROW 43
		if $_SYSSTAT != 0		return
		call CALLPRINTER "fcpgctrk"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
	.ITEM "%phlanget 2017 'e)  Guest Check Comments' ''"
		call RSLOCK "csdaily"
		if $_SYSSTAT != 0 return

		phlanget 2018 "    ....... Loading the Program for Guest Check Comments ......." "" _TEMP_STA
		dpywmsg "$_TEMP_STA"
		### mazd
		call SAFECMDC "fcgccom" "gchistry.dat" "" "csdaily"
		call RSUNLOCK "csdaily"
		return
	.ITEM "%phlanget 2650 'f)  Cancel Printing' ''"
		call CANCELPRT
	.LEAVE

#########################################################################
### Prep Planning Reports menu
.MENU PREPRPTS "%phlanget 2019 'Prep Planning Reports' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2020 'a)  Daily Prep Plan' ''"
		set _WROW 6
		phlanget 1869 "Enter date to report" "" _TEMP_STA
		ask $_WROW 34 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 43
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "prpptdpp $_RPTDATE A"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2021 'b)  Prep Waste Report' ''"
		set _WROW 6
		phlanget 1974 "1)  Daily                  " "" _TEMP_STA
		phlanget 1975 "2)  Weekly" "" _TEMP_STB
		phlanget 1976 "3)  Period" "" _TEMP_STC 
		ask $_WROW 44 _ANSWER menu 3 - 0 "" "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC"
		if $_SYSSTAT != 0		return
		call NEXTLINE $_ANSWER
		if $_ANSWER == 0		set _KEY "D"
      		if $_ANSWER == 1 		set _KEY "W"
      		if $_ANSWER == 2 		set _KEY "P"
		phlanget 1869 "Enter date to report" "" _TEMP_STA
		ask $_WROW 34 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "ptpwaste $_RPTDATE $_KEY"
		if $_SYSSTAT != 0 then
		    phlanget 1977 "Unable To Print Waste Report" "" _TEMP_STA
		    dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 2022 'c)  Yesterday\'s Prep Status' ''"
		set _WROW 6
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0		return
		call CALLPRINTER "ptysprep"
		if $_SYSSTAT != 0 then
		    phlanget 2023 "Unable To Print Yesterday\'s Prep Status" "" _TEMP_STA
		    dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 2024 'd)  Cancel Printing' ''"
		call CANCELPRT
	.LEAVE

#########################################################################
### Inventory Reports menu
.MENU INVRPTS "%phlanget 2025 'Inventory Reports' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2026 'a)  Daily Ideal Usage' ''"
		set _WROW 6
		systemv _RPTDATE "syspdate -o -g -a-86400 2>/dev/null"
		if $_SYSSTAT != 0 then
			systemv _RPTDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		if $CURHR < 04 then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		substr _MM 0,2 $_RPTDATE
		substr _DD 3,2 $_RPTDATE
		substr _YY 6,2 $_RPTDATE
		set _YYMMDD "$_YY$_MM$_DD"
		systemv _RPTDATEX "syspdate -f$_YYMMDD 2>/dev/null"
		phlanget 1940 "Enter Date to Report" "" _TEMP_STA
		ask $_WROW 32 _RPTDATEX date 8 "$_TEMP_STA [$_DATEFMT]: " $_RPTDATEX
                if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_RPTDATEX 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		call NEXTLINE 0
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0		return
		if $_TODAYSDATE == $_RPTDATE	call UPDIDEAL $_TODAYSDATE
		if $_SYSSTAT != 0 then
			phlanget 1907 "Ideal Usage Generation Failure" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		call CALLPRINTER "invpiuse -d$_RPTDATE"
		if $_SYSSTAT == 0	return
		if $_SYSSTAT == $_UE_BADIDATE then
			phlanget 1979 "Data not on File for" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_RPTDATEX"
			return
		endif
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2027 'b)  Product Cost Analysis' ''"
		set _WROW 6
		call GETSUBPRD
                if $_SYSSTAT != 0 		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		systemv _CURYYPPSP "syscalgt -p invcaldr.txt 2>/dev/null"
		substr _CURYY 0,2 $_CURYYPPSP
		substr _CURPRD 3,2 $_CURYYPPSP
		substr _CURSUBP 6,1 $_CURYYPPSP
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		if $CURHR < 04 then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		systemv _DATEPROC "sysflag -p last_date_proc 2>/dev/null"
		systemv _DATEPROC "syspdate -b $_DATEPROC 2>/dev/null"
		if $_TODAYSDATE != $_DATEPROC goto nousage

		call UPDIDEAL $_TODAYSDATE
		if $_SYSSTAT > 6 then
			phlanget 1907 "Ideal Usage Generation Failure" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
	       @nousage
		call CALLPRINTER "invppca -p$_RPTYYPPSP"
		if $_SYSSTAT == 0	return
		if $_SYSSTAT == $_UE_BADIDATE then
			phlanget 2642 "Data not on File for Period/Sub-Period" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_RPTPRD/$_RPTSUBP"
			return
		endif
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2651 'c)  Work Sheet For a Sub-Period' ''"
		set _WROW 6
		call GETSUBPRD
                if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		call CALLPRINTER "invpwksh -p$_RPTYYPPSP"
		if $_SYSSTAT == 0	return
		if $_SYSSTAT == $_UE_BADIDATE then
			phlanget 2642 "Data not on File for Period/Sub-Period" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_RPTPRD/$_RPTSUBP"
			return
		endif
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2029 'd)  Work Sheet For Current Period' ''"
		set _WROW 6
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		systemv _CURYYPPSP "syscalgt -p invcaldr.txt 2>/dev/null"
		substr _CURYY 0,2 $_CURYYPPSP
		substr _CURPRD 3,2 $_CURYYPPSP
		call CALLPRINTER "invpwksh -p$_CURYY/$_CURPRD"
		if $_SYSSTAT == 0	return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2652 'e)  Detail For a Sub-Period' ''"
		set _WROW 6
		call GETSUBPRD
                if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		call CALLPRINTER "invprcpt -p$_RPTYYPPSP"
		if $_SYSSTAT == 0	return
		if $_SYSSTAT == $_UE_BADIDATE then
			phlanget 2642 "Data not on File for Period/Sub-Period" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_RPTPRD/$_RPTSUBP"
			return
		endif
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2031 'f)  Physical Inventory Tally Sheet' ''"
		set _WROW 6
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		call CALLPRINTER "invptall"
		if $_SYSSTAT == 0	return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2032 'g)  Inventory Transfer Form' ''"
		set _WROW 6
		systemc "invdtrnf"
		if $_SYSSTAT == 0	return
		if $_SYSSTAT == $_UE_DBACCESS then
			phlanget 1903 "Unable to Access Transfers Database" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $_SYSSTAT == $_UE_WARN then
			phlanget 1904 "No Inventory Transfers to Report" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		phlanget 1905 "Unable to Create Transfer Form" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2033 'h)  Cancel Printing' ''"
		call CANCELPRT
	.LEAVE

#########################################################################
### Advanced Labor Planning Reports menu
.MENU LBRRPTSA "%phlanget 2034 'Labor Planning Reports' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2035 'a)  Daily Labor Schedule' ''"
		set _WROW 6
		phlanget 1987 "Enter schedule date" "" _TEMP_STA
		ask $_WROW 35 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		phlanget 2036 "1)  Sort by Work Type" "" _TEMP_STA
		phlanget 2037 "2)  Sort Chronologically" "" _TEMP_STB
		ask $_WROW 43 _SORT menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
		if $_SYSSTAT != 0	return
		call NEXTLINE $_SORT
		set _SORTOPT ""
		if $_SORT == 0	set _SORTOPT "-w"
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		set _LBRCMD "lbrptdly $_SORTOPT $_RPTDATE"
		call GETPRINTER $_WROW 44
		if $_SYSSTAT != 0		return
		call CALLPRINTER "$_LBRCMD"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2038 'b)  Weekly Crew Schedule' ''"
		set _WROW 6
		phlanget 1987 "Enter schedule date" "" _TEMP_STA
		ask $_WROW 35 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		set _LBRCMD "lbrptwky $_RPTDATE"
		call GETPRINTER $_WROW 44
		if $_SYSSTAT != 0		return
		call CALLPRINTER "$_LBRCMD"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2039 'c)  Day-Part Labor Analysis' ''"
		set _WROW 6
		phlanget 1983 "Enter process date" "" _TEMP_STA
		ask $_WROW 35 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 40
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "lbrptdlb $_SDATE"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2040 'd)  Daily Labor Report' ''"
		set _WROW 6
		phlanget 1983 "Enter process date" "" _TEMP_STA
		ask $_WROW 35 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SDATE "$_MM/$_DD/$_YY"
		call GETPRINTER 9 35
                if $_SYSSTAT != 0	return
		phlanget 1985 "********* Report is Being Processed ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_PATIENT *********" 
		if $_PRINTER == 0 systemc "sysprntr -s lbrptlbr -d $_SDATE"
                set _OPT " "
		if $FMS_POSTYPE != NORAND set _OPT "-d"
	 	if $_PRINTER == 1 systemc "sysprntr -g lbrptlbr $_OPT $_SDATE"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2041 'e)  Projected Cost of Labor' ''"
		set _WROW 6
		systemv _DOW "syspdate -e 2>/dev/null"
		systemv _BEGDOW "sysstor -p beg_of_week 2>/dev/null"
		if $_DOW -ge $_BEGDOW	expr _ADJ "$_DOW - $_BEGDOW"
		if $_DOW -lt $_BEGDOW	then 
			expr _ADJ "7 - $_BEGDOW"
			expr _ADJ "$_ADJ + $_DOW"
		endif	
		unset _DOW
		expr _ADJ "$_ADJ * 86400"
		systemv _RPTDATE "syspdate -g -a-$_ADJ"
		unset _ADJ
		substr _MM 0,2 $_RPTDATE
		substr _DD 3,2 $_RPTDATE
		substr _YY 6,2 $_RPTDATE
		set _YYMMDD "$_YY$_MM$_DD"
		systemv _RPTDATEX "syspdate -f$_YYMMDD 2>/dev/null"
		phlanget 1987 "Enter schedule date" "" _TEMP_STA
		ask $_WROW 35 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_RPTDATEX
		if $_SYSSTAT != 0		return
		phlanget 1988 "  Report is Being Processed -" "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_PATIENT"
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		system "lbrcssch $_RPTDATE 2>/dev/null"
		dpywclr
		call NEXTLINE 0
		set _LBRCMD "lbrptsv $_RPTDATE"
		call GETPRINTER $_WROW 44
		if $_SYSSTAT != 0		return
		call CALLPRINTER "$_LBRCMD"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2042 'f)  Daily CM&A Checklist' ''"
		call GETPRINTER 9 35
                if $_SYSSTAT != 0	return
		call CALLPRINTER "ptcmatsk -1"
		if $_SYSSTAT != 0 dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2043 'g)  Scheduled Maintenance' ''"
		set _WROW 7
		phlanget 2044 "1)  All Tasks" "" _TEMP_STA
		phlanget 2045 "2)  All Incomplete Tasks " "" _TEMP_STB
		phlanget 2046 "3)  All Complete Tasks" "" _TEMP_STC
		ask $_WROW 45 _ANSWER menu 3 - 0 "" "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC"
		if $_SYSSTAT != 0		return
		call NEXTLINE $_ANSWER
		if $_ANSWER == 0		set _KEY "1"
      		if $_ANSWER == 1 		set _KEY "2"
      		if $_ANSWER == 2 		set _KEY "3"
		phlanget 2047 "  All Months " "" _TEMP_STA
		phlanget 2048 "  January    " "" _TEMP_STB
		phlanget 2049 "  February   " "" _TEMP_STC
		phlanget 2050 "  March      " "" _TEMP_STD 
		phlanget 2051 "  April      " "" _TEMP_STE
		phlanget 2052 "  May        " "" _TEMP_STF
		phlanget 2053 "  June       " "" _TEMP_STG
		phlanget 2054 "  July       " "" _TEMP_STH
		phlanget 2055 "  August     " "" _TEMP_STI
		phlanget 2056 "  September  " "" _TEMP_STJ
		phlanget 2057 "  October    " "" _TEMP_STK
		phlanget 2058 "  November   " "" _TEMP_STL
		phlanget 2059 "  December   " "" _TEMP_STM
		ask 7 26 _ANSWER menu 13 - 0 "" \
		"$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC" "$_TEMP_STD" \
		"$_TEMP_STE" "$_TEMP_STF" "$_TEMP_STG" "$_TEMP_STH" \
		"$_TEMP_STI" "$_TEMP_STJ" "$_TEMP_STK" "$_TEMP_STL" \
		"$_TEMP_STM"
		if $_SYSSTAT != 0		return
		set _MONTH $_ANSWER
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0		return
		call CALLPRINTER "lbrptsm $_KEY $_MONTH"
		if $_SYSSTAT != 0 then
			phlanget 2060 "Unable To Print Scheduled Maintenance" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		return
	.ITEM "%phlanget 1675 'h)  Unit Performance Report' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		set _WROW 8
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		if "$CURHR" < "04" then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		phlanget 1869 "Enter date to report" "" _TEMP_STA
		call GETPROMPTDAY 0
		ask $_WROW 34 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]:" $_PRMTDAY
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATE "$_MM/$_DD/$_YY"
		call NEXTLINE 0
		call GETPRINTER $_WROW 43
		if $_SYSSTAT != 0		return
		phlanget 1673 "   ... Unit Performance Being Loaded ..." "" _TEMP_STA
		dpywmsg  "$_TEMP_STA $_MS_PATIENT"
		if $_TODAYSDATE != $_SEDATE   goto prtlbrptunp3
		system "syspos getgc 2>/dev/null"
		dpywclr
		if $_SYSSTAT == $_UE_WARN then
			phlanget 2013 " POS Order file is empty" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $_SYSSTAT == $_UE_NOGCS then
			phlanget 2014 " No guest checks found" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $_SYSSTAT == $_UE_FATAL then
			phlanget 2015 " Error converting guest check files" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		if $_SYSSTAT != 0 then
			phlanget 2016 "POS Interface Failed" "" _TEMP_STA	
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
	### Copy current guest check data to today's file
		systemv _FILETODAY "syspdate -d $_SEDATE 2>/dev/null"
		system "cp $FMS_DATA/gcdata.dat $FMS_DATA/gcdata.$_FILETODAY 2>/dev/null"
	    @prtlbrptunp3
		systemv _FILEDAY "syspdate -d $_SEDATE 2>/dev/null"
		if $_TODAYSDATE == $_SEDATE   goto prtlbrptunp3a
		### Check if gcdata file exists
		access f "$FMS_DATA/gcdata.$_FILEDAY.Z"
		if $_SYSSTAT != 0 then
			phlanget 1674 "Guest Check data does not exist for" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_SDATE"
			return
		endif
		system "cat $FMS_DATA/gcdata.$_FILEDAY.Z|uncompress > $FMS_DATA/gcdata.$_FILEDAY 2>/dev/null"
	    @prtlbrptunp3a
		call CALLPRINTER "lbrptunp $_SEDATE"
		if $_SYSSTAT == 0 then
			system "rm -f $FMS_DATA/gcdata.$_FILEDAY"
			return
		endif
		system "rm -f $FMS_DATA/gcdata.$_FILEDAY"
		phlanget 2511 "Error running Unit Performance Report" "" _TEMP_SA
		dpywerr "$_TEMP_SA $_MS_CALLSUPP"
	.ITEM "%phlanget 2513 'i)  Cancel Printing' ''"
		call CANCELPRT
	.LEAVE

#########################################################################
### Basic Labor Planning Reports menu
.MENU LBRRPTSB "%phlanget 2034 'Labor Planning Reports' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2061 'a)  Staffing Guide' ''"
		phlanget 2062 "Enter Staffing Guide Date" "" _TEMP_STA
		ask 5 29 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0		return
		call GETPRINTER 7 38
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _RPTDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "ptcrewrq $_RPTDATE"
		if $_SYSSTAT != 0 then
			phlanget 1879 "No Staffing Guide for Requested Date" "" _TEMP_STA
			dpywerr "$_TEMP_STA ($_SDATE)..."
			return
		endif
	.ITEM "%phlanget 2063 'b)  Day-Part Labor Analysis' ''"
		set _WROW 6
		phlanget 1983 "Enter process date" "" _TEMP_STA
		ask $_WROW 35 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0		return
		call NEXTLINE 0
		call GETPRINTER $_WROW 40
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SDATE "$_MM/$_DD/$_YY"
		call CALLPRINTER "lbrptdlb $_SDATE"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2064 'c)  Daily Labor Report' ''"
		set _WROW 6
		phlanget 1983 "Enter process date" "" _TEMP_STA
		ask $_WROW 35 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SDATE "$_MM/$_DD/$_YY"
		call GETPRINTER 9 35
                if $_SYSSTAT != 0	return
		phlanget 1985 "********* Report is Being Processed ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_PATIENT *********" 
		if $_PRINTER == 0 systemc "sysprntr -s lbrptlbr -d $_SDATE"
                set _OPT " "
		if $FMS_POSTYPE != NORAND set _OPT "-d"
	 	if $_PRINTER == 1 systemc "sysprntr -g lbrptlbr $_OPT $_SDATE"
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 2066 'd)  Daily CM&A Checklist' ''"
		call GETPRINTER 9 35
                if $_SYSSTAT != 0	return
		call CALLPRINTER "ptcmatsk -1"
		if $_SYSSTAT != 0 dpywerr "$_SYSERROR" "$_MS_CALLSUPP"
		return
	.ITEM "%phlanget 994 'e)  Scheduled Maintenance' ''"
		set _WROW 7
		phlanget 2044 "1)  All Tasks" "" _TEMP_STA
		phlanget 2045 "2)  All Incomplete Tasks " "" _TEMP_STB
		phlanget 2046 "3)  All Complete Tasks" "" _TEMP_STC
		ask $_WROW 45 _ANSWER menu 3 - 0 "" "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC"
		if $_SYSSTAT != 0		return
		call NEXTLINE $_ANSWER
		if $_ANSWER == 0		set _KEY "1"
      		if $_ANSWER == 1 		set _KEY "2"
      		if $_ANSWER == 2 		set _KEY "3"
		phlanget 2047 "  All Months " "" _TEMP_STA
		phlanget 2048 "  January    " "" _TEMP_STB
		phlanget 2049 "  February   " "" _TEMP_STC
		phlanget 2050 "  March      " "" _TEMP_STD 
		phlanget 2051 "  April      " "" _TEMP_STE
		phlanget 2052 "  May        " "" _TEMP_STF
		phlanget 2053 "  June       " "" _TEMP_STG
		phlanget 2054 "  July       " "" _TEMP_STH
		phlanget 2055 "  August     " "" _TEMP_STI
		phlanget 2056 "  September  " "" _TEMP_STJ
		phlanget 2057 "  October    " "" _TEMP_STK
		phlanget 2058 "  November   " "" _TEMP_STL
		phlanget 2059 "  December   " "" _TEMP_STM
		ask 7 26 _ANSWER menu 13 - 0 "" \
		"$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC" "$_TEMP_STD" \
		"$_TEMP_STE" "$_TEMP_STF" "$_TEMP_STG" "$_TEMP_STH" \
		"$_TEMP_STI" "$_TEMP_STJ" "$_TEMP_STK" "$_TEMP_STL" \
		"$_TEMP_STM"
		if $_SYSSTAT != 0		return
		set _MONTH $_ANSWER
		call GETPRINTER $_WROW 43
                if $_SYSSTAT != 0		return
		call CALLPRINTER "lbrptsm $_KEY $_MONTH"
		if $_SYSSTAT != 0 then
			phlanget 2060 "Unable To Print Scheduled Maintenance" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif	
		return
	.ITEM "%phlanget 1676 'f)  Unit Performance Report' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		set _WROW 8
		systemv _TODAYSDATE "syspdate -g 2>/dev/null"
		systemv SYSTIME "syspdate -t 2>/dev/null"
		substr CURHR 0,2 $SYSTIME
		if "$CURHR" < "04" then
			systemv _TODAYSDATE "syspdate -g -a-86400 2>/dev/null"
		endif
		phlanget 1869 "Enter date to report" "" _TEMP_STA
		call GETPROMPTDAY 0
		ask $_WROW 34 _SDATE date 8 "$_TEMP_STA [$_DATEFMT]:" $_PRMTDAY
		if $_SYSSTAT != 0		return
		systemv _YYMMDD "syspdate -k$_SDATE 2>/dev/null"
		call SPLITYYMMDD $_YYMMDD 
		set _SEDATE "$_MM/$_DD/$_YY"
		call NEXTLINE 0
		call GETPRINTER $_WROW 43
		if $_SYSSTAT != 0		return
		phlanget 1673 "   ... Unit Performance Being Loaded ..." "" _TEMP_STA
		dpywmsg  "$_TEMP_STA $_MS_PATIENT"
		if $_TODAYSDATE != $_SEDATE   goto prtlbrptunp4
		system "syspos getgc 2>/dev/null"
		dpywclr
		if $_SYSSTAT == $_UE_WARN then
			phlanget 2013 " POS Order file is empty" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $_SYSSTAT == $_UE_NOGCS then
			phlanget 2014 " No guest checks found" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $_SYSSTAT == $_UE_FATAL then
			phlanget 2015 " Error converting guest check files" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		if $_SYSSTAT != 0 then
			phlanget 2016 "POS Interface Failed" "" _TEMP_STA	
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
	### Copy current guest check data to today's file
		systemv _FILETODAY "syspdate -d $_SEDATE 2>/dev/null"
		system "cp $FMS_DATA/gcdata.dat $FMS_DATA/gcdata.$_FILETODAY 2>/dev/null"
	    @prtlbrptunp4
		systemv _FILEDAY "syspdate -d $_SEDATE 2>/dev/null"
		if $_TODAYSDATE == $_SEDATE   goto prtlbrptunp4a
		### Check if gcdata file exists
		access f "$FMS_DATA/gcdata.$_FILEDAY.Z"
		if $_SYSSTAT != 0 then
			phlanget 1674 "Guest Check data does not exist for" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_SDATE"
			return
		endif
		system "cat $FMS_DATA/gcdata.$_FILEDAY.Z|uncompress > $FMS_DATA/gcdata.$_FILEDAY 2>/dev/null"
	    @prtlbrptunp4a
		call CALLPRINTER "lbrptunp $_SEDATE"
		if $_SYSSTAT == 0 then
			system "rm -f $FMS_DATA/gcdata.$_FILEDAY"
			return
		endif
		system "rm -f $FMS_DATA/gcdata.$_FILEDAY"
		phlanget 2511 "Error running Unit Performance Report" "" _TEMP_SA
		dpywerr "$_TEMP_SA $_MS_CALLSUPP"
	.ITEM "%phlanget 2005 'g)  Cancel Printing' ''"
		call CANCELPRT
	.LEAVE

#########################################################################
### F M S   A D M I N I S T R A T I O N   M E N U   D E F I N I T I O N S
#########################################################################

### FMS Administration menu
.MENU FMSADMIN "%phlanget 176 'FMS Administration' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2067 'a)  Store Information Setup' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	return
		call SAFECMDC "syssetup" "sysparm.dat"
		if $_SYSSTAT != 0 then
		   phlanget 2068 "Unable to Update Open/Close Times" "" _TEMP_STA
		   dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		endif
		call STORETYPE
	.ITEM "%phlanget 2069 'b)  Update Overtime Limits' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	return
		phlanget 2070 "1)  Update Daily Limit " "" _TEMP_STA
		phlanget 2071 "2)  Update Weekly Limit" "" _TEMP_STB
		ask 10 25 _ANSWER menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
		if $_SYSSTAT == -1	return
		if $_ANSWER == 0	goto daily
		if $_ANSWER == 1	goto weekly
	    @daily
		systemv _LIMIT \
			"sysparm -p ot_daily 2>/dev/null|sed 's/\\..*\$//'"
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSPARMACC" "$_MS_CALLSUPP"
			return
		endif
		phlanget 2072 "Daily OT Limit?" "" _TEMP_STA
		ask 10 20 _NEWLIMIT integer 3 "$_TEMP_STA " $_LIMIT
		if $_SYSSTAT != 0		return
		if $_NEWLIMIT == $_LIMIT	return
		set _LIMIT $_NEWLIMIT
		call SAFECMD "sysparm -c ot_daily $_LIMIT >/dev/null 2>&1" \
			     "sysparm.dat"
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSPARMACC" "$_MS_CALLSUPP"
			return
		endif
		call SAFECMD "sysparm -c ot_weekly 0 >/dev/null 2>&1" \
			     "sysparm.dat"
		return
	    @weekly
		systemv _LIMIT \
			"sysparm -p ot_weekly 2>/dev/null|sed 's/\\..*\$//'"
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSPARMACC" "$_MS_CALLSUPP"
			return
		endif
		phlanget 2073 "Weekly OT Limit?" "" _TEMP_STA
		ask 10 20 _NEWLIMIT integer 3 "$_TEMP_STA " $_LIMIT
		if $_SYSSTAT != 0		return
		if $_NEWLIMIT == $_LIMIT	return
		set _LIMIT $_NEWLIMIT
		call SAFECMD "sysparm -c ot_weekly $_LIMIT >/dev/null 2>&1" \
			     "sysparm.dat"
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSPARMACC" "$_MS_CALLSUPP"
			return
		endif
		call SAFECMD "sysparm -c ot_daily 0 >/dev/null 2>&1" \
			     "sysparm.dat"
	.ITEM "%phlanget 2074 'c)  Change System Date and Time' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		phlanget 2075 "                      NOTICE" "" _TEMP_STA
		phlanget 2076 "     All employees MUST be clocked out before" "" _TEMP_STB
		phlanget 2077 "         you change the date and/or time." "" _TEMP_STC
		dpywmsg "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC"
		phlanget 2078 "Are all employees clocked out [Y/N]?" "" _TEMP_STA
		phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
		phlanget 1316 "N" "No" _TEMP_NO
		ask 13 12 _ANSWER boolean 1 "$_TEMP_STA " "$_TEMP_NO"
		dpyxclr
		if $_SYSSTAT == -1	return
		if $_ANSWER == $_TEMP_NO	return
		poplast
		access f $FMS_DATA/.missgc
		if $_SYSSTAT != 0 then
 			system "echo `sysflag -p last_date_proc` \
				> $FMS_DATA/.missgc 2>/dev/null"
		endif
		systemc "sysdate"
		if $_SYSSTAT == $_UE_FATAL then
			phlanget 2079 "Error Changing Date and Time" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		if $_SYSSTAT == $_UE_WARN then
			phlanget 2080 "  .... The date and time were NOT Changed ...." "" _TEMP_STA
		 	phlanget 2081 "       Press <Enter> to continue..." "" _TEMP_STB
			dpywmsg "$_TEMP_STA" "$_TEMP_STB"
			pause	
			dpyxclr
			return
		endif
		if $FMS_POSTYPE == SUS	return
		phlanget 2082 "Setting POS Date and Time" "" _TEMP_STA
		dpywmsg "$_TEMP_STA -- $_MS_WAIT"
		sleep 2
		system "syspos -i syncdate >/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 2083 "Error Setting POS Date and Time" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			return
		endif
		dpyxclr
	.ITEM "%phlanget 2084 'd)  Change Area Manager Password' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call CHKACCESS 2
		if $_SYSSTAT != 0	return
		call CHGPASSWD AM
	.ITEM "%phlanget 2085 'e)  Change QC Manager Password' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		call CHKACCESS 3
		if $_SYSSTAT != 0	return
		call CHGPASSWD QCM
 	.ITEM "%phlanget 2086 'f)  Missing Day Recovery' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		access f $FMS/bin/sysrecov
		if $_SYSSTAT != 0	then
			phlanget 2087 "Option currently not available" "" _TEMP_STA
			phlanget 2088 "for Recovery Procedures." "" _TEMP_STB
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP $_TEMP_STB"
			return
		endif
 		call CHKACCESS 0 1 2 3 5
 		if $_SYSSTAT != 0	return
		phlanget 2089 "... Loading Missing Day Recovery Program ......." "" _TEMP_STA
		dpywmsg "$_TEMP_STA"
		call RSLOCK "sysrecov" 
 		if $_SYSSTAT != 0	return
		### mazd
 		call SAFECMDC "sysrecov" "" "" "sysrecov"
		call RSUNLOCK "sysrecov" 
 	.ITEM "%phlanget 2090 'g)  Touch Screen Alignment' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		access f $FMS/bin/sysautcab
		if $_SYSSTAT != 0	then
			phlanget 2087 "Option currently not available" "" _TEMP_STA
			phlanget 2091 "for Alignment Procedures." "" _TEMP_STB
			return
		endif
 		call CHKACCESS 0 1 2 3 5
 		if $_SYSSTAT != 0	return

		phlanget 2092 "... Loading Touch Screen Alignment Program ....." "" _TEMP_STA
		dpywmsg "$_TEMP_STA"
		call SAFECMDC "sysautcab"
	.ITEM "%phlanget 2093 'h)  Home Office Support' ''"
		call CHKTRAINACCESS
		if $_SYSSTAT != 0	return
		menu HOMESUPP
	.ITEM "%phlanget 2094 'i)  Cancel Printing of Reports' ''"
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	goto fmsadmin
		call CANCELPRT
	.ITEM "%phlanget 2095 'j)  Change FMS Application Levels' ''"
		if $FMS_TRAIN == Y 	goto calslevel
		call CHKACCESS 2
		if $_SYSSTAT != 0	return
	    @calslevel
		call SAFECMDC "syslevel" 
	.ITEM "%phlanget 2653 'k)  Maintain Inventory Calendar' ''"
		call RSLOCK "invmgmt"
		if $_SYSSTAT != 0	return

		phlanget 1038 "Inventory" "" _TEMP_STA
		### mazd
		call SAFECMDC "syscaldr invcaldr.txt $_TEMP_STA" "invcaldr.txt" "" "invmgmt"
		if $_SYSSTAT != 0 then
			phlanget 2654 "Unable to Update Inventory Calendar File" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_MS_CALLSUPP"
		endif
		call RSUNLOCK "invmgmt"
	.ITEM "%phlanget 2655 'l)  Print Inventory Calendar' ''"
		unset _YEAR_OPT 
		phlanget 2656 "Enter Year (use 9999 for all years):" "" _TEMP_STA
		systemv _YYMMDD "syspdate -k$_SYSDATE 2>/dev/null"
		substr _YYYY 0,2 $_YYMMDD
		if $_YYYY < 70	 set _YYYY "20$_YYYY"
		if $_YYYY > 69	 set _YYYY "19$_YYYY"
		ask 16 24 _YYYY integer 4 "$_TEMP_STA " $_YYYY
		if $_SYSSTAT != 0		return
		if $_YYYY != 9999 set _YEAR_OPT "-y$_YYYY"
		call GETPRINTER 18 24
                if $_SYSSTAT != 0		return
		phlanget 2657 "Inventory_Calendar" "" _TEMP_STA
		call CALLPRINTER "syscalpr $_YEAR_OPT invcaldr.txt $_TEMP_STA"
		if $_SYSSTAT != 0 then
			phlanget 2658 "Unable to Print Inventory Calendar File" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_MS_CALLSUPP"
		endif
	.ITEM "%phlanget 2659 'm)  Maintain Timekeeping Calendar' ''"
		call RSLOCK "payroll"
		if $_SYSSTAT != 0	return
		phlanget 1925 "Timekeeping" "" _TEMP_STA
		### mazd
		call SAFECMDC "syscaldr tkcaldr.txt '$_TEMP_STA'" "tkcaldr.txt" "" "payroll"
		if $_SYSSTAT != 0 then
			phlanget 2660 "Unable to Update Timekeeping Calendar File" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_MS_CALLSUPP"
		endif
		call RSUNLOCK "payroll"
	.ITEM "%phlanget 2661 'n)  Print Timekeeping Calendar' ''"
		unset _YEAR_OPT 
		phlanget 2656 "Enter Year (use 9999 for all years):" "" _TEMP_STA
		systemv _YYMMDD "syspdate -k$_SYSDATE 2>/dev/null"
		substr _YYYY 0,2 $_YYMMDD
		if $_YYYY < 70	 set _YYYY "20$_YYYY"
		if $_YYYY > 69	 set _YYYY "19$_YYYY"
		ask 18 2 _YYYY integer 4 "$_TEMP_STA " $_YYYY
		if $_SYSSTAT != 0		return
		if $_YYYY != 9999 set _YEAR_OPT "-y$_YYYY"
		call GETPRINTER 18 46
                if $_SYSSTAT != 0		return
		phlanget 2662 "Timekeeping_Calendar" "" _TEMP_STA
		call CALLPRINTER "syscalpr $_YEAR_OPT tkcaldr.txt $_TEMP_STA"
		if $_SYSSTAT != 0 then
			phlanget 2663 "Unable to Print Timekeeping Calendar File" "" _TEMP_STA
			dpywerr "$_TEMP_STA $_MS_CALLSUPP"
		endif
	.LEAVE

#########################################################################
### H O M E   O F F I C E   M E N U   D E F I N I T I O N S
#########################################################################

### Home Office Support menu
.MENU HOMESUPP "%phlanget 2096 'Home Office Support' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2097 'a)  Reset TCOM Modem Port(s)' ''"
		if $FMS_TRAIN == Y then
			phlanget 1954 "Option Not Available While in Practice Mode" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $FMS_POSTYPE != NORAND	goto reset
		systemv _TCOM "sysparm -p tcom_port"
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSPARMACC" "$_MS_CALLSUPP"
			return
		endif
		if $_TCOM == 0 then
		       	phlanget 2098 "This system does not have a TCOM (modem) device" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
		      	return
		endif
	    @reset
		phlanget 2099 "Resetting the TCOM modem port(s)" "" _TEMP_STA
		dpywmsg "$_TEMP_STA"
		### Turn off the modem gettys in the inittab file
		system "$FMS/bin/syssettc -f OFF >/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 2100 "Error disabling the TCOM port(s)" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		system "$FMS/bin/syssettc ON >/dev/null 2>&1"
		if $_SYSSTAT != 0 then
			phlanget 2101 "Error enabling the TCOM port(s)" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		phlanget 2102 "Successfully reset the TCOM modem port(s)" "" _TEMP_STA
		dpywmsg "$_TEMP_STA"
		dpymsg $_MS_ENTER
		pause
		dpyxclr
	.ITEM "%phlanget 2103 'b)  Build a Norand Employee File From FMS' ''"
		if $FMS_TRAIN == Y then
			phlanget 1954 "Option Not Available While in Practice Mode" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		if $FMS_POSTYPE == SUS then
		phlanget 2104 "Build Norand Employee File is not allowed on SUS systems" "" _TEMP_STA
			dpywmsg -b "$_TEMP_STA"
			dpymsg "$_MS_ENTER"
			pause
			dpyxclr
			return
		endif
		phlanget 1891 "Are you sure" "" _TEMP_STA
		phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
		ask 10 26 _ANSWER boolean 1 "$_TEMP_STA $_TEMP_YESNO ?"
		if $_SYSSTAT != 0		return
		if $_ANSWER == $_TEMP_NO	return
		poplast
		phlanget 2105 "This will reboot the Norand!  Are you still sure """ _TEMP_STA 
		ask 11 9 _ANSWER boolean 1 "$_TEMP_STA $_TEMP_YESNO ?"
		if $_SYSSTAT != 0		return
		if $_ANSWER == $_TEMP_NO	return
		poplast
		call NORCHECK U
		if $_SYSSTAT == -1		return
		call RSLOCK "humanrsc"
		if $_SYSSTAT != 0		return
		phlanget 2106 " ... Rebuilding Norand Employee File ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		systemv _COUNT "norutil -b bldempl"
		if $_SYSSTAT != 0 then
			phlanget 2107 "Error Rebuilding Norand Employee File" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			call RSUNLOCK "humanrsc"
			return
		endif
		phlanget 2108 " ... Rebooting the Norand System ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		system "norutil -b cpboot"
		if $_SYSSTAT != 0 then
			phlanget 2109 "Error Rebooting the Norand System" "" _TEMP_STA
			dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
			call RSUNLOCK "humanrsc" 
			return
		endif
		phlanget 2110 "    Norand Employee File Successfully Rebuilt" "" _TEMP_STA
		phlanget 2111 "    Please Wait For the Norand to Completely Reboot." "" _TEMP_STB
		phlanget 2112 "    If Problems," "" _TEMP_STC
		dpywmsg "$_TEMP_STA" "    ($_COUNT)" "$_TEMP_STB" \
			"$_TEMP_STC $_MS_CALLSUPP."
		dpymsg -b "** $_MS_ENTER **"
		pause
		call RSUNLOCK "humanrsc"
		refresh
	.ITEM "%phlanget 2113 'c)  Initial Configuration Setup' ''"
		system "sysconf"
		set _SYSCONF $_SYSSTAT
		systemv FMS_STORE "sysstor -p store_number"
		systemv NORADDR "sysparm -p noraddr 2>/dev/null"
		if "$NORADDR" == ""	set NORADDR 00
		set MENU_VERS	"$SAVE_VERS ($FMS_STORE)"
		refresh
		if $_SYSCONF != $_UE_PREP 	return
		bell
		phlanget 2114 "NOTICE:" "" _TEMP_STA
		phlanget 2115 "  You have changed the FMS mode from TRAINING to PRODUCTION." "" _TEMP_STB
		phlanget 2116 "   Answer Y if you want to reinitialize the FMS databases." "" _TEMP_STC
		phlanget 2117 "   This should ONLY be done on a new store installation!!!!" "" _TEMP_STD
		dpywmsg "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC" "$_TEMP_STD"
		phlanget 2118 "Is this an initial installation" "" _TEMP_STA
		phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
		phlanget 1316 "N" "No" _TEMP_NO
		phlanget 2119 "Y" "Yes" _TEMP_YES
		ask 11 20 _SURE boolean 1 "$_TEMP_STA $_TEMP_YESNO? " $_TEMP_NO
		dpywclr
		if $_SYSSTAT == -1		return
		if $_SURE != $_TEMP_YES 	return
		poplast
		phlanget 2120 " Reinitializing FMS databases ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		system "sysclrdb -c ALL >/dev/null 2>&1"
		dpywclr
		if $_SYSSTAT == 0		return
		phlanget 2121 " Error Reinitializing FMS databases!" "" _TEMP_STA
		phlanget 2122 " Please check the logfile for detailed information!" "" _TEMP_STB
		dpywerr "$_TEMP_STA" "$_TEMP_STB"
	.ITEM "%phlanget 2123 'd)  Reboot the DP-Tek Interface Board' ''"
 		if $FMS_POSTYPE == SUS then
 		     phlanget 2124 " Reboot the DP-TEK Board is not allowed on SUS Systems" "" _TEMP_STA
 		     dpywmsg "$_TEMP_STA"
 		     dpymsg "$_MS_ENTER"
 		     pause
 		     dpyxclr
 		     return
 		endif
endnew
		call NORCHECK S
		if $_SYSSTAT == -1		return
		phlanget 2125 " ... Rebooting DP-Tek Interface ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA" "$_MS_WAIT"
		system "norutil dpboot $NORADDR"
		dpyxclr
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR"
	.ITEM "%phlanget 2126 'e)  Home Office Use Only' ''"
		call CHKACCESS 4 5
		if $_SYSSTAT != 0 		return
		menu HOMEUTIL

	.ITEM "f)  Consulta de Acceso"
	    system  "showpwd.s -v 2> /tmp/showpwd.log"
		system "$FMS/etc/sysfkeys FMS"
		refresh

### Home Office Utilities menu
.MENU HOMEUTIL "%phlanget 2127 'Home Office Utilities' ''"
	.ENTER
		call CHKNOTIFY
		set SAVE_VERS	"$MENU_VERS"
		set MENU_VERS	"$MENU_VERS ($FMS_STORE)"
	.ITEM "%phlanget 2128 'a)  View the System Logfile' ''"
		call VIEWLOG
	.ITEM "%phlanget 2129 'b)  Set Missing Day Flag' ''"
		call RSLOCK "reconstc"
		if $_SYSSTAT != 0	return
		call SAFECMDC "syssetmd" "lbrprfrm.dat"
		call RSUNLOCK "reconstc" 
	.ITEM "%phlanget 2130 'c)  Reconstruct a Day' ''"
		call CHKACCESS 0 1 2 3 5
		if $_SYSSTAT != 0	return
		call RSLOCK "reconstc"
		if $_SYSSTAT != 0	return
		call SAFECMDC "reconstc" "lbrprfrm.dat" $_UE_PREP
		call RSUNLOCK "reconstc" 
	.ITEM "%phlanget 2131 'd)  Admin Utilities' ''"
		menu ADMUTIL
	.ITEM "%phlanget 2132 'e)  Backup Utilities' ''"
		menu BACKUTIL
	.ITEM "%phlanget 2133 'f)  Norand Utilities' ''"
		if $FMS_POSTYPE == SUS then
			phlanget 2134 "The NORAND Utilities are not allowed on SUS systems" "" _TEMP_STA
			dpywmsg "$_TEMP_STA"
			dpymsg "$_MS_ENTER"
			pause
			dpyxclr
			return
		endif
		menu NORUTIL
	.ITEM "%phlanget 2135 'g)  Patch Utilities' ''"
		menu PATUTIL
	.ITEM "%phlanget 2136 'h)  Unix Shell' ''"
		call SHELL 9
	.LEAVE
		set MENU_VERS	"$SAVE_VERS"
		unset SAVE_VERS

.MENU ADMUTIL "%phlanget 2137 'Admin Utilities' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2138 'a)  Enable/Disable Task Scheduler Daemon' ''"
		phlanget 1891 "Are you sure" "" _TEMP_STA
		phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
		phlanget 2119 "Y" "Yes" _TEMP_YES
		ask 10 26 _SURE boolean 1 "$_TEMP_STA $_TEMP_YESNO ?" $_TEMP_YES
		if $_SYSSTAT != 0			return
		if $_SURE != $_TEMP_YES			return
		poplast
		phlanget 2139 "0 - Enable the Scheduler Daemon" "" _TEMP_STA
		phlanget 2140 "1 - Disable the Scheduler Daemon" "" _TEMP_STB
		ask 10 22 _CHECK menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
		if $_SYSSTAT != 0			return
		poplast
		if $_CHECK == 0 goto enable
		if $_CHECK == 1 goto disable
	    @enable
		phlanget 2141 " ... Enabling Scheduler Daemon ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		system "setinit st=respawn >/dev/null 2>&1"
		dpywclr
		if $_SYSSTAT == 0			return
		phlanget 2142 "Error Enabling Scheduler Daemon !!!" "" _TEMP_STA
		dpywerr "$_TEMP_STA"
		return
	    @disable
		phlanget 2143 " ... Disabling Scheduler Daemon ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		system "setinit st=off >/dev/null 2>&1"
		dpywclr
		if $_SYSSTAT == 0			return
		phlanget 2144 "Error Disabling Scheduler Daemon !!!" "" _TEMP_STA
		dpywerr "$_TEMP_STA"
	.ITEM "%phlanget 2145 'b)  Display UNIX System Status' ''"
		phlanget 2146 " ... Collecting System Status ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		systemc "$FMS/etc/sysstat | sysviewf -n none"
	.ITEM "%phlanget 2147 'c)  Display FMS Database File Info' ''"
		systemc "sysflist | sysviewf -n none"
	.ITEM "%phlanget 2148 'd)  Display FMS Database Text Files (.TXT)' ''"
		phlanget 2149 "No Database Text Files Found !!!" "" _TEMP_STA
		call VIEWFILES "*.txt" "$_TEMP_STA"
	.ITEM "%phlanget 2150 'e)  Restart the FMS Application' ''"
		phlanget 2151 "        This procedure will restart the FMS Application" "" _TEMP_STA
		phlanget 2152 "          by reinitializing the run-time environment." "" _TEMP_STB
		dpywmsg "$_TEMP_STA" "$_TEMP_STB"
		phlanget 1891 "Are you sure" "" _TEMP_STA
		phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
		ask 14 26 _SURE boolean 1 "$_TEMP_STA $_TEMP_YESNO ?"
		dpywclr
		if $_SYSSTAT != 0			return
		poplast
		phlanget 2119 "Y" "Yes" _TEMP_YES
		if $_SURE != $_TEMP_YES		return
		phlanget 2153 " FMS Restart in Progress ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		system "sushell /usr/fms/etc/sysuil -r /usr/fms/lib/sysuifb.cf"
		sleep 2
		logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
		exit 1
	.ITEM "%phlanget 2154 'f)  Perform Diagnostic Check of FMS System' ''"
		phlanget 2155 "Are you sure [Y/N]?" "" _TEMP_STA
		ask 15 26 _SURE boolean 1 "$_TEMP_STA "
		if $_SYSSTAT != 0			return
		if $_SURE != Y				return
		poplast
	    	phlanget 2156 "   This program checks the FMS system for inconsistencies or" "" _TEMP_STA
	    	phlanget 2157 "   errors.  Specify whether or not to check for errors only, or" "" _TEMP_STB
	    	phlanget 2158 "   to check and attempt to correct errors found." "" _TEMP_STC
		dpywmsg "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC"
		phlanget 2159 "0 - Check For Errors Only" "" _TEMP_STA
		phlanget 2160 "1 - Check and Correct Errors" "" _TEMP_STB
		ask 10 24 _CHECK menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
		dpywclr
		if $_SYSSTAT != 0		return
		goto check$_CHECK
	    @check0
		phlanget 2161 " Checking System ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		systemc "$FMS/etc/syschk -l | sysviewf -n none"
		return
	    @check1
		phlanget 2162 " Checking/Correcting System ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		systemc "$FMS/etc/syschk -l y | sysviewf -n none"
	.ITEM "%phlanget 2163 'g)  Reboot/Halt the System' ''"
		phlanget 1891 "Are you sure" "" _TEMP_STA
		phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
		phlanget 1316 "N" "No" _TEMP_NO
		phlanget 2119 "Y" "Yes" _TEMP_YES
		ask 10 26 _SURE boolean 1 "$_TEMP_STA $_TEMP_YESNO? " $_TEMP_NO
		if $_SYSSTAT != 0			return
		if $_SURE != $_TEMP_YES			return
		poplast
		phlanget 2164 "     Specify whether the system should be rebooted or halted" "" _TEMP_STA
		phlanget 2165 "                after the shutdown has completed!" "" _TEMP_STB
		dpywmsg "$_TEMP_STA" "$_TEMP_STB"
		phlanget 2166 "0 - Reboot After Shutdown" "" _TEMP_STA
		phlanget 2167 "1 - Halt After Shutdown" "" _TEMP_STB
		ask 10 24 _KEY menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
		dpywclr
		if $_SYSSTAT != 0			return
		goto shut$_KEY -
	    @shut0
		system "ansi color=hi_white,black clear 2>/dev/null"
		system "echo ...... Rebooting The System ...... $_MS_WAIT"
		system "sync;sync;sushell /etc/init 6"
		sleep 10
		if $_SYSSTAT == 0 then
			logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
			exit
		endif
		system "ansi reset"
		refresh
		phlanget 2168 "Reboot Failed" "" _TEMP_STA
		dpywerr -l "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	    @shut1
		system "ansi color=hi_white,black clear 2>/dev/null"
		system "echo ...... Halting The System ...... $_MS_WAIT"
		system "sync;sync;sushell /etc/init 0"
		sleep 10
		if $_SYSSTAT == 0 then
			logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
			exit
		endif
		system "ansi reset"
		refresh
		phlanget 2169 "Halt Failed" "" _TEMP_STA
		dpywerr -l "$_TEMP_STA" "$_MS_CALLSUPP"
	.ITEM "%phlanget 2170 'h)  UNIX Shell' ''"
		call SHELL 14

.MENU BACKUTIL "%phlanget 2171 'Backup Utilities' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2172 'a)  Enable Automatic Disk Backups' ''"
		systemv _ENABLED "sysparm -p bkup_enabled 2>/dev/null"
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSPARMACC" "$_MS_CALLSUPP"
			return
		endif
		if "$_ENABLED" == 1 then
			phlanget 2173 "      Automatic Disk Backups Are Already Enabled!" "" _TEMP_STA
			dpywmsg "$_TEMP_STA"
			dpymsg -b "** $_MS_ENTER **"
			pause
			dpyxclr
			return
		endif
		call SAFECMD "sysparm -c bkup_enabled 1 2>/dev/null" \
			     "sysparm.dat"
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSPARMCHG" "$_MS_CALLSUPP"
			return
		endif
		phlanget 2174 "      Automatic Disk Backups Have Been Enabled!" "" _TEMP_STA
		dpywmsg "$_TEMP_STA"
		dpymsg -b "** $_MS_ENTER **"
		pause
		dpyxclr
	.ITEM "%phlanget 2175 'b)  Disable Automatic Disk Backups' ''"
		systemv _ENABLED "sysparm -p bkup_enabled 2>/dev/null"
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSPARMACC" "$_MS_CALLSUPP"
			return
		endif
		if "$_ENABLED" != 1 then
			phlanget 2176 "      Automatic Disk Backups Are Already Disabled!" "" _TEMP_STA
			dpywmsg "$_TEMP_STA"
			dpymsg -b "** $_MS_ENTER **"
			pause
			dpyxclr
			return
		endif
		call SAFECMD "sysparm -c bkup_enabled 0 2>/dev/null" sysparm.dat
		if $_SYSSTAT != 0 then
			dpywerr "$_MS_SYSPARMCHG" "$_MS_CALLSUPP"
			return
		endif
		phlanget 2177 "      Automatic Disk Backups Have Been Disabled!" "" _TEMP_STA
		dpywmsg "$_TEMP_STA"
		dpymsg -b "** $_MS_ENTER **"
		pause
		dpyxclr
	.ITEM "%phlanget 2178 'c)  UNIX Shell' ''"
		call SHELL 8
	
.MENU NORUTIL "%phlanget 2179 'Norand Utilities' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2180 'a)  Reboot the DP-Tek Interface Board' ''"
		call NORCHECK S
		if $_SYSSTAT == -1		return
		phlanget 2125 " ... Rebooting DP-Tek Interface ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		system "norutil dpboot $NORADDR"
		dpyxclr
		if $_SYSSTAT == 0		return
		dpywerr "$_SYSERROR"
	.ITEM "%phlanget 2181 'b)  Ping the Norand/CP (Test Physical Connectivity)' ''"
		call NORCHECK S
		if $_SYSSTAT == -1		return
		phlanget 2182 " ... Pinging Norand/CP ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		system "norutil cpping"
		if $_SYSSTAT != 0	phlanget 2183 "Norand Network is NOT Alive!" "" _MSG
		if $_SYSSTAT == 0	phlanget 2184 "Norand Network is Alive!" "" _MSG
		dpywmsg "$_MSG"
		dpymsg -b "** $_MS_ENTER **"
		pause
		dpyxclr
	.ITEM "%phlanget 2185 'c)  Poll the Norand/CP (Test Logical Connectivity)' ''"
		call NORCHECK S
		if $_SYSSTAT == -1		return
		phlanget 2186 " ... Polling Norand/CP ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		system "norutil -b cppoll"
		if $_SYSSTAT != 0	phlanget 2187 "Norand CP is NOT Alive!" "" _MSG
		if $_SYSSTAT == 0	phlanget 2188 "Norand CP is Alive!" "" _MSG
		dpywmsg "$_MSG"
		dpymsg -b "** $_MS_ENTER **"
		pause
		dpyxclr
	.ITEM "%phlanget 2189 'd)  Check Norand Employee File for Duplicate SSN\'s' ''"
		call NORCHECK S
		if $_SYSSTAT == -1		return
		phlanget 2186 " ... Polling Norand/CP ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_WAIT"
		systemc "syspos -i dupssn"
		if $_SYSSTAT == 0 then
			phlanget 2190 "No Duplicate SSN's Found!!!" "" _TEMP_STA
			dpywmsg "$_TEMP_STA"
			dpymsg -b "** $_MS_ENTER **"
			pause
			dpyxclr
			return
		endif
		dpywerr "$_SYSERROR"
	.ITEM "%phlanget 2191 'e)  Display POS and FMS UNIX Clocks' ''"
		call NORCHECK S
		if $_SYSSTAT == -1		return
		systemv _NORDATE "norutil -b cpdate"
		if $_SYSSTAT != 0 then
			dpywerr "$_SYSERROR"
			return
		endif
		phlanget 2192 " POS/FMS Date-Time" "" _TEMP_STA
		dpywmsg "$_TEMP_STA" "     $_NORDATE"
		dpymsg -b "** $_MS_ENTER **"
		pause
		dpyxclr
	.ITEM "%phlanget 2193 'f)  Synchronize Norand and FMS UNIX Clocks' ''"
		call NORCHECK S
		if $_SYSSTAT == -1		return
		phlanget 1891 "Are you sure" "" _TEMP_STA
		phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
		phlanget 1316 "N" "No" _TEMP_NO
		ask 10 30 _SURE boolean 1 "$_TEMP_STA $_TEMP_YESNO? "
		if $_SYSSTAT != 0		return
		if $_SURE == $_TEMP_NO		return
		phlanget 2194 " ... Synchronizing Clocks ..." "" _TEMP_STA
		dpywmsg " $_TEMP_STA $_MS_WAIT"
		system "norutil -b cpdate -s"
		dpywclr
		if $_SYSSTAT != 0 then
			dpywerr "$_SYSERROR"
			return
		endif
		phlanget 2195 "Clock synchronized successfully" "" _TEMP_STA
		dpywmsg "$_TEMP_STA"
		dpymsg -b "** $_MS_ENTER **"
		pause
		dpyxclr
	.ITEM "%phlanget 2196 'g)  Modify the Norand Sysinfo TKFLAG Value' ''"
		call NORCHECK S
		if $_SYSSTAT == -1		return
		phlanget 1891 "Are you sure" "" _TEMP_STA
		phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
		phlanget 1316 "N" "No" _TEMP_NO
		ask 10 26 _SURE boolean 1 "$_TEMP_STA $_TEMP_YESNO? "
		if $_SYSSTAT != 0		return
		if $_SURE == $_TEMP_NO		return
		phlanget 2197 "Getting Current Value of Norand Sysinfo TKFLAG ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA"
		systemv _OLDVAL "norutil -b tkflag"
		if $_SYSSTAT != 0 then
			dpywerr "$_SYSERROR"
			return
		endif
		phlanget 2198 "     The Current Value of Sysinfo TKFLAG is $_OLDVAL" "" _TEMP_STA
		phlanget 2199 "       Select The New Value to be Assigned" "" _TEMP_STB
		dpywmsg "$_TEMP_STA" "$_TEMP_STB"
		phlanget 2200 "0 - Norand Updates Only" "" _TEMP_STA
		phlanget 2201 "1 - Norand and BOHP Updates" "" _TEMP_STB
		phlanget 2202 "2 - BOHP Updates Only" "" _TEMP_STC
		ask 10 30 _NEWVAL menu 3 - $_OLDVAL "" "$_TEMP_STA" "$_TEMP_STB"
			"$_TEMP_STC"
		dpywclr
		if $_SYSSTAT != 0		return
		if $_OLDVAL == $_NEWVAL		return

		phlanget 2203  "Setting New Value for Norand Sysinfo TKFLAG ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA"
		system "norutil tkflag $_NEWVAL"
		if $_SYSSTAT != 0 then
			dpywerr "$_SYSERROR"
			return
		endif
		dpywclr
	.ITEM "%phlanget 2170 'h)  UNIX Shell' ''"
		call SHELL 11

### Patch utilities menu.
.MENU PATUTIL "%phlanget 2204 'Patch Utilities' ''"
	.ENTER
		call CHKNOTIFY
	.ITEM "%phlanget 2205 'a)  List Available Patches' ''"
		set _SYSCMD "(cd $FMS/patch;lc p*.pat 2>/dev/null"
		set _SYSCMD "$_SYSCMD;[ \$? != 0 ] && echo NO PATCHES FOUND"
		set _SYSCMD "$_SYSCMD)|sed 's/.pat//g'|sysviewf -n none"
		systemc "$_SYSCMD"
	.ITEM "%phlanget 2206 'b)  View Patch Applied List' ''"
		access r $FMS/patch/APPLIED
		if $_SYSSTAT != 0 then
			phlanget 2207 "Applied patches file not yet available!" "" _TEMP_STA
			dpywerr "$_TEMP_STA"
			return
		endif
		systemc "sysviewf  -n none $FMS/patch/APPLIED"
	.ITEM "%phlanget 2208 'c)  View Patch History File' ''"
		access r $FMS/patch/HISTORY
		if $_SYSSTAT != 0 then
			dpywerr "History file not yet available!"
			return
		endif
		systemc "sysviewf -n none $FMS/patch/HISTORY"
	.ITEM "%phlanget 2209 'd)  Apply One or More Patches' ''"
	    	phlanget 2210 "   This procedure will apply patches to FMS."  "" _TEMP_STA
	    	phlanget 2211 "   You may either apply 1 patch or ALL unapplied patches." "" _TEMP_STB
		dpywmsg "$_TEMP_STA" "$_TEMP_STB"
		phlanget 2212 "1 - One Patch" "" _TEMP_STA
		phlanget 2213 "A - All Unapplied Patches" "" _TEMP_STB
		ask 10 25 _CHOICE menu 2 - 1  "" "$_TEMP_STA" "$_TEMP_STB"
		dpyxclr
		if $_SYSSTAT != 0		return
		poplast
		goto apply$_CHOICE
	    @apply0
	    phlanget 2214 "   Enter the name of the patch to be applied." "" _TEMP_STA
	    phlanget 2215 "   This name should be of the form PNNNNN (such as P00001)." "" _TEMP_STB
		dpywmsg "$_TEMP_STA" "$_TEMP_STB"
		phlanget 2216 "Patch Name:" "" _TEMP_STA
		ask 10 27 _PATCH string 8 "$_TEMP_STA " ""
		lowerc _PATCH
		dpyxclr
		if $_SYSSTAT != 0		return
		poplast
		access r "$FMS/patch/$_PATCH.pat"
		if $_SYSSTAT != 0 then	
			phlanget 2217 "  Patch" "" _TEMP_STA
			phlanget 2218 "is not available." "" _TEMP_STB
			phlanget 2219 "  Use option one to list available patches." "" _TEMP_STC
			dpywerr "$_TEMP_STA $_PATCH "$_TEMP_STB" "$_TEMP_STC"
			return
		endif
		phlanget 2220 "   Applying patch" "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_PATCH ... $_MS_PATIENT"
		system "sushell $FMS/etc/patapply $_PATCH 2>/dev/null"
		if $_SYSSTAT != 0 then
			phlanget 2221 "  Error applying patch" "" _TEMP_STA
			phlanget 2222 "  View log file for error codes" "" _TEMP_STB
			dpywerr "$_TEMP_STA" "$_TEMP_STB"
			return
		endif
		phlanget 2223 "   Patch" "" _TEMP_STA
		phlanget 2224 "Successfully Applied" "" _TEMP_STB
		dpywmsg "$_TEMP_STA $_PATCH $_TEMP_STB"
		dpymsg -b "** $_MS_ENTER **"
		pause
		dpyxclr
		return
	    @apply1
		phlanget 2225 "   Applying ALL patches ..." "" _TEMP_STA
		dpywmsg "$_TEMP_STA $_MS_PATIENT"
		system "sushell $FMS/etc/patapply ALL 2>/dev/null"
		if $_SYSSTAT != 0 then
			phlanget 2226 "  Error applying ALL patches." "" _TEMP_STA
			phlanget 2227 "  View log file for error codes." "" _TEMP_STB
			dpywerr "$_TEMP_STA" "$_TEMP_STB"
			return
		endif
		phlanget 2228 "Patches Successfully Applied" "" _TEMP_STA
		phlanget 2229 "  See log file for trace of activity." "" _TEMP_STA
		dwywmsg "$_TEMP_STA" "$_TEMP_STB"
		dpymsg -b "** $_MS_ENTER **"
		pause
		dpyxclr
		return
	.ITEM "%phlanget 2230 'e)  Load Patches From Floppy' ''"
	    phlanget 2231 "   This procedure will load patches from a floppy." "" _TEMP_STA
	    phlanget 2232 "   After loading, you MUST use option 4 to apply them." "" _TEMP_STB
		dpywmsg k "$_TEMP_STA" "$_TEMP_STB"
		phlanget 1891 "Are you sure" "" _TEMP_STA
		phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
		phlanget 2119 "Y" "Yes" _TEMP_YES
		ask 10 26 _SURE boolean 1 "$_TEMP_STA $_TEMP_YESNO? "
		dpywclr
		if $_SYSSTAT != 0		return
		if $_SURE != $_TEMP_YES		return
		poplast
		call DISKCLEAN
		if $_SYSSTAT != 0		return
		system "ansi color=hi_white,black clear"
		shell "$FMS/etc/patload"
		set _STATUS "$_SYSSTAT"
		system "ansi color=hi_white,black"
		system "echo '$_MS_ENTER ... \\c'"
		pause -b
		system "ansi reset clear"
		refresh
		if $_STATUS != 0 then

		phlanget 2233 "               The Patch Load Has FAILED !!!!!!" "" _TEMP_STA
		phlanget 2234 "     If you think that the diskette drive needs additional" "" _TEMP_STB
		phlanget 2235 "     cleaning, please rerun this procedure.  If you have" "" _TEMP_STC
		phlanget 2236 "     already tried more than once:" "" _TEMP_STD
			dpywmsg "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC" "$_TEMP_STD" "$_MS_CALLSUPP"
			dpymsg -b "** $_MS_ENTER **"
			pause
			dpyxclr
			return
		endif
		phlanget 2237 "       The Patch Load Was SUCCESSFUL!" "" _TEMP_STA
		phlanget 2238 "  Remove the diskette from the diskette drive." "" _TEMP_STB
		dpywmsg "$_TEMP_STA" "$_TEMP_STB"
		dpymsg -b "** $_MS_ENTER **"
		pause
		dpyxclr
	.ITEM "%phlanget 2239 'f)  UNIX Shell' ''"
		call SHELL 9

###UPDIDEAL
### Posts usage for todays date to be used for ideal usage and PCA reports
### Usage: call UPDIDEAL $_TODAYSDATE
.PROC UPDIDEAL
	if "$FMS_TRAIN" == "Y" then
		set _SYSSTAT 0
		return
	endif
	phlanget 2240 "Generating Ideal Usage ..." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_PATIENT"
	system "syspos GETGC 2>/dev/null"
	if $_SYSSTAT == 6 then
		set _SYSSTAT 0
		return
	endif
	system "invusage -d$_TODAYSDATE 2>/dev/null"
	if $_SYSSTAT != 0	return 

###PFSCHK
### Checks to ensure all PFS orders have been posted and displays the
### appropriate message
.PROC PFSCHK
	if $FMS_TRAIN == Y 	call PFSTRAINENV
	if $FMS_TRAIN != Y 	call PFSENVIRON
	set _UNRCVD ""
	systemv _UNRCVD "pfsunrcv 2>/dev/null"
	substr _CHECK 0,2 $_UNRCVD
	if $_CHECK == "No"	return
	dpywmsg	-b \
	" " \
	" " \
	" " \
	"      The following PFS Order has not been posted to inventory " \
	"                  $_UNRCVD                            " \
	" " \
	"      Please Access the PFS SourceLink System and POST this    " \
	"      order -OR- If the SourceLink System is unable to POST    " \
	"      this order ....... Please continue .......               "
	ask 8 10 _ANSWER boolean 1 \
	   " Do you want to continue without posting the order? " N
	if $_SYSSTAT == 0		poplast
	dpywclr
	if $_SYSSTAT != 0		return
	if $_ANSWER == N		return
	if $_ANSWER == Y then
		dpywclr
		ask 12 24 _ANSWER boolean 1 \
	   	" Are you sure? " N
	endif
	if $_SYSSTAT == 0		poplast
	dpywclr
	return

#########################################################################
### PFS Automated Order System Menu
.MENU PFSMGMT "%phlanget 2241 'PFS Automated Order System' ''"
	.ENTER
		call CHKNOTIFY
		systemv _YYMMDD "syspdate -k$_SYSDATE 2>/dev/null"
		substr _PFSYY 0,2 $_YYMMDD
		substr _PFSMM 2,2 $_YYMMDD
		substr _PFSDD 4,2 $_YYMMDD
		set _PFSDATE 19$_PFSYY$_PFSMM$_PFSDD
		access f "$PFSXTRP/confirm.txt"
		if $_SYSSTAT == 0 call PFSAPPLY
		access f "$PFSXTRP/itemupd.txt"
		if $_SYSSTAT == 0 call PFSAPPLY
		access f "$PFSXTRP/pfsmail.txt"
		if $_SYSSTAT == 0 call PFSAPPLY
		if "$FMS_TRAIN" != "Y" call PFSCLNUP
		access f "$PFSIFP/qoh.dat"
		if $_SYSSTAT == 0 call PFSLDFC
		access f "$PFSIFP/forecast.dat"
		if $_SYSSTAT == 0 call PFSLDFC
	.ITEM "%phlanget 2242 'a)  Order Entry and Maintenance' ''"
		dpywmsg " Loading PFS SourceLink ... $_MS_PATIENT"
 		system "invslqoh $FMS_STORE"
 		system "invsldmn $FMS_STORE"
		system "pfsorder F2.3 $_PFSDATE 10 $FMS_STORE"
		system "ansi reset"
		refresh
		return
	.ITEM "%phlanget 2243 'b)  PFS Delivery Receiving' ''"
		dpywmsg " Loading PFS SourceLink ... $_MS_PATIENT"
		system "pfsrcpt"
		system "ansi reset"
		refresh
		return
	.ITEM "%phlanget 2244 'c)  Display PFS Messages' ''"
		dpywmsg " Loading PFS SourceLink ... $_MS_PATIENT"
		system "pfsmail 0"
		system "ansi reset"
		refresh
		return
	.ITEM "%phlanget 2245 'd)  Item Maintenance' ''"
		set _WROW 8
 		ask $_WROW 30 _ANSWER menu 3 - 0 \
			" Item Maintenance " \
			"1)  Item Sequence" \
 			"2)  Item Attributes" \
 			"3)  Maintain Safety Stock & Distributor"
		if $_SYSSTAT != 0	return
		if $_ANSWER == 0	goto itmseq
		if $_ANSWER == 1	goto itmattr
 		if $_ANSWER == 2	goto itmsfty
 		if $_ANSWER == 3	goto buildto
	    @itmseq
		dpywmsg " Loading PFS SourceLink ... $_MS_PATIENT"
		system "pfsitmmt 10 0"
		system "ansi reset"
		refresh
		return
	    @itmattr
		dpywmsg " Loading PFS SourceLink ... $_MS_PATIENT"
		system "pfsitmmt 10 1"
		system "ansi reset"
		refresh
		return
 	    @itmsfty
 		dpywmsg " Loading PFS SourceLink ... $_MS_PATIENT"
 		system "invsafty"
 		if $_SYSSTAT == 15 then
 			logwarn "invsafty program is not yet available"
 			dpywerr "     This function is not yet available"
 		endif
 		system "ansi reset"
 		refresh
 		return
	    @buildto
		dpywmsg " Loading PFS SourceLink ... $_MS_PATIENT"
		system "pfsbuild 0 10 $FMS_STORE"
		system "ansi reset"
		refresh
		return
	.ITEM "%phlanget 2246 'e)  PFS SourceLink Reporting' ''"
		set _WROW 9
		ask $_WROW 40 _ANSWER menu 6 - 0 \
			" PFS SourceLink Reporting " \
			"1)  Active Orders" \
			"2)  PFS Order Form Report" \
			"3)  Suggested Order Report" \
			"4)  Order Confirmation Report" \
			"5)  Delivery Receipt Report" \
			"6)  Item Master Listing"
		if $_SYSSTAT != 0	return
		if $_ANSWER == 0	goto actorder
		if $_ANSWER == 1	goto ordrform
		if $_ANSWER == 2	goto suggesto
		if $_ANSWER == 3	goto ordrconf
		if $_ANSWER == 4	goto receipt
		if $_ANSWER == 5	goto itmmaster
	    @actorder
		call NEXTLINE 0
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		call PFSREPORT "pfsord3"
		system "ansi reset"
		refresh
		return
	    @ordrform
		call NEXTLINE 1
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		call PFSREPORT "pfsord1"
		system "ansi reset"
		refresh
		return
	    @suggesto
		call NEXTLINE 2
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		call PFSREPORT "pfsord2"
		system "ansi reset"
		refresh
		return
	    @ordrconf
		call NEXTLINE 3
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		call PFSREPORT "pfsconfr"
		system "ansi reset"
		refresh
		return
	    @receipt
		call NEXTLINE 4
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		call PFSREPORT "pfsdrcpt" "0"
		system "ansi reset"
		refresh
		return
	    @itmmaster
		call NEXTLINE 6
		call GETPRINTER $_WROW 42
                if $_SYSSTAT != 0	return
		call PFSREPORT "pfsilist"
		system "ansi reset"
		refresh
		return

#########################################################################
### P R O C E D U R E   D E F I N I T I O N S
#########################################################################

### ENTER
###	Initialize environement variables for fms.
###	Usage:	none (automatically called)
.PROC ENTER
	if "$PRINTER" == ""	set PRINTER	"lp -oalt>/dev/null 2>&1"
 	if "$PRINTERGFX" == ""	set PRINTERGFX	"lp -oalt,g >/dev/null 2>&1"
	if "$NORADDR" == ""	systemv NORADDR "sysparm -p noraddr 2>/dev/null"
	if "$NORADDR" == ""	set NORADDR	00
	### Initialize diagnostic code strings.
	set _UE_NONE		0
	set _UE_WARN		1
	set _UE_SFACCESS	2
	set _UE_DBACCESS	3
	set _UE_BADPDATE	4
	set _UE_NOGCS		6
	set _UE_BADSSN		99
	set _UE_POSCOMM		100
	set _UE_POSBUSY		101
	set _UE_POSIO		102
	set _UE_POSCLK		103
	set _UE_TKCLOSE		110
	set _UE_PREP		111
	set _UE_LABOR		112
	set _UE_EARLY		113
	set _UE_BADIDATE	114
	set _UE_IUPDATE		115
	set _UE_LBRMCMA		120
	set _UE_LBRMEMP		121
	set _UE_LBRMSYS		122
	set _UE_LBRMSCH		123
	set _UE_LBRMTSK		124
	set _UE_LBRMALT		125
	set _UE_LBRMPCT		126
	set _UE_LBRMTMP		127
	set _UE_LBRMSST		128
	set _UE_FATAL		255
	### Initialize diagnostic message strings.
	phlanget 255 "Call Support" "" _MS_CALLSUPP
	phlanget 2247 "Press <ENTER> to Continue" "" _MS_ENTER
	phlanget 2248 "Please Wait" "" _MS_WAIT
	phlanget 302 "Please Be Patient" "" _MS_PATIENT
	phlanget 2249 "Error Accessing Sysparm File" "" _MS_SYSPARMACC
	phlanget 2250 "Error Modifying Sysparm File" "" _MS_SYSPARMCHG
	phlanget 2251 "Error Accessing Storparm File" "" _MS_STORPARMACC
	phlanget 2252 "Error Modifying Storparm File" "" _MS_STORPARMCHG
	phlanget 2253 "Error Accessing syslevel.txt File" "" _MS_SYSLEVEL
	phlanget 2254 "  NOTICE:  An Employee In This Report Has Negative Hours !!!" "" _MS_NEGHOURS
	phlanget 2255 "You are not currently clocked in " "" _MS_CLOCK
	### Initialize fms environment variables.
	if "$FMS_TRAIN" != "Y"	set FMS_TRAIN	N
	if "$FMS_DATA" 	== ""	set FMS_DATA	"$FMS/data"
	if "$FMS_LOG"	== ""	set FMS_LOG	"$FMS_DATA/syslog.txt"
	if "$FMS_WB"    == ""	set FMS_WB	"$FMS/bin/wbinface"
	if "$PFSIFP"	== ""	set PFSIFP	"$SEC/PFS/extract" 
	if "$PFSXTRP"	== ""	set PFSXTRP	"$SEC/PFS/extract" 
	if "$VEC"    	== ""	set VEC		"$SEC/lib/vec"
 	set TERMINFO	"$FMS/terminfo"
	systemv _DATEFMT "syspdate -F 2>/dev/null"
	if "$FMS_STORE" == ""	systemv FMS_STORE "sysstor -p store_number"
	if "$FMS_STORE" == ""	then
		phlanget 2256 "Cant Obtain Store Number" "" _TEMP_STA
		dpywerr -l "$_TEMP_STA" "$_MS_CALLSUPP"
		exit 255
	endif
	if "$FMS_STORETYPE" == "" call STORETYPE
	if "$FMS_POSTYPE" == "" call POSTYPE
	if "$FMS_MAIN_TIMEOUT" == ""	set FMS_MAIN_TIMEOUT 1800
	if "$FMS_TIMEOUT" == ""		set FMS_TIMEOUT 600
	if "$FMS_STIMEOUT" == ""	set FMS_STIMEOUT 120
	### Setup CALLSUPP different between RRs and Delcos
	### NCR
	if $FMS_STORETYPE != DELCO then
		phlanget 255 "Call Support" "" _MS_CALLSUPP
	endif
	### PHI
	if $FMS_STORETYPE == DELCO then
		phlanget 255 "Call Support" "" _MS_CALLSUPP
	endif

	### Setup touchscreen order entry flag
	set _SUSTOUCH "n"
	if $FMS_POSTYPE == SUS then
		if "$TERM" == "touch_p" 	set _SUSTOUCH "y"
		if "$TERM" == "touch"	 	set _SUSTOUCH "y"
		if "$TERM" == "sco_p"	 	set _SUSTOUCH "y"
		if "$TERM" == "sco" 		set _SUSTOUCH "y"
	endif
				
	### Initialize menu control variables.
	phlanget 1668 "FIELD MANAGEMENT SYSTEM" "" MENU_TITLE
	set MENU_TIMEOUT $FMS_TIMEOUT
	set MENU_STIMEOUT $FMS_STIMEOUT
	set MENU_REFRESH Y
	read $FMS_DATA/version.txt _VERS
	if $_SYSSTAT == -1 then
		phlanget 2257 "WARNING: Missing Version File" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		set _VERS "?.??"
	endif
	set MENU_VERS	"VERS $_VERS"
	call SETAPPL
        ### Determine if we are on the console or not
        system "sysattrib CONSOLE_DEV | grep $_SYSTTY >/dev/null 2>&1"
        if $_SYSSTAT != 0       set _IAMCONSOLE N
        if $_SYSSTAT == 0       set _IAMCONSOLE Y
        system "sysattrib FMS_CON | grep $_SYSTTY >/dev/null 2>&1"
        if $_SYSSTAT != 0       set _IAMFMSCON N
        if $_SYSSTAT == 0       set _IAMFMSCON Y
        if "$SANDPATH" != ""	set _IAMFMSCON Y
        systemv _SCOFLAG "sysunixv | awk -F\"|\" ' { print \$1 } '"
        if "$_SCOFLAG" == "SCO"         set _SCOFLAG "Y"
        if "$_SCOFLAG" == "AT&T"        set _SCOFLAG "N"
	### Initialize signed on employee information
	call CHKCLOCK
	if "$EMPL_ACCESS" == ""		set EMPL_ACCESS 5
	access f "$FMS/tmp/sysuif.$_SYSTTY"
	if $_SYSSTAT != 0		return
	read "$FMS/tmp/sysuif.$_SYSTTY" _MENU_NAME EMPL_SIGNON \
		EMPL_ID EMPL_PASSWORD EMPL_SECURITY EMPL_SSN \
		EMPL_BORROWED EMPL_JOBCODE EMPL_DEPT EMPL_ACCESS \
 		EMPL_SIGNOUT FMS_TRAIN
	phlanget 2119 "Y" "Yes" _TEMP_YES
        if "$FMS_TRAIN" == Y call INITTRAIN "$_TEMP_YES"
	rm "$FMS/tmp/sysuif.$_SYSTTY"
	call CHKCLOCK
	unset _MENU_NAME

### CALLPRINTER
###	Send output to screen or printer
###	Usage:	call CALLPRINTER "cmd"
.PROC CALLPRINTER
	if $_PRINTER == 0 	set _PRTOPT	"-s"
	##Fixxxer Test
	#system "sysprntr $_PRTOPT $_1 2>/dev/null"
	system "sysprntr $_PRTOPT $_1 2>/dev/null"
	unset _PRTOPT
	if $_PRINTER == 0	refresh

### CANCELPRT
###	Cancel all printer jobs
###	Usage:	call CANCELPRT
.PROC CANCELPRT
	phlanget 2258 " Canceling Printer Reports ..." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_PATIENT"
	system "syscanlp >/dev/null 2>&1"
	dpywclr
	if $_SYSSTAT != 0 then
		phlanget 2259 "Unable to Cancel Printer Reports" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
	endif

### CHECKPARM
###	Verify the current close item.
###	Usage:	call CHECKPARM
.PROC CHECKPARM
	set _SYSSTAT 0
	zap _CLOSEREQ 5 ""
	if $_CLOSEREQ == "1 1 1   "	return
	set _MSG "NONE"
	substr _ITEM 4,1 $_CLOSEREQ
	if $_ITEM == "0" phlanget 2260  "Need to Run Payroll Summary Report First" "" _MSG
	substr _ITEM 2,1 $_CLOSEREQ
	if $_ITEM == "0"  phlanget 2261  "Need to do Labor Updates First" "" _MSG
	substr _ITEM 0,1 $_CLOSEREQ
	if $_ITEM == "0" phlanget 2262 "Need to check Error Transactions First" "" _MSG
	if $_MSG == "NONE"		return
	dpywerr -l "$_MSG"
	unset _MSG
	set _SYSSTAT -1

### CHGPASSWD
###	Change a password
###	Usage:	call CHGPASSWD Type
.PROC CHGPASSWD
	call READPASSWD
    @enterpasswd
	call ENTERPSWD
	if $_SYSSTAT == 0 goto chkblank
	if $_SYSSTAT == -1 return
	phlanget 2265 " The two passwords do not match" "" _TEMP_STA
	phlanget 2266 " Press <Enter> to retry..." "" _TEMP_STB
	dpywmsg -b "$_TEMP_STA" "$_TEMP_STB" 
	pause
	dpywclr
	goto enterpasswd
    @chkblank
	if "$_PASSWD1" != "" goto "$_1"pwd
	phlanget 430 " Cannot Enter Blank Password!" "" _TEMP_STA
	phlanget 2266 " Press <Enter> to retry..." "" _TEMP_STB
	dpywmsg -b "$_TEMP_STA" "$_TEMP_STB" 
	pause
	dpywclr
	goto enterpasswd
    @AMpwd
	if "$_PASSWD1" == ""	set _PASSWD1 " "
	set _AM_PWD	"$_PASSWD1"
	goto writepwd
    @QCMpwd
	if "$_PASSWD1" == ""	set _PASSWD1 " "
	set _QCM_PWD	"$_PASSWD1"
    @writepwd
	call WRITEPASSWD
	unset _ADMIN_PWD _MAINT_PWD _AM_PWD _QCM_PWD
	if $_SYSSTAT != 0	return
	phlanget 2267 " The password has been successfully changed" "" _TEMP_STA
	phlanget 2268 " Press <Enter> to continue..." "" _TEMP_STB
	dpywmsg "$_TEMP_STA" "$_TEMP_STB"
	pause
	dpywclr

### ENTERPSWD
###
### Get password from user for AM or QCM password
.PROC ENTERPSWD
	phlanget 2263 "Enter the new password?" "" _TEMP_STA
	ask 13 19 _PASSWD1 hidden 12 "$_TEMP_STA "
	if $_SYSSTAT != 0 	goto F12press
	phlanget 2264 "Re-enter  the new password?" "" _TEMP_STA
	ask 15 17 _PASSWD2 hidden 12 "$_TEMP_STA "
	if $_SYSSTAT != 0 	goto F12press
	upperc _PASSWD1 _PASSWD2
	if "$_PASSWD1" == "$_PASSWD2" goto pswdok
	set _SYSSTAT 1
	popall
	return
    @pswdok
	set _SYSSTAT 0
	popall
	return
    @F12press
	set _SYSSTAT -1 
	popall
	return
	
### CHKACCESS 
###	Check if user has security level to access requested operation
###     Usage:  call CHKACCESS Level Level ...
.PROC CHKACCESS
	set _CHECK "$_1$_2$_3$_4$_5$_6"
    @check
	substr _LEVEL 0,1 "$_CHECK"
	if "$_LEVEL" == "" then
		phlanget 2269 " ......  ACCESS DENIED  ......" "" _TEMP_STA
		dpywmsg -b "$_TEMP_STA" 
		sleep 3
		dpywclr
		set _SYSSTAT -1
		return
	endif
	if "$_LEVEL" == "$EMPL_ACCESS" then
		set _SYSSTAT 0
		return
	endif
	substr _CHECK 1 "$_CHECK"
	goto check

### CHKCLOCK:
###	Check the clock in/out status of the signed in employee
###	Usage:	call CHKCLOCK
.PROC CHKCLOCK
	if $FMS_POSTYPE != SUS		return
	if "$EMPL_SSN" == ""		return
	system "tkpunclk -c"
	###Fixxxer Hack. 7/Abril/2004
	rm -f $FMS/lock/remote
	if $_SYSSTAT == 0		unset MENU_MSG
	if $_SYSSTAT == 1 		set MENU_MSG $_MS_CLOCK

### CHKCONSOLE
###	Check if the current process is on the console.  Return -1 in
###     $_SYSSTAT if not, 0 if it is.
###	Usage:	call CHKCONSOLE Application
.PROC CHKCONSOLE
        if "$SANDPATH" != ""	set _IAMCONSOLE Y
	if "$_IAMCONSOLE" == "Y"                goto returnval
	if "$_1" != "" then
		phlanget 2270 "may be accessed only from the console" "" _TEMP_STA
		phlanget 2271 " Press <Enter> to continue..." "" _TEMP_STB
		dpywmsg -b " $_1 $_TEMP_STA" "$_TEMP_STB"
		pause
		dpywclr
	endif
	set _SYSSTAT -1
	return
    @returnval
        set _SYSSTAT 0
        return

### CHKDATE
###	Check if first date is less than or equal to the second date
###	Usage:	call CHKDATE BegDate EndDate
.PROC CHKDATE
	set _SYSSTAT 0
	substr _BYY 6,2 $_1
	substr _EYY 6,2 $_2
	if $_BYY -lt $_EYY	return
	if $_BYY -gt $_EYY then
		set _SYSSTAT -1
		return
	endif
	substr _BMM 0,2 $_1
	substr _EMM 0,2 $_2
	if $_BMM -lt $_EMM	return
	if $_BMM -gt $_EMM then
		set _SYSSTAT -1
		return
	endif
	substr _BDD 3,2 $_1
	substr _EDD 3,2 $_2
	if $_BDD -gt $_EDD then
		set _SYSSTAT -1
		return
	endif

### SPLITYYMMDD
###	set variables to yy mm dd from YYMMDD passed
###	Usage:	call SPLITYYMMDD yymmdd
.PROC SPLITYYMMDD
	substr _YY 0,2 $_1
	substr _MM 2,2 $_1
	substr _DD 4,2 $_1
	set _MM_DD_YY "$_MM/$_DD/$_YY"

### CHKNOTIFY
###	Check for a .notify file in the fms home directory.
###	If this file is present, the contents is read (1 line max)
###	and dpywerr is called to display the message to the user.
###	Afterwards, the .notify file is deleted.
###	Usage:	call CHKNOTIFY
.PROC CHKNOTIFY
	### Do not show notify message if an hourly employee signed on
	if $EMPL_ACCESS -gt 1		return
	if "$EMPL_DEPT" == 92		return
    @chkfile
	access r $FMS/.notify
	if $_SYSSTAT == -1		return
	##systemv _NLINES "wc -l $FMS/.notify | sed -e 's/ *\\([0-9]*\\).*/\\1/p'"
	# MODIFICACION MEXICO LINUX 2004-NUEVO MASTER
	#systemv _NLINES "wc -l $FMS/.notify | cut -c3-8"
	systemv _NLINES "wc -l $FMS/.notify | cut -c1-2"
	set _LINECNT	0
    @readfile
	read -$_LINECNT $FMS/.notify _L1 _L2 _L3 _L4 _L5
	if $_SYSSTAT == -1		return
	substr _SL1 0,70 "$_L1"
	unset _L1
	substr _SL2 0,70 "$_L2"
	unset _L2
	substr _SL3 0,70 "$_L3"
	unset _L3
	substr _SL4 0,70 "$_L4"
	unset _L4
	substr _SL5 0,70 "$_L5"
	unset _L5
	dpywerr -tl "$_SL1" "$_SL2" "$_SL3" "$_SL4" "$_SL5" 
	unset _SL1
	unset _SL2
	unset _SL3
	unset _SL4
	unset _SL5
	expr _LINECNT "$_LINECNT + 5"
	if $_LINECNT -lt $_NLINES	goto readfile
	rm $FMS/.notify


### ACTCOL
###     Actual Cost of Labor Report
###     Usage:  call ACTCOL
.PROC ACTCOL

        set _OUTFILE "$FMS/tmp/lbricrpt.$_SYSTTY"
        access f $_OUTFILE
        if $_SYSSTAT == 0	system "rm -f $_OUTFILE >/dev/null 2>&1"
        access x $FMS/bin/lbriceng
        if $_SYSSTAT != 0       then
		logwarn "lbriceng is missing or has incorrect execute permissions"
		phlanget 2664 "Actual Cost of Labor Generation Failed" "" _TEMP_STA
		phlanget 2665 "Missing Critical File .... " "" _TEMP_STB
		dpywerr -l "$_TEMP_STA" "$_TEMP_STB $_MS_CALLSUPP"
                return
        endif
        access x $FMS/bin/lbricrpt
        if $_SYSSTAT != 0       then
		logwarn "lbricrpt is missing or has incorrect execute permissions"
		phlanget 2664 "Actual Cost of Labor Generation Failed" "" _TEMP_STA
		phlanget 2665 "Missing Critical File .... " "" _TEMP_STB
		dpywerr -l "$_TEMP_STA" "$_TEMP_STB $_MS_CALLSUPP"
                return
        endif
        set _WROW 14
        system "lbriceng -d$_SDATE -p$_OUTFILE"
        if $_SYSSTAT != 0 then
	        logwarn "lbriceng $_SDATE - Actual Cost of Labor Generation Failed"
		phlanget 2664 "Actual Cost of Labor Generation Failed" "" _TEMP_STA
                dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
                dpywclr
		goto lbrrptexit
        endif
        dpywclr
        #Allow managers and Home Office to see salary detail
        set _LBRSTAT ""
        if "$EMPL_DEPT" == 90           set _LBRSTAT  "-m"
        if "$EMPL_ID" == "ADMIN"        set _LBRSTAT  "-m"
        call CALLPRINTER "lbricrpt $_LBRSTAT -d$_SDATE -p$_OUTFILE"
        set _LBRSTAT $_SYSSTAT
        if $_LBRSTAT == 0               goto lbrrptexit
        if $_LBRSTAT == 1 then
		logwarn "Actual Cost of Labor information does not exist for $_SDATE"
		phlanget 2666 "Actual Cost of Labor information does not exist for $_SDATE" "" _TEMP_STA
		dpywerr "$_TEMP_STA"
		goto lbrrptexit
        endif
        if $_LBRSTAT == 255 then
		logwarn "lbricrpt $_SDATE - Actual Cost of Labor Generation Failed"
		phlanget 2664 "Actual Cost of Labor Generation Failed" "" _TEMP_STA
                dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
                goto lbrrptexit
        endif
   @lbrrptexit
        access f $_OUTFILE
        if $_SYSSTAT == 0	system "rm -f $_OUTFILE >/dev/null 2>&1"
        unset _WROW _SDATE _LBRSTAT _OPT _OUTFILE


### CLOCKIN:
###	Clock the currently signed in employee in
###	Usage:	call CLOCKIN
.PROC CLOCKIN
	phlanget 2272 " Processing Selection .............." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_PATIENT"
	if $FMS_POSTYPE != SUS then
		phlanget 2273 "Time Clock Functions supported for SUS only!" "" _TEMP_STA
		phlanget 2274 "Please clock in on the NORAND" "" _TEMP_STB
		dpywerr "$_TEMP_STA" "$_TEMP_STB"
		return
	endif
	if "$EMPL_SSN" == "" then
		phlanget 2275 "Time Clock Functions are accessed only through" "" _TEMP_STA
		phlanget 2276 "employee sign in!" "" _TEMP_STB
		dpywerr "$_TEMP_STA" "$_TEMP_STB"
	return
	endif
	access f $FMS_DATA/.timekeeping
	if $_SYSSTAT == 0 then
		phlanget 2277 "   Access to timekeeping not allowed when recovering" "" _TEMP_STA
		phlanget 2278 "              previous days guest checks" "" _TEMP_STB
		dpywerr "$_TEMP_STA" "$_TEMP_STB"
		return
	endif
	call DOBACKUP "tkpunch.dat"
	systemv _PING "/usr/bin/ph/fingerprint/bin/ping_fp.sh"
	system "echo $_PING > /tmp/ping.flag"
	# 0 hace ping el lector biometrico
	# Revisar que el usuario este registrado en el lecto de huellas
	if "$_PING" == "0" systemv _ISINFP  "/usr/bin/ph/fingerprint/bin/is_in_fp.sh $EMPL_SSN"
	# el resultado es 0, existe, entonces que use el biometrico
	if "$_ISINFP" == "0" then
		system "/usr/bin/ph/fingerprint/bin/attendance.sh $EMPL_SSN IN"
		goto fpclockin
	endif
	# el resultado es 1, no existe en el lector, que use el sistema FMS para entrar
	if "$_ISINFP" == "1" goto fmsclockin
	# no hubo ping, de forma tradicional la entrada
	if "$_PING" == "1" goto fmsclockin
	@fmsclockin
	system "tkpunclk -i"
	if $_SYSSTAT == $_UE_WARN then
		call RMBACKUP "tkpunch.dat"
		phlanget 2279 " You are already clocked in - Use Clock Out option" "" _TEMP_STA
		dpywmsg -b "$_TEMP_STA" "$_MS_ENTER"
		pause
		dpyxclr
		return
	endif
	if $_SYSSTAT == $_UE_SFACCESS then
		call RMBACKUP "tkpunch.dat"
		phlanget 2280 " Terminated Employees are not allowed to Clock In " "" _TEMP_STA
		dpywmsg -b "$_TEMP_STA" "$_MS_ENTER"
		pause
		dpyxclr
		return
	endif
	if $_SYSSTAT != 0 then
		call RECOVER "tkpunch.dat"
		phlanget 2281 "Error Clocking In" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	endif
	call CHKCLOCK
	@fpclockin
	refresh
	clear
	exit 0

### CLOCKOUT:
###	Clock the currently signed in employee out
###	Usage:	call CLOCKOUT
.PROC CLOCKOUT
	phlanget 2272 " Processing Selection .............." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_PATIENT"
	if $FMS_POSTYPE != SUS then
		phlanget 2273 "Time Clock Functions supported for SUS only!" "" _TEMP_STA
		phlanget 2282 "Please clock out on the NORAND" "" _TEMP_STB
		dpywerr "$_TEMP_STA" "$_TEMP_STB"
		return
	endif
	if "$EMPL_SSN" == "" then
		phlanget 2275 "Time Clock Functions are accessed only through" "" _TEMP_STA
		phlanget 2276 "employee sign in!" "" _TEMP_STB
		dpywerr "$_TEMP_STA" "$_TEMP_STB"
		return
	endif
	access f $FMS_DATA/.timekeeping
	if $_SYSSTAT == 0 then
		phlanget 2277  "   Access to timekeeping not allowed when recovering" "" _TEMP_STA
		phlanget 2278 "              previous days guest checks" "" _TEMP_STB
		dpywerr "$_TEMP_STA" "$_TEMP_STB"
		return
	endif
	systemv _PING "/usr/bin/ph/fingerprint/bin/ping_fp.sh"
	# Ping es exitoso, resultado es 0
	# Revisar que el usuario este registrado en el lecto de huellas
	if "$_PING" == "0" systemv _ISINFP "/usr/bin/ph/fingerprint/bin/is_in_fp.sh $EMPL_SSN"
	# el resultado es 0, existe, entonces que use el biometrico
	if "$_ISINFP" == "0" then
		system "/usr/bin/ph/fingerprint/bin/attendance.sh $EMPL_SSN OUT"
		goto fpclockout
	endif
	# el resultado es 1, no existe en el lector, que use el sistema FMS para salir
	if "$_ISINFP" == "1" goto fmsclockout
	# No hubo ping, de forma tradicional
	if "$_PING" == "1" goto fmsclockout
	@fmsclockout
	call SAFECMD "tkpunclk -o" "tkpunch.dat" $_UE_WARN
	if $_SYSSTAT == $_UE_WARN then
		phlanget 2283 " You are NOT clocked in - Use Clock In option first" "" _TEMP_STA
		dpywmsg -b "$_TEMP_STA" "$_MS_ENTER"
		pause
		dpyxclr
		return
	endif
	call CHKCLOCK
	@fpclockout
	refresh
	clear
	exit 0

### DELERR
###	Delete error transactions.
###	This is only used during initial installation prior to first close.
.PROC DELERR
	phlanget 2284 "   This process deletes all error transactions from the system." "" _TEMP_STA
	phlanget 2285 "   It should only be run once prior to the first payroll close." "" _TEMP_STB
	dpywmsg -b "$_TEMP_STA" "$_TEMP_STB"
	phlanget 1891 "Are you sure" "" _TEMP_STA
	phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
	phlanget 1316 "N" "No" _TEMP_NO
	ask 10 26 _ANSWER boolean 1 "$_TEMP_STA $_TEMP_YESNO? "
	if $_SYSSTAT != 0		return
	if $_ANSWER == $_TEMP_NO	return
	phlanget 2286 "  Deleting error transactions ..." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_WAIT"
	call SAFECMD "tkdeltrn >/dev/null 2>&1" "tkpaytrn.dat"
	if $_SYSSTAT != 0 then
		phlanget 2287 "Unable to Delete Error Transactions" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
		exit 255
	endif
	phlanget 2288 "Updating POS with New Access Level ... Please Wait" "" _TEMP_STA
	dpywmsg "$_TEMP_STA"
	system "sysstor -c tk.sysinfo_flag 2 2>/dev/null"
	if $_SYSSTAT != 0 then
		dpywerr -l "$_MS_STORPARMCHG" "$_MS_CALLSUPP"
		return
	endif
	system "syspos -i synctk >/dev/null 2>&1"
	if $_SYSSTAT != 0 then
		phlanget 2289 "Error Updating POS Access Flag!" "" _TEMP_STA
		phlanget 2290 "This will be retried at the next scheduled task..." "" _TEMP_STB
		dpywerr -l "$_TEMP_STA" "$_TEMP_STB"
	endif
	logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"

### DISKCLEAN
###	Allow the user to insert a cleaning diskette.
###	Usage:	call DISKCLEAN
.PROC DISKCLEAN
	if $_SYSSTAT != 0		return
	phlanget 2291 "Clean the diskette drive" "" _TEMP_STA
	phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
	phlanget 2119 "Y" "Yes" _TEMP_YES
	ask 10 21 _SURE boolean 1 "$_TEMP_STA $_TEMP_YESNO" $_TEMP_YES
	if $_SYSSTAT != 0		return
	poplast
	if $_SURE != $_TEMP_YES		return
	phlanget 2292 "Insert the cleaning diskette and press ENTER!" "" _TEMP_STA
	ask 10 14 _SURE boolean 1 "$_TEMP_STA" $_TEMP_YES
	if $_SYSSTAT != 0		return
	poplast
	phlanget 2293 "   Cleaning Diskette Drive ...." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_WAIT ...."
	system "dosdir a: >/dev/null 2>&1"
	sleep 1
	system "dosdir a: >/dev/null 2>&1"
	sleep 1
	system "dosdir a: >/dev/null 2>&1"
	sleep 1
	system "dosdir a: >/dev/null 2>&1"
	sleep 1
	system "dosdir a: >/dev/null 2>&1"
	sleep 1
	system "dosdir a: >/dev/null 2>&1"
	dpywclr
	phlanget 2294 "Remove the cleaning diskette and press ENTER!" "" _TEMP_STA
	ask 10 14 _SURE boolean 1 "$_TEMP_STA" $_TEMP_YES
	if $_SYSSTAT == 0			poplast
	set _SYSSTAT 0

### DOBACKUP:
###	Backup critical files.
###	Usage:	call BACKUP "file1 file2 ..."
.PROC DOBACKUP
	if "$_1" == ""			return
	system "(cd $FMS_DATA; \
		for i in $_1;do \
			if [ -f \$i ];then \
				cp \$i Backup; \
			fi; \
		done;sync) >/dev/null 2>&1"
	if $_SYSSTAT == 0		return
	phlanget 2295 "Backup Process Failed" "" _TEMP_STA
	dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
	logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
	exit 255

### EARLYMSG
###	Display early close warning message.
###	Usage:	call EARLYMSG
.PROC EARLYMSG
	phlanget 2296 "     You are attempting a TIMEKEEPING CLOSE !!" "" _TEMP_STA
	phlanget 2297 "     In order to accomplish this, you must" "" _TEMP_STB
	phlanget 2298 "          1. Review the Currently Clocked in Employees report." "" _TEMP_STC
	phlanget 2299 "          2. Clock out all employees on the report." "" _TEMP_STD
	phlanget 2300 "          3. Perform Timekeeping Corrections as necessary to ensure" "" _TEMP_STE
        phlanget 2301 "	      that hours worked for this pay period are correct." "" _TEMP_STF
	phlanget 2302 "     If any step has NOT been completed, you will be returned" "" _TEMP_STG
	phlanget 2303 "     to the TIMEKEEPING menu to complete the preparation steps" "" _TEMP_STH
	dpywmsg	-b "$_TEMP_STA" "$_TEMP_STB" " " "$_TEMP_STC" " " "$_TEMP_STD" \
		   " " "$_TEMP_STE" "$_TEMP_STF" " " "$_TEMP_STG" "$_TEMP_STH" \
		   " "
	phlanget 2304 "Have you completed all preparation steps?" "" _TEMP_STA
	phlanget 1316 "N" "No" _TEMP_NO
	ask 3 17 _ANSWER boolean 1 "$_TEMP_STA " $_TEMP_NO
	if $_SYSSTAT == 0 		poplast
	dpywclr
	if $_SYSSTAT != 0 then
		set _ANSWER N	
		return
	endif
	if $_ANSWER == Y		return
	set _SYSSTAT -1

### EMPUPDATE:
###	Conditionally update the employee file on the Norand
###	Usage:	call EMPUPDATE
.PROC EMPUPDATE
	access f $FMS_DATA/hrcempl.chg
	if $_SYSSTAT != 0	return
	call NORUPDATE

### ERRTRANRPT
###	Run the error transactions report.
###	Usage:	call ERRTRANRPT
.PROC ERRTRANRPT
	call DOBACKUP "tkpaytrn.dat"
	### Poll the NORAND for the punch file.
	if $FMS_TRAIN == Y		goto erortran
	call NORGPUNCH
    @erortran
	call RMBACKUP "tkpaytrn.dat"
	### Run error transactions report.
	phlanget 2305 " Building the Error Transaction File Listing ..." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_PATIENT"
	call DOBACKUP "hrcempl.dat sysparm.dat"
	### mazd
	system "trap 'rm /usr/fms/lock/payroll' 1;tkerrtrn"
	refresh
	goto status$_SYSSTAT -
	call RECOVER "hrcempl.dat sysparm.dat"
	phlanget 2306 "Unable to Build Error Transaction File Listing" "" _TEMP_STA
	dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
	return
    @status$_UE_BADSSN
	phlanget 2667 "Unknown employee," "" _TEMP_STA
	phlanget 2668 ", must be set up in Employee Maintenance" "" _TEMP_STB
	read $FMS_DATA/badempssn _badempssn
     	dpywerr "$_TEMP_STA $_badempssn$_TEMP_STB"
	dpywclr
	call RECOVER "hrcempl.dat sysparm.dat"
	return 
    @status$_UE_NONE
	call RMBACKUP "hrcempl.dat sysparm.dat"
	call DOBACKUP "hrcrate.dat"
	system "syncrate >/dev/null 2>&1"
     	phlanget 2307 "     ...... Checking Transactions ......" "" _TEMP_STA
     	dpywmsg "$_TEMP_STA $_MS_WAIT     "
	systemv _MSG "tkchktrn"
	if $_SYSSTAT != 0 then
		dpywerr "$_MSG"
		return
	endif
	phlanget 2308 "   ** All Transactions are CORRECT .." "" _TEMP_STA
	dpywmsg -b "$_TEMP_STA $_MS_ENTER **"
	pause
	dpywclr
	return 
    @status$_UE_LABOR
	call RMBACKUP "hrcempl.dat sysparm.dat"
     	phlanget 2307 "     ...... Checking Transactions ......" "" _TEMP_STA
     	dpywmsg "$_TEMP_STA $_MS_WAIT     "
	systemv _MSG "tkchktrn"
	if $_SYSSTAT != 0 then
		dpywerr "$_MSG"
		return
	endif
	### Update performance files
	phlanget 2309 "... Updating Performance file with Labor Updates .." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_WAIT"
	### mazd
	call SAFECMD "tkacthrs 1 0" "lbrprfrm.dat lbrprday.dat sysparm.dat" "" "payroll"
	dpywclr 
	return

### EXITTRAIN
###	Exit training mode
###	Usage:	call EXITTRAIN
.PROC EXITTRAIN

	phlanget 2310 "... Restoring System to Production Status .. Return to Workbench ..." "" _TEMP_STA
	dpywmsg "$_TEMP_STA"
	set FMS_TRAIN N
	set FMS_DATA  "$FMS_SAVE"
	systemv FMS_STORE "sysstor -p store_number"
	if "$FMS_STORE" == ""	then
		dpywclr 
		phlanget 2256 "Cant Obtain Store Number" "" _TEMP_STA
		dpywerr -l "$_TEMP_STA" "$_MS_CALLSUPP"
		exit 255
	endif
	unset FMS_SAVE FMS_TIME MENU_MODE
	dpywclr 

### GETPPSSN
###	Ask for payroll period information.
###	Usage:	call GETPPSSN
.PROC GETPPSSN
	set _WROW 6
	phlanget 1932 "1)  Current Pay Period            " "" _TEMP_STA
	phlanget 1949 "2)  Previous Pay Period" ""	_TEMP_STB
	ask $_WROW 41 _PP menu 2 - 0 ""  "$_TEMP_STA" "$_TEMP_STB"
	if $_SYSSTAT != 0		return
	call NEXTLINE $_PP
	phlanget 2311 "1)  One Employee                  " "" _TEMP_STA
	phlanget 2312 "2)  All Employees" "" _TEMP_STB
	ask $_WROW 41 _SEMP menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
	if $_SYSSTAT != 0	return
	call NEXTLINE $_SEMP
	if $_SEMP == 0		goto selssn
	set _SSN ""
	return
    @selssn
	emplsel _SSN NOADD

### GETPRINTER
###	Ask for printer/viewer output.
###	Usage:	call GETPRINTER row col
.PROC GETPRINTER
	phlanget 2313 "1)  Display report on Screen " "" _TEMP_STA
	phlanget 2314 "2)  Print report on Printer  " "" _TEMP_STB
	ask "$_1" "$_2" _ANSWER_P menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
	if $_SYSSTAT != 0		return
	set _PRINTER $_ANSWER_P
	phlanget 1985 "********* Report is Being Processed ..." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_PATIENT *********"

### GETSUBPRD
###	Ask for the period and sub-period.
###	Usage:	call GETSUBPRD
.PROC GETSUBPRD
	systemv _RPTYYPPSP "syscalgt -p invcaldr.txt 2>/dev/null"
	substr _RPTYY 0,2 $_RPTYYPPSP
	substr _RPTPRD 3,2 $_RPTYYPPSP
	substr _RPTSUBP 6,1 $_RPTYYPPSP
	phlanget 2315 " Current period:" "" _TEMP_STA
	phlanget 2669 " Current sub-period:" "" _TEMP_STB
	dpywmsg "$_TEMP_STA  $_RPTPRD    $_TEMP_STB  $_RPTSUBP"
    @prdentry
	set _WROW 6
	phlanget 2670 " Enter Period to Report [1-15]:  "  "" _TEMP_STA
	ask $_WROW 33 _RPTPRD_A integer 2 "$_TEMP_STA" $_RPTPRD
	if $_SYSSTAT != 0 then
		dpywclr
		return
	endif

	if $_RPTPRD_A -gt $_RPTPRD  then
		systemv _RPTYY "echo $_RPTYY | awk '{ printf(\"%02d\", \$1-1)}'"
	endif

	set _RPTPRD "$_RPTPRD_A"

	if $_RPTPRD -lt 1	goto prderror
	if $_RPTPRD -gt 15	goto prderror
	goto prdcheck
    @prderror
	poplast
	bell
	goto prdentry
    @prdcheck
	if $_RPTPRD -ge 10 	goto getsubpno
	substr _XX 1,1 $_RPTPRD
	if "$_XX" != "0"	set _RPTPRD "0$_RPTPRD"
	unset _XX
    @getsubpno
	call NEXTLINE 0
    @subpentry
	phlanget 2671 " Enter Sub-Period to Report   [1-6] :   " "" _TEMP_STA 
	ask $_WROW 33 _RPTSUBP integer 1 "$_TEMP_STA" $_RPTSUBP
	if $_SYSSTAT != 0 then
		dpywclr
		return
	endif
	if $_RPTSUBP -lt 1	goto subperror
	if $_RPTSUBP -gt 6	goto subperror
	dpywclr
	set _RPTYYPPSP "$_RPTYY/$_RPTPRD/$_RPTSUBP"
	return
    @subperror
	poplast
	bell
	goto subpentry

### INITTRAIN
###	Initialize training mode
###	Usage:	call INITTRAIN save_previous
.PROC INITTRAIN
	set FMS_SAVE  "$FMS_DATA"
	set FMS_DATA  "$SEC/train"

	phlanget 2119 "Y" "Yes" _TEMP_YES
	if "$_1" == "$_TEMP_YES"	goto trainmode
	phlanget 2319 "  ..... Restoring Training Database ..." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_WAIT"
	system "$FMS/etc/systrain"
	if $_SYSSTAT == 0	goto trainmode
	phlanget 2320 "Error Restoring Training Database" "" _TEMP_STA
	dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
	set FMS_DATA  "$FMS_SAVE"
	set _SYSSTAT	-1
	return
    @trainmode
	set FMS_TRAIN "Y"
	set FMS_STORE "TRAIN!"
	set MENU_MODE "PRACTICE MODE"
	### Read the date/time for this session.
	read $FMS_DATA/FMSTIME FMS_TIME
	dpywclr
	refresh
	call CHKNOTIFY
	set _SYSSTAT 0

### NEXTLINE
### 	Calculate the row for the next popup window based on the last response
###	Usage:	call NEXTLINE last_response
.PROC NEXTLINE
	expr _WROW "$_WROW + $_1"
	expr _WROW "$_WROW + 2"

### NORCHECK
###	Check that the NORAND interface is enabled.
###	Usage:	call NORCHECK [U|S]
.PROC NORCHECK
	set _SYSSTAT 0
	if "$FMS_POSTYPE" == "SUS"	return
	if "$NORADDR" == ""	set _SYSSTAT -1
	if "$NORADDR" == 00	set _SYSSTAT -1
	if "$_SYSSTAT" == 0	return
	if "$_1" == U then
		phlanget 2321 "  NORAND Interface Disabled --" "" _TEMP_STA
		dpywerr "$_TEMP_STA $_MS_CALLSUPP"
	endif
	if "$_1" == S then
		phlanget 2321 "  NORAND Interface Disabled --" "" _TEMP_STA
		dpywerr "$_TEMP_STA Address=$NORADDR"
	endif

### NORGPUNCH:
###	Poll the norand for the punch file.
###	Usage:	call NORGPUNCH
.PROC NORGPUNCH
	call NORCHECK U
	if $_SYSSTAT == -1	return
	phlanget 2322 " ... Retrieving Clock In/Out Data ..." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_WAIT"
	system "syspos synctk >/dev/null 2>&1"
	if $_SYSSTAT == 0 system "syspos -i getpunch >/dev/null 2>&1"
	if $_SYSSTAT != 0 then
		phlanget 2323 "Unable to Retrieve Clock In/Out Data" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		set _SYSSTAT -1
		return
	endif
	set _SYSSTAT 0
	dpywclr

### NORUPDATE:
###	Update the POS employee system files from the BOHP.
###	NOTICE:  Do NOT run norempl as a SAFECMD.
###	Usage:	call NORUPDATE
.PROC NORUPDATE
	call NORCHECK U
	if $_SYSSTAT == -1	return
	phlanget 2324 " ... Updating Employee Information Files with Changes" "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_UE_PATIENT" 
	system "syspos -i syncempl >/dev/null 2>&1"
	if $_SYSSTAT == 0 then
		dpywclr
		return
	endif
	if $_SYSSTAT == $_UE_POSCOMM then
		phlanget 2325 "Can\'t Access NORAND" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	endif
	if $_SYSSTAT == $_UE_POSBUSY then
	      phlanget 2326 " The NORAND Employee File is BUSY and Cannot be Changed !!!" "" _TEMP_STA
	      phlanget 2327 "          The changes you have made are saved." "" _TEMP_STB
	      phlanget 2328 "         Please try to update the NORAND later." "" _TEMP_STC
	      phlanget 2329 " If you have questions," "" _TEMP_STD
	      dpywerr "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC" "$_TEMP_STD" "$_MS_CALLSUPP"	
		return
	endif
	if $_SYSSTAT == $_UE_POSCLK then
		phlanget 2330 "  You Have Attempted to Terminate a Clocked-in Employee !!!" "" _TEMP_STA
		phlanget 2331 "  Make sure that any terminated employees have clocked out." "" _TEMP_STB
		phlanget 2332 "  If you have questions," "" _TEMP_STC
		dpywerr "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC" "$_MS_CALLSUPP"
		return
	endif
	logwarn "NORUPDATE FAILED: $_SYSERROR"
	phlanget 2333 "Error Updating NORAND Employee Master File" "" _TEMP_STA
	dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"

### ORDERPROC
###	Interface to the SUS system
###	Usage:  call ORDERPROC
.PROC ORDERPROC
	if $FMS_POSTYPE == NORAND then
		phlanget 2334 "Order Processing supported for SUS or NOR-SUS only!" "" _TEMP_STA
		dpywerr "$_TEMP_STA"
		return
	endif

	if $EMPL_ID == "ADMIN"          goto dept90 
	if "$EMPL_SSN" == ""		return
	if $EMPL_SECURITY -eq 0		return
	if $EMPL_SECURITY -ge 8		return
	access f $FMS_DATA/.timekeeping
	if $_SYSSTAT == 0	goto checkdept

	if $FMS_POSTYPE == SUS	goto checksus
	system "nor ping >/dev/null 2>&1"
	if $_SYSSTAT == 0	goto norclk
	system "nor boot >/dev/null 2>&1"
	if $_SYSSTAT == 0	goto norclk
	phlanget 2335 "Unable to determine clock in status ..." "" _TEMP_STA
	dpywerr "$_TEMP_STA"
	goto checkdept
     @norclk
	phlanget 2336 "   ....... Retrieving the Clock In/Out Data ......." "" _TEMP_STA
	dpywmsg "$_TEMP_STA"
	system "syspos NOR_CLOCK"
	dpywclr
	if $_SYSSTAT == 1	goto checkdept
	phlanget 2337 "You must be clocked in on the NORAND before ORDERING ..." "" _TEMP_STA
	dpywerr "$_TEMP_STA"
	return
     @checksus
	#system "/usr/bin/env > /tmp/env_fms.txt; tkpunclk -c"
	# Para que no solicite entrada si es gerente
	if $EMPL_SECURITY == 3	goto checkdept
	system "tkpunclk -c"
	if $_SYSSTAT == 0	goto checkdept
	phlanget 2338 "You must be clocked in before ORDERING ..." "" _TEMP_STA
	dpywerr "$_TEMP_STA"
	return

	###
	###  If hourly employee and set up with security of 0 or 1 then get
	###  the hourly employee menu.
	###  If hourly employee and set up with security of 2 or greater then
	###  allow cashier function.
	###
    @checkdept
	if $EMPL_DEPT == 92 then
		if $EMPL_SECURITY -lt 2       goto dept$EMPL_DEPT -
		if $EMPL_SECURITY -ge 2       goto depta$EMPL_DEPT -
	endif

	### if SAM (91) or HAM (93) and the employee's dept code is found
	### in $FMS_DATA/allowmgr, provide manager access (dept 90).
	set _FOUND 0
	if $EMPL_DEPT == 91 then
		access f $FMS_DATA/allowmgr
		if $_SYSSTAT == 0 systemv _FOUND "grep -c 91 $FMS_DATA/allowmgr 2>/dev/null"
	endif
	if $EMPL_DEPT == 93 then
		access f $FMS_DATA/allowmgr
		if $_SYSSTAT == 0 systemv _FOUND "grep -c 93 $FMS_DATA/allowmgr 2>/dev/null"
	endif
	if $_FOUND -ge 1  goto dept90

	goto dept$EMPL_DEPT -
	if "$EMPL_DEPT" != ""	return
	### If AM, QCM or Home Office, goto manager order processing
	if $EMPL_ACCESS -ge 2	goto dept90
    @dept92
	### Order Processing for hourly employees
	phlanget 2339 "1)  User" "" _TEMP_STA
	phlanget 2340 "2)  Training"  "" _TEMP_STB
	if "$_SUSTOUCH" == "y"	ask 5 49 _USER menu 1 - 0 "" "$_TEMP_STA"
	if "$_SUSTOUCH" != "y"  ask 5 49 _USER menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
	if $_SYSSTAT != 0	return
	poplast
	if $_USER == 0		set _USER "user"
	if $_USER == 1		set _USER "trn"
	call SUS $_USER
	unset _USER
	return
    @depta92
	### Order Processing for hourly/cashier employees
	phlanget 2339 "1)  User"  "" _TEMP_STA
	phlanget 2341 "2)  Cashier"  "" _TEMP_STB
	phlanget 2342 "3)  Training"  "" _TEMP_STC
	if "$_SUSTOUCH" == "y" ask 5 49 _USER menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
	if "$_SUSTOUCH" != "y" ask 5 49 _USER menu 3 - 0 "" "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC"
	if $_SYSSTAT != 0	return
	poplast
	if $_USER == 0		set _USER "user"
	if $_USER == 1		set _USER "cash"
	if $_USER == 2		set _USER "trn"
	call SUS $_USER
	unset _USER
	return
    @dept90
	### Order Processing for managers
	phlanget 2339 "1)  User" "" _TEMP_STA
	phlanget 2341 "2)  Cashier" "" _TEMP_STB
	phlanget 2343 "3)  Supervisor" "" _TEMP_STC
	phlanget 2344 "4)  Administration" "" _TEMP_STD
	phlanget 2345 "5)  Manager" "" _TEMP_STE
	phlanget 2346 "6)  Training" "" _TEMP_STF
	if "$_SUSTOUCH" == "y" ask 5 49 _USER menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
	if "$_SUSTOUCH" != "y" ask 5 49 _USER menu 6 - 0 "" "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC" \
				"$_TEMP_STD" "$_TEMP_STE" "$_TEMP_STF"

	if $_SYSSTAT != 0	return
	poplast
	if $_USER == 0		set _USER "user"
	if $_USER == 1		set _USER "cash"
	if $_USER == 2		set _USER "sup"
	if $_USER == 3		set _USER "admn"
	if $_USER == 4		set _USER "manager"
	if $_USER == 5		set _USER "trn"
	call SUS $_USER
	unset _USER
	return
    @dept91
    @dept93
    @dept94
	### Order Processing for SAM/HAMs
	phlanget 2339 "1)  User" "" _TEMP_STA
	phlanget 2341 "2)  Cashier" "" _TEMP_STB
	phlanget 2343 "3)  Supervisor" "" _TEMP_STC
	phlanget 2344 "4)  Administration" "" _TEMP_STD
	phlanget 2348 "5)  Training" "" _TEMP_STE
	if "$_SUSTOUCH" == "y" ask 5 49 _USER menu 2 - 0 "" "$_TEMP_STA" "$_TEMP_STB"
	if "$_SUSTOUCH" != "y" ask 5 49 _USER menu 5 - 0 "" "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC" \
				  "$_TEMP_STD" "$_TEMP_STE" 

	if $_SYSSTAT != 0	return
	poplast
	if $_USER == 0		set _USER "user"
	if $_USER == 1		set _USER "cash"
	if $_USER == 2		set _USER "sup"
	if $_USER == 3		set _USER "admn"
	if $_USER == 4		set _USER "trn"
	call SUS $_USER
	unset _USER
	return

### PAYTRAN
###	Perform labor udpates against the paytran database.
###	Usage:  call PAYTRAN
.PROC PAYTRAN
	phlanget 2350 "      ....... Loading the Program for Labor Updates ........" "" _TEMP_STA
	dpywmsg "$_TEMP_STA"
	### Execute update labor program
	### mazd
	call SAFECMDC "tkupdlbr" "tkpaytrn.dat sysparm.dat" $_UE_LABOR "payroll"
	if $_SYSSTAT == 0	return
	if $_SYSSTAT != $_UE_LABOR then
		phlanget 2351 "Error Loading Labor Updates Program" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	endif
	### Check new transactions for errors
	phlanget 2352 "      ...... Checking Labor Transactions for Errors ......." "" _TEMP_STA
	dpywmsg "$_TEMP_STA"
	systemv _MSG "tkchktrn"
	unset _MSG
	### Update performance file
	phlanget 2353  " ...... Updating Performance file with Labor Updates ......." "" _TEMP_STA
	dpywmsg "$_TEMP_STA"
	### mazd
	call SAFECMDC "tkacthrs 1 0" "lbrprfrm.dat lbrprday.dat sysparm.dat" "" "payroll"
	dpywclr

### READPASSWD
###	Read the password file
###     Will set _ADMIN_PWD, _MAINT_PWD, _AM_PWD,  _QCM_PWD and _BUFFET_PWD
###	Usage:	call READPASSWD
.PROC READPASSWD
	### Define default passwords
	set _ADMIN_PWD		""
	set _MAINT_PWD		""
	set _AM_PWD		""
	set _QCM_PWD		""
	set _BUFFET_PWD		""
	### Check if password file exists
	access f $FMS_DATA/syspass.txt
	if $_SYSSTAT == 0	goto readpasswd
	logwarn "Database file syspass.txt not found!"
	goto skippasswd
	### Read the password file
    @readpasswd
	read $FMS_DATA/syspass.txt _ADMIN_PWD _MAINT_PWD _AM_PWD _QCM_PWD \
		_BUFFET_PWD
	upperc _ADMIN_PWD _MAINT_PWD _AM_PWD _QCM_PWD _BUFFET_PWD
	### Make sure all passwords are valid
    @skippasswd
	if "$_ADMIN_PWD" == "" 	set _ADMIN_PWD	SECRET
	if "$_MAINT_PWD" == "" 	set _MAINT_PWD	SECRET
	if "$_AM_PWD" == "" 	set _AM_PWD	SECRET
	if "$_QCM_PWD" == "" 	set _QCM_PWD	SECRET
	if "$_BUFFET_PWD" == ""	set _BUFFET_PWD	TRACK

### RECOVER:
###	Recover files backed up via DOBACKUP.
###	Usage:	call RECOVER "file1 file2 ..."
.PROC RECOVER
	if "$_1" == ""		return
	system "(cd $FMS_DATA/Backup; \
		for i in $_1; do \
			if [ -f \$i ]; then \
				mv -f \$i ..; \
			fi; \
		done; sync) >/dev/null 2>&1"
	if $_SYSSTAT == 0		return
	phlanget 2354 "Backup Recovery Failed" "" _TEMP_STA
	dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
	logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
	exit 255

### RMBACKUP:
###	Delete files backed up via DOBACKUP.
###	Usage:	call RMBACKUP "file1 file2 ..."
.PROC RMBACKUP
	if "$_1" == ""		return
	system "(cd $FMS_DATA/Backup; \
		for i in $_1; do \
			if [ -f \$i ]; then \
				rm -f \$i; \
			fi; \
		done; sync) >/dev/null 2>&1"
	if $_SYSSTAT == 0		return
	phlanget 2355 "Backup Deletions Failed" "" _TEMP_STA
	dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
	logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
	exit 255

### RSLOCK
###	Set a resource lock for fms
###	Note that this is a no-op if in training mode
###	Usage:  call RSLOCK
.PROC RSLOCK
	set _SYSSTAT 0
	if "$_1" == "remote"	goto chkrlock
	if $FMS_TRAIN == Y	return
	if "$_1" != "invmgmt"	goto chknext
	access f $FMS/data/.invnotclosed
	if $_SYSSTAT == 0	return
    @chknext
	if "$SANDPATH" != "" access f $SANDPATH/lock/systask
	if "$SANDPATH" == "" access f $FMS/lock/systask
	if $_SYSSTAT != 0	goto chkrlock
	if "$_1" == "sysrecov"  goto skiprec
	access f $FMS_DATA/.recovery
	if $_SYSSTAT == 0 then
		phlanget 2356 "   Access to" "" _TEMP_STA
		phlanget 2357 "database will be restored when" "" _TEMP_STB
		phlanget 2358 "   missing day has been recovered." "" _TEMP_STC
		dpywerr "$_TEMP_STA $_1 $_TEMP_STB" "$_TEMP_STC"
		set _SYSSTAT -1
		return
	endif
	phlanget 2359 "   Hourly update is in process ..." "" _TEMP_STA
	phlanget 2360 "   Please wait until it has completed and try again." "" _TEMP_STB
	dpywerr "$_TEMP_STA" "$_TEMP_STB"
	set _SYSSTAT -1
	return
    @chkrlock
	lock "$_1"   
	if $_SYSSTAT == 0	return
	if "$SANDPATH" != ""  access f $SANDPATH/lock/"$_1"
	if "$SANDPATH" == ""  access f $FMS/lock/"$_1"
	if $_SYSSTAT == 0 then
		phlanget 2361 "  Another FMS User is Accessing the" "" _TEMP_STA
		phlanget 2362 "Database ..." "" _TEMP_STB
		phlanget 2363 "  Please wait until they have completed their work." "" _TEMP_STC
		dpywerr "$_TEMP_STA $_1 $_TEMP_STB" "$_TEMP_STC"
		set _SYSSTAT -1
		return
	endif
	phlanget 2364 "   An Error Occurred in FMS Lock Directory ..." "" _TEMP_STA
	dpywerr -l "$_TEMP_STA" "   $_MS_CALLSUPP"
	logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
	exit 255
    @skiprec
	lock "$_1"   
	if $_SYSSTAT == 0	return
	if "$SANDPATH" != ""  access f $SANDPATH/lock/"$_1"
	if "$SANDPATH" == ""  access f $FMS/lock/"$_1"
	if $_SYSSTAT == 0 then
		phlanget 2359 "   Hourly update is in process ..." "" _TEMP_STA
		phlanget 2360 "   Please wait until it has completed and try again." "" _TEMP_STB
		dpywerr "$_TEMP_STA" "$_TEMP_STB"
		set _SYSSTAT -1
		return
	endif
	phlanget 2364 "   An Error Occurred in FMS Lock Directory ..." "" _TEMP_STA
	dpywerr -l "$_TEMP_STA" "   $_MS_CALLSUPP"
	logwarn "FMS SignOFF (ID=$EMPL_SIGNOUT)"
	exit 255

### RSUNLOCK
###	Unset the fms resource lock
###	Note that this is a no-op if in training mode
###	Usage:  call RSUNLOCK
.PROC RSUNLOCK
	set _SYSSTAT 0
	if $FMS_TRAIN == Y	return
	unlock "$_1" 
	if $_SYSSTAT == 0	return
	phlanget 2364 "   An Error Occurred in FMS Lock Directory ..." "" _TEMP_STA
	dpywerr -l "$_TEMP_STA" "   $_MS_CALLSUPP"
	return  

### TKCLOSE
### 	Run a timekeeping period close.
###	Usage:	call TKCLOSE
.PROC TKCLOSE
	phlanget 2365 "   Checking for Inactive Employees ......" "" _TEMP_STA 
	dpywmsg "$_MS_PATIENT"
	system "tkchkcls 2>/dev/null"
	if $_SYSSTAT == $_UE_TKCLOSE then
		phlanget 2366 "It is Too Soon to Close This Pay Period" "" _TEMP_STA
	        dpywerr -l "$_TEMP_STA"
		return
	endif
	### Get close request info from sysparm file
	systemv _CLOSEREQ "sysparm -p close_req 2>/dev/null"
	if $_SYSSTAT != 0 then
		dpywerr "$_MS_SYSPARMACC" "$_MS_CALLSUPP"
		return
	endif
	zap _CLOSEREQ 4 1
	call SAFECMD "sysparm -c close_req '$_CLOSEREQ' 2>/dev/null" \
		     "sysparm.dat"
	call CHECKPARM
	if $_SYSSTAT != 0		return
	systemc "tkchkact | sysviewf -n tkchkact -r 7 -c 0 -h 15 -w 80"
	dpywclr 
	restore
	phlanget 2367 "Are you sure you want to close" "" _TEMP_STA
	phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
	phlanget 2119 "Y" "Yes" _TEMP_YES
	ask 10 17 _ANSWER boolean 1 "$_TEMP_STA $_TEMP_YESNO? "
	if $_SYSSTAT != 0		return
	if $_ANSWER != $_TEMP_YES	return
	poplast
	system "tkchkcls 2>/dev/null"
	if $_SYSSTAT == $_UE_TKCLOSE then
		phlanget 2366 "It is Too Soon to Close This Pay Period" "" _TEMP_STA
	        dpywerr -l "$_TEMP_STA"
		return
	endif
	if $_SYSSTAT == $_UE_EARLY            call EARLYMSG
	if $_ANSWER != 	$_TEMP_YES	      return
	if $_SYSSTAT != 0 then
	       	phlanget 2369  " ...... Can't do early close ........" "" _TEMP_STA
	       	dpywerr "$_TEMP_STA"
		return
	endif		
	phlanget 2370 "  Checking the Current Payroll Period ..." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_PATIENT"
	### Run tktimsht to check all data files are correct
	### and time sheet could be printed out if needed !!!
	### If time sheet could not be printed, return immediately.
	systemc "tktimsht 0 >/dev/null 2>&1"
	if $_SYSSTAT == $_UE_LABOR then
		phlanget 2371 "Can\'t Close Payroll Period .. Employee has Negative Hours!" "" _TEMP_STA
		dpywerr -l "$_TEMP_STA"
		return
	endif
	if $_SYSSTAT != 0 then
		phlanget 2372 "Can\'t Close Payroll Period" "" _TEMP_STA
		dpywerr -l "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	endif

	dpywclr
	if $FMS_TRAIN == Y 		goto askclose

###
###  FMS Lite International Enhancements 
###
###  If not in training...
###  Create a pollable file of all TK trans for the period in SUS poll dir
###
	systemc "tkdmptrn $FMS_DATA/tkpaytrn.dat > $FMS/op/poll/tkpaytrn.dat"
	system "cat $FMS/op/poll/tkpaytrn.dat | compress - > $FMS/op/poll/tkpaytrn.dat.Z"
###
###  End section for FMS enhancements
###

	call NORGPUNCH
	if $_SYSSTAT == 0		goto closepay
	@askclose
	phlanget 2373 "Cannot get the timekeeping file, Close Anyway" "" _TEMP_STA
	phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
	phlanget 2119 "Y" "Yes" _TEMP_YES
	ask 10 9 _ANSWER boolean 1 "$_TEMP_STA $_TEMP_YESNO? "
	if $_SYSSTAT != 0		return
	poplast
	if $_ANSWER == $_TEMP_YES	goto closepay
	return
    @closepay
	phlanget 2374 " .... Closing the Current Payroll Period ..." "" _TEMP_STA
	dpywmsg "$_TEMP_STA $_MS_PATIENT"

	set _BACKFILES "sysparm.dat hrcempl.dat hrcrate.dat tkpaytrn.dat lbrprfrm.dat lbrprday.dat"
	call DOBACKUP "$_BACKFILES"
	system "tkclspay >/dev/null 2>&1"
	if $_SYSSTAT != 0 then
		call RECOVER "$_BACKFILES"
		phlanget 2375 "Error Attempting to Close Pay Period -- CLOSE FAILED" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	endif
	system "tkacthrs 0 1 >/dev/null 2>&1"
	if $_SYSSTAT != 0 then
		call RECOVER "$_BACKFILES"
		phlanget 2376 "Error Updating Performance File from Actual Hours" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	endif
	system "tkmfptrn >/dev/null 2>&1"
	if $_SYSSTAT != 0 \
		logwarn "tkclose: Create Mainframe File Failed !!"
	system "tkmftlog >/dev/null 2>&1"
	if $_SYSSTAT != 0 \
		logwarn "tkclose: Create Mainframe File Failed !!"
	call SAFECMD "sysparm -c close_req '0 0 0 0' >/dev/null 2>&1" \
		     "sysparm.dat"
        phlanget 2377 "Close Was Successful !! ..." "" _TEMP_STA
        dpywmsg -b "$_TEMP_STA $_MS_ENTER"
	pause
	dpywclr
	return

### SAFECMD
###	Safely execute a command, backing up files prior to execution.
###	If an error occurs, the data files are restored from the backups.
###	Usage:	call SAFECMD "command" "files ..." [SpecialCode]
.PROC SAFECMD
	call DOBACKUP "$_2"
	### mazd
	if "$_4" != "" then
	   system "trap 'rm /usr/fms/lock/$_4' 1; $_1"
	endif 
	if "$_4" == "" then
	   system "$_1"
	endif
	### end mazd
	set _STATBKUP $_SYSSTAT
	if "$_SYSSTAT" == "$_3" then
		call RMBACKUP "$_2"
		set _SYSSTAT $_3
		return
	endif
	if $_SYSSTAT != 0 then
   		set _ERRMSG $_SYSERROR
		call RECOVER "$_2"
		set _SYSSTAT $_UE_FATAL
		set _SYSERROR $_ERRMSG
   		unset _ERRMSG
		return
	endif
	call RMBACKUP "$_2"
	set _SYSSTAT 0

### SAFECMDC
###	Execute SAFECMD followed by a refresh.
###	Usage:	call SAFECMDC "command" "files ..." [SpecialCode]
.PROC SAFECMDC
	### mazd
	call SAFECMD "$_1" "$_2" "$_3" "$_4"
	refresh

### SHELL
###	Pop a UNIX shell for FMS or SUS environment.
###	Usage:	call SHELL Line
.PROC SHELL
	set _SHTYPE	"FMS"
	if "$FMS_POSTYPE" == NORAND  	goto execshell
	ask "$_1" 54 _SHTYPE menu 2 - 0 " Unix Shell " \
		"1)  FMS Environment" \
		"2)  SUS Environment"
	if $_SYSSTAT != 0	return
	poplast
	if $_SHTYPE == 0	set _SHTYPE "FMS"
	if $_SHTYPE == 1	set _SHTYPE "SUS"
    @execshell
	system "ansi color=hi_white,black clear"
	system "tput rmacs 2>/dev/null"
	system "echo Enter exit or CNTL-D to return to menu.\\\\r\\\\n"
	shell "exec $FMS/etc/sysshell $_SHTYPE"
	system "ansi reset"
	system "sysfkeys FMS"
	refresh
	unset _SHTYPE

### SIGNON
###	Process SYSUIF user signon screen.
###	Usage:	call SIGNON
.PROC SIGNON
	call READPASSWD
	### Define sigin-password accounts.
	set _ADMIN_ACCT		ADMIN-$_ADMIN_PWD
	set _MAINT_ACCT		MAINT-$_MAINT_PWD
	set _AM_ACCT		AM-$_AM_PWD
	set _QCM_ACCT		QCM-$_QCM_PWD
	set _BUFFET_ACCT	BUFFET-$_BUFFET_PWD
	set _CREW_ACCT		$_RLSB_LOG-$_RLSB_PWD
	set _PFS_ACCT		$_RLSC_LOG-$_RLSC_PWD
	set _NEW_ACCT		$_RLSD_LOG-$_RLSD_PWD
	unset _ADMIN_PWD _MAINT_PWD _AM_PWD _QCM_PWD _BUFFET_PWD 
	### Process signon screen.
	clear
###### Modificacion MEXICO
	signon EXIT QUIT TRANXX $_ADMIN_ACCT $_MAINT_ACCT \
		$_AM_ACCT $_QCM_ACCT $_BUFFET_ACCT $_CREW_ACCT \
		$_PFS_ACCT $_NEW_ACCT XXGGYY APAGARCPU MODEMCPU

	## Da de baja el sistema si se teclea "xxggyy" (desde una consola
	## con el teclado desconfigurado) o "apagarcpu" (desde la consola
	## bien o desde una terminal)
	if "$EMPL_SIGNON" == "XXGGYY" then
		system "setcolor lt_red black"
		system "clear"
		system "echo  '[5m'"
		system "echo '\\\n...... DANDO DE BAJA EL SISTEMA ......'"
		system "echo  '[0m[=2F[0m[J[7m[m'"
		system "echo '\\\n\\\rAL TERMINAR, FAVOR DE APAGAR EL CPU'"
		system "echo '\\\n\\\r(COMPUTADORA), CONECTAR BIEN EL TECLADO'"
		system "echo '\\\n\\\rY VOLVER A ENCENDER EL EQUIPO...'"
		system "sync;sync;phzap /etc/shutdown -g0 -y"
		sleep 15
	endif
	if "$EMPL_SIGNON" == "APAGARCPU" then
		system "setcolor lt_red black"
		system "clear"
		system "echo  '[5m'"
		system "echo '\\\n...... DANDO DE BAJA EL SISTEMA ......'"
		system "echo  '[0m[=2F[0m[J[7m[m'"
		system "sync;sync;phzap /etc/shutdown -g0 -y"
		sleep 15
	endif
	# MODEMCPU resetea al modem
	if "$EMPL_SIGNON" == "MODEMCPU" then
		system "setcolor lt_red black"
		system "clear"
		system "echo  '[5m'"
		system "echo '\\\n...... RESETEANDO AL MODEM ......'"
		system "echo  '[0m[=2F[0m[J[7m[m'"
		system "echo '\\\r'"
		system "/etc/sushell modem >/dev/null"
		system "echo '\\\r'"
		sleep 2
	endif
######
	goto "$EMPL_SIGNON" -
	### Fms user.
	set EMPL_SIGNOUT "$EMPL_ID"
	logwarn "FMS SignON (ID=$EMPL_SIGNOUT, TTY=$_SYSTTY)"
	if $EMPL_SECURITY -le 2	set EMPL_ACCESS 0
	if $EMPL_SECURITY -eq 3	set EMPL_ACCESS 1
	if $EMPL_SECURITY -eq 4	set EMPL_ACCESS 2
	### Check if the employee is clocked in
	call CHKCLOCK
	call CHKNOTIFY
	return
###### Modificacion MEXICO
    @XXGGYY
	clear
	exit 0
    @APAGARCPU
	clear
	exit 0
    @MODEMCPU
	clear
	exit 0
######
    @EXIT
	### Exit the fms application.
	logwarn "FMS SignON (ID=$EMPL_SIGNON)"
	clear
	exit 0
    @QUIT
	### Exit the fms application daemon.
	clear
	exit 255
    @TRANXX
	### Delete error transactions.
	logwarn "FMS SignON (ID=$EMPL_SIGNON, TTY=$_SYSTTY)"
	call DELERR
	exit 0
    @$_ADMIN_ACCT
	### Administrative account.
	set EMPL_ID "ADMIN"
	substr EMPL_PASSWORD 6 "$EMPL_SIGNON"
	set EMPL_SIGNOUT "$EMPL_ID"
	logwarn "FMS SignON (ID=$EMPL_SIGNOUT, TTY=$_SYSTTY)"
	set EMPL_ACCESS 5
	call CHKNOTIFY
	return
    @$_MAINT_ACCT
	### Hardware maintenance account.
	set EMPL_ID "MAINT"
	substr EMPL_PASSWORD 6 "$EMPL_SIGNON"
	set EMPL_SIGNOUT "$EMPL_ID"
	logwarn "FMS SignON (ID=$EMPL_SIGNOUT, TTY=$_SYSTTY)"
	set EMPL_ACCESS 4
	menu FMSADMIN
	exit 0
    @$_AM_ACCT
	### Area Manager account.
	set EMPL_ID "AM"
	substr EMPL_PASSWORD 3 "$EMPL_SIGNON"
	set EMPL_SIGNOUT "$EMPL_ID"
	logwarn "FMS SignON (ID=$EMPL_SIGNOUT, TTY=$_SYSTTY)"
	set EMPL_ACCESS 2
	call CHKNOTIFY
	return
    @$_QCM_ACCT
	### Quanlity Control Manager account.
	set EMPL_ID "QCM"
	substr EMPL_PASSWORD 4 "$EMPL_SIGNON"
	set EMPL_SIGNOUT "$EMPL_ID"
	logwarn "FMS SignON (ID=$EMPL_SIGNOUT, TTY=$_SYSTTY)"
	set EMPL_ACCESS 3
	call CHKNOTIFY
	return
    @$_BUFFET_ACCT
	### Check for existence of all buffet files
	access f $FMS/.buffet
	if $_SYSSTAT == 0 then
	  dpywerr "         ... Buffet planning has already been installed ... "
	  exit 0
	endif
	dpywmsg	\
	" "\
	" "\
	"         You have requested that Buffet planning be installed" \
	" " \
	"           The Buffet Section of Prep Planning will not be " \
	"           generated until the next freeze of your forecast!." \
	" " 
	ask 11 16 _ANSWER boolean 1 \
			"Are you sure you want to do this [Y/N] ? " N
	dpyxclr
		if $_SYSSTAT == 0		poplast
		if $_SYSSTAT != 0		exit 0
		if $_ANSWER == N		exit 0
	access f "$FMS_DATA/buffcntl.txt" "$FMS_DATA/bufftemp.hld" 
	if $_SYSSTAT != 0 then
            logwarn "Buffet text files are not all present"
	    dpywerr "          ...     Buffet is not yet available     ... " \
            	    "          ...Buffet text files are not all present..."
	    exit 0
	endif
	access f $FMS_DATA/buffschd.hld
	if $_SYSSTAT != 0 system "cp $FMS_DATA/bufftemp.hld \
			 $FMS_DATA/buffschd.hld > /dev/null 2>&1"
	access x "$FMS/bin/bufffcst" "$FMS/bin/invbuftp" \
		"$FMS/bin/sysbufld"
	if $_SYSSTAT != 0 then
            logwarn "Buffet programs are not all present"
	    dpywerr "          ...    Buffet is not yet available    ... " \
            	    "          ...Buffet programs are not all present..."
	    exit 0
	endif
	logwarn "FMS SignON (ID=$EMPL_SIGNON, TTY=$_SYSTTY)"
	system "echo > $FMS/.buffet"
	system "mv $FMS_DATA/bufftemp.hld $FMS_DATA/bufftemp.txt \
			 > /dev/null 2>&1"
	system "mv $FMS_DATA/buffschd.hld $FMS_DATA/buffschd.txt \
			 > /dev/null 2>&1"
	access f "$FMS_DATA/prepaloc.hld" 
	if $_SYSSTAT == 0 then
		system "mv -f $FMS_DATA/prepaloc.hld $FMS_DATA/prepaloc.txt \
			 > /dev/null 2>&1"
	endif
	dpywmsg	\
	" "\
	" "\
	"           Buffet implementation is now complete!" \
	" " \
	" " 
	sleep 5
	dpyxclr
	exit 0 
    @$_CREW_ACCT
	if $FMS_STORETYPE != DELCO	goto crewact
	if "$_RLSB" == "activ"	goto crewact
	if "$_RLSB" == "deact"	goto crewnotact
	if "$_RLSB" == "inact"	goto crewnotact
	if "$_RLSB" == "instl"	goto crewinst
	dpywerr "Unable to determine application status.  $_MS_CALLSUPP"
	exit 0
     @crewact
	dpywerr "Application already installed."
	exit 0
     @crewnotact
	dpywerr "Application not available for install."
	exit 0
     @crewinst
	access f $FMS/patch/p9330b.pat
	if $_SYSSTAT != 0 then
		dpywerr "Install missing.  $_MS_CALLSUPP"
	    	exit 0
	endif
	call RSLOCK "systask"
	if $_SYSSTAT != 0	exit 0
	dpywmsg	\
	" "\
	" "\
	"         You have requested that Crew Scheduling be installed." \
	" " \
	" " 
	ask 11 16 _ANSWER boolean 1 \
		"Are you sure you want to do this [Y/N] ? " N
	dpyxclr
		if $_SYSSTAT == 0		poplast
		if $_SYSSTAT != 0		exit 0
		if $_ANSWER == N then
			call RSUNLOCK "systask"
			exit 0
		endif
	dpywmsg "          ...   Crew Scheduling is now being installed   ... "\
		"          ...            Please Be Patient !             ... "
	sleep 5
	logwarn "FMS SignON (ID=$EMPL_SIGNON, TTY=$_SYSTTY)"
	system "mv $FMS/patch/p9330b.ctr /tmp/p9330b.ctr > /dev/null 2>&1"
	system "nohup sushell /usr/fms/etc/patapply p9330b > /dev/null 2>&1"
	set INSTSTAT $_SYSSTAT
	call RSUNLOCK "systask"
	if $INSTSTAT == 0 then
		system "rm -f $FMS/patch/p9330b.pat > /dev/null 2>&1"
		system "rm -f /tmp/p9330b.ctr > /dev/null 2>&1"
		dpymsg "Install successful/complete."
		sleep 5
		dpyxclr
	endif
	if $INSTSTAT != 0 then
		system "mv /tmp/p9330b.ctr $FMS/patch/p9330b.ctr > /dev/null 2>&1"
		dpywerr "Install Failed.  $_MS_CALLSUPP"
	endif
	exit 0 
    @$_PFS_ACCT
	if "$_RLSC" == "activ"	goto pfsact
	if "$_RLSC" == "deact"	goto pfsnotact
	if "$_RLSC" == "inact"	goto pfsnotact
	if "$_RLSC" == "instl"	goto pfsinst
	dpywerr "Unable to determine application status.  $_MS_CALLSUPP"
	exit 0
     @pfsact
	dpywerr "Application already installed."
	exit 0
     @pfsnotact
	dpywerr "Application not available for install."
	exit 0
     @pfsinst
	access f $FMS/patch/p9330c.pat
	if $_SYSSTAT != 0 then
		dpywerr "Install missing.  $_MS_CALLSUPP"
	   	exit 0
	endif
	call RSLOCK "systask"
	if $_SYSSTAT != 0	exit 0
	dpywmsg	\
	" "\
	" "\
	"         You have requested that PFS Sourcelink be installed." \
	" " \
	" " 
	ask 11 16 _ANSWER boolean 1 \
		"Are you sure you want to do this [Y/N] ? " N
	dpyxclr
		if $_SYSSTAT == 0		poplast
		if $_SYSSTAT != 0		exit 0
		if $_ANSWER == N then
			call RSUNLOCK "systask"
			exit 0
		endif
	dpywmsg "          ...   PFS Sourcelink is now being installed   ... "\
		"          ...            Please Be Patient !            ... "
	sleep 5
	logwarn "FMS SignON (ID=$EMPL_SIGNON, TTY=$_SYSTTY)"
	system "mv $FMS/patch/p9330c.ctr /tmp/p9330c.ctr > /dev/null 2>&1"
	system "nohup sushell /usr/fms/etc/patapply p9330c > /dev/null 2>&1"
	set INSTSTAT $_SYSSTAT
	call RSUNLOCK "systask"
	if $INSTSTAT == 0 then
		system "rm -f $FMS/patch/p9330c.pat > /dev/null 2>&1"
		system "rm -f /tmp/p9330c.ctr > /dev/null 2>&1"
		dpymsg "Install successful/complete."
		sleep 5
		dpyxclr
	endif
	if $INSTSTAT != 0 then
		system "mv /tmp/p9330c.ctr $FMS/patch/p9330c.ctr > /dev/null 2>&1"
		dpywerr "Install Failed.  $_MS_CALLSUPP"
	endif
	exit 0 
    @$_NEW_ACCT
	if "$_RLSD" == "activ"	goto newact
	if "$_RLSD" == "deact"	goto newnotact
	if "$_RLSD" == "inact"	goto newnotact
	if "$_RLSD" == "instl"	goto newinst
	dpywerr "Unable to determine application status.  $_MS_CALLSUPP"
	exit 0
     @newact
	dpywerr "Application already installed."
	exit 0
     @newnotact
	dpywerr "Application not available for install."
	exit 0
     @newinst
	access f $FMS/patch/p9330d.pat
	if $_SYSSTAT != 0 then
		dpywerr "Install missing.  $_MS_CALLSUPP"
	   	exit 0
	endif
	call RSLOCK "systask"
	if $_SYSSTAT != 0	exit 0
	dpywmsg	\
	" "\
	" "\
	"       You have requested that Additional Applications be installed." \
	" " \
	" " 
	ask 11 16 _ANSWER boolean 1 \
		"Are you sure you want to do this [Y/N] ? " N
	dpyxclr
		if $_SYSSTAT == 0		poplast
		if $_SYSSTAT != 0		exit 0
		if $_ANSWER == N then
			call RSUNLOCK "systask"
			exit 0
		endif
	dpywmsg \
	"      ...   Additional Applications are now being installed   ... "\
	"      ...                 Please Be Patient !                 ... "
	sleep 5
	logwarn "FMS SignON (ID=$EMPL_SIGNON, TTY=$_SYSTTY)"
	system "mv $FMS/patch/p9330d.ctr /tmp/p9330d.ctr > /dev/null 2>&1"
	system "nohup sushell /usr/fms/etc/patapply p9330d > /dev/null 2>&1"
	set INSTSTAT $_SYSSTAT
	call RSUNLOCK "systask"
	if $INSTSTAT == 0 then
		system "rm -f $FMS/patch/p9330d.pat > /dev/null 2>&1"
		system "rm -f /tmp/p9330d.ctr > /dev/null 2>&1"
		dpywmsg "Install successful/complete."
		sleep 5
		dpyxclr
	endif
	if $INSTSTAT != 0 then
		system "mv /tmp/p9330d.ctr $FMS/patch/p9330d.ctr > /dev/null 2>&1"
		dpywerr "Install Failed.  $_MS_CALLSUPP"
	endif
	exit 0 

### STORETYPE
###	Determine the store type
###	Usage:	call STORETYPE
.PROC STORETYPE
	systemv FMS_STORETYPE "sysparm -p type_of_store 2>/dev/null"
	if "$FMS_STORETYPE" == "" then
		phlanget 2378 "Cant Obtain Store Type" "" _TEMP_STA
		dpywerr -l "$_TEMP_STA" "$_MS_CALLSUPP"
		exit 255
	endif
	if $FMS_STORETYPE == 0		set FMS_STORETYPE RR
	if $FMS_STORETYPE == 1		set FMS_STORETYPE RBD
	if $FMS_STORETYPE == 2		set FMS_STORETYPE DELCO

### POSTYPE
###	Determine the pos type
###	Usage:	call POSTYPE
.PROC POSTYPE
	systemv FMS_POSTYPE "sysparm -p type_of_pos 2>/dev/null"
	if "$FMS_POSTYPE" == "" then
		phlanget 2378 "Cant Obtain Store Type" "" _TEMP_STA
		dpywerr -l "$_TEMP_STA" "$_MS_CALLSUPP"
		exit 255
	endif
	if $FMS_POSTYPE == 0		set FMS_POSTYPE NORAND
	if $FMS_POSTYPE == 1		set FMS_POSTYPE SUS
	if $FMS_POSTYPE == 2		set FMS_POSTYPE NOR-SUS

### SUS
###	Interface to SUS application
###	Usage:	call SUS "usertype"
.PROC SUS
	systemv SLEVEL "who -r | cut -c17"
	if $SLEVEL != 4 then
		dpywerr "No puede entrar a SUS sin dar inicio de dia desde FMS" "Por favor dar inicio de dia en la opcion s) Inicio de Dia de FMS"
		return
	endif
	systemv COUNTER "ps -ef | grep -v grep | grep -c $_1.$EMPL_ID"
	if $COUNTER != 0 then
		phlanget 2379 "Another Terminal is logged on with your ID." "" _TEMP_STA
		phlanget 2380 "Your login ID can only be used on 1 terminal." "" _TEMP_STB
		dpywerr "$_TEMP_STA" "$_TEMP_STB"
		exit 0
	endif
	if "$_1" == "user"		goto loadsus
	if "$_1" == "trn"		goto loadsus
	if "$EMPL_PASSWORD" == ""	goto chkrecover
	if "$EMPL_ID" == "ADMIN"	goto chkrecover
	phlanget 2381 "Enter Password:" "" _TEMP_STA
	ask 16 25 _PASSWD hidden 2 "$_TEMP_STA"
	if $_SYSSTAT != 0		return
	if "$EMPL_PASSWORD" != "$_PASSWD"	return
    @chkrecover
	if "$_1" != "recover"		goto loadsus
	call RSLOCK "tmchange"
	if $_SYSSTAT != 0		return
	call SUSRECOVER
	call RSUNLOCK "tmchange"
	return
    @loadsus
	access f $FMS/lock/remote
	if $_SYSSTAT == 0	call RSUNLOCK "remote"
	logwarn "Executing the POS application ($_1)"
	system "tput init"
	system "ansi color=hi_white,black clear"
	system "tput clear"
	phlanget 2382 "Loading the Order Processing Application...\r\n" "" _TEMP_STA
	system "echo $_TEMP_STA"
	write "$FMS/tmp/sysuif.$_SYSTTY" "$MENU_NAME" "$EMPL_SIGNON" \
		"$EMPL_ID" "$EMPL_PASSWORD" "$EMPL_SECURITY" "$EMPL_SSN" \
		"$EMPL_BORROWED" "$EMPL_JOBCODE" "$EMPL_DEPT" "$EMPL_ACCESS" \
		"$EMPL_SIGNOUT" "$FMS_TRAIN"
		###### Modificacion MEXICO - LINUX put tty2 as FMS console
	if "$_SYSTTY" != "tty2" goto no_fconf1
		system "loadkeys /usr/bin/ph/tables/defkeymap.sus >/dev/null"
		system "sleep 5"
	@no_fconf1
	######
	###### Modificacion MEXICO - LINUX let run SUS in other window
	set _XPOS	0
	if "$_SYSTTY" == "stderr" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "pts/0" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "pts/1" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "pts/2" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "pts/3" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "pts/4" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "pts/5" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "pts/6" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "ttyp0" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "ttyp1" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "ttyp2" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "ttyp3" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "ttyp4" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "ttyp5" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "ttyp6" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "ttyp7" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "ttyp8" then 
			set _XPOS	1
	endif
	if "$_SYSTTY" == "ttyp9" then 
			set _XPOS	1
	endif
	if "$_XPOS" == "0" then 
		exec "syspos order $_1"
	endif
	if "$_XPOS" == "1" then 
	# MODIFICACION MEXICO LINUX 2004-NUEVO MASTER
		#system "konsole_sus -e syspos order $_1"
		system "/usr/fms/admin/scripts/xterm.s 'syspos order $_1'"
		#RML exit 0
		return
	endif
	######

	#exec "syspos order $_1"
	###### Modificacion MEXICO - LINUX set tty2 as FMS console
	if "$_SYSTTY" != "tty2" goto no_fconf1
		system "loadkeys /usr/bin/ph/tables/defkeymap.fms >/dev/null"
		system "sleep 5"
	@no_fconf1
	######
	rm "$FMS/tmp/sysuif.$_SYSTTY"
	phlanget 2383 "Error Executing POS Application" "" _TEMP_STA
	dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		
### SUSRECOVER
###	Change date and time for SUS missing day recovery
###	Usage:  call SUSRECOVER
.PROC SUSRECOVER
	set _FIRSTCHG	0
	access f $FMS_DATA/.timekeeping
	if $_SYSSTAT == 0	goto chgtime
	set _FIRSTCHG	1
	access f $FMS_DATA/.recovery
	if $_SYSSTAT != 0 then
		phlanget 2384 " This option should only be used to modify the" "" _TEMP_STA
		phlanget 2385 " system date and time when recovering previous" "" _TEMP_STB
		phlanget 2386 " day's guest checks.  Use FMS Administration" "" _TEMP_STC
		phlanget 2387 " to correct the current date and time." "" _TEMP_STD
		dpywmsg "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC" "$_TEMP_STD"
		dpymsg "$_MS_ENTER"
	pause
	endif
	phlanget 2388 "                       WARNING!!!"  "" _TEMP_STA
	phlanget 2389 " Access to timekeeping will be denied once the system" "" _TEMP_STB
	phlanget 2390 " clock has been set back.  Access will be restored when" "" _TEMP_STC
	phlanget 2391 " system time is reset to the current date and time." "" _TEMP_STD
	dpywmsg "$_TEMP_STA" "$_TEMP_STB" "$_TEMP_STC" "$_TEMP_STD"
	phlanget 2392 "Are you sure you want to do this" "" _TEMP_STA
	phlanget 1890 "[Y/N]" "Yes/No" _TEMP_YESNO
	phlanget 1316 "N" "No" _TEMP_NO
	phlanget 2119 "Y" "Yes" _TEMP_Yes
	ask 10 16 _ANSWER boolean 1 "$_TEMP_STA $_TEMP_YESNO? " $_TEMP_NO
	dpyxclr
	if $_SYSSTAT != 0	return
	poplast
	if $_ANSWER != $_TEMP_YES	return
	systemv _CURTIME "syspdate -s 2>/dev/null"
	write $FMS_DATA/.timekeeping $_CURTIME
    @chgtime
	access f $FMS_DATA/.missgc
	if $_SYSSTAT != 0 then
 		system "echo `sysflag -p last_date_proc` \
			> $FMS_DATA/.missgc 2>/dev/null"
	endif
	systemc "sysdate"
	phlanget 2393 "     ... Updating ..." "" _TEMP_STA
	dpywmsg "$_TEMP_STA"
	if $_SYSSTAT == $_UE_FATAL then
		phlanget 2079 "Error Changing Date and Time" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		goto chkfirst
		return
	endif
	if $_SYSSTAT == $_UE_WARN then
		phlanget 2080 "  .... The date and time were NOT Changed ...." "" _TEMP_STA
		phlanget 2081 "       Press <Enter> to continue..." "" _TEMP_STB
		dpywmsg "$_TEMP_STA" "$_TEMP_STB"
		pause	
		dpyxclr
		goto chkfirst
		return
	endif
	if $_FIRSTCHG != 1	goto chktime
	access f $FMS_DATA/.recovery
	if $_SYSSTAT == 0	return
	logwarn "*** Disabling systask -- Entering recovery mode ***"
	system "setinit st=off >/dev/null 2>&1"
	return
    @chkfirst
	if $_FIRSTCHG == 1	rm $FMS_DATA/.timekeeping
	return
    @chktime
	read $FMS_DATA/.timekeeping _ORGTIME
	systemv _CURTIME "syspdate -s 2>/dev/null"
	if $_CURTIME -lt $_ORGTIME	return
	rm $FMS_DATA/.timekeeping
	access f $FMS_DATA/.recovery
	if $_SYSSTAT == 0	return
	logwarn "*** Enabling systask -- Exiting recovery mode ***"
	system "setinit st=respawn >/dev/null 2>&1"
	return


### VIEWFILES
###	View files matching a wildcard pattern in FMS_DATA
###	Usage:	call VIEWFILES Pattern [Msg]
.PROC VIEWFILES
	systemv _FILELIST "cd $FMS_DATA;echo $_1"
	if $_SYSSTAT == -1 then
		phlanget 2394 "Unable to Access Database Directory!" "" _TEMP_STA
		dpywerr "$_TEMP_STA"
		return
	endif
	if "$_FILELIST" == "$_1" then
		set _MSG "$_2"
		if "$_MSG" == "" phlanget 2395 "  No Files Found !!!" "" _MSG
		dpywmsg "$_MSG"
		dpymsg -b "** $_MS_ENTER **"
		pause
		dpyxclr
		return
	endif
	eval ask 6 60 _FILE menu 10 - 0 "Files" $_FILELIST
	if $_SYSSTAT == -1	return
	expr _FILE "$_FILE + 1"
	systemv _FILE "echo '$_FILELIST'|tr ' ' '\\012'|sed -n $_FILE\p"
	access f $FMS_DATA/$_FILE
	if $_SYSSTAT == -1 then
		phlanget 2396 "Unable to Access Database File" "" _TEMP_STA
		dpywerr "$_TEMP_STA $FMS_DATA/$_FILE"
		return
	endif
	systemc "sysviewf -n none $FMS_DATA/$_FILE"

### VIEWLOG
###	View run time log file
###	Usage:	call VIEWLOG
.PROC VIEWLOG
	phlanget 2397 "Enter File Date" "" _TEMP_STA
	ask 14 20 _SBDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
	if $_SYSSTAT != 0		return
	systemv _YYMMDD "syspdate -k$_SBDATE 2>/dev/null"
	call SPLITYYMMDD $_YYMMDD 
	set _RPTDATE "$_MM/$_DD/$_YY"
	poplast
	set _LOGF $FMS_LOG
	if $_SBDATE != $_SYSDATE then
		systemv _FILENAME "syspdate -d $_RPTDATE 2>/dev/null"
		expr _FILENAME "$_FILENAME + 1"
		set _LOGF "$FMS_DATA/syslog.$_FILENAME"
	endif
	access r $_LOGF
	if $_SYSSTAT != 0		goto Nothing                    
	systemc "sysviewf -n none $_LOGF"
	if $_SYSSTAT != 0		goto Nothing                    
	return
     @Nothing
	phlanget 2398 "       ....... No error log file for this date ......." "" _TEMP_STA
	dpywmsg "$_TEMP_STA"
        sleep 2
	dpywclr

### WRITEPASSWD
###	Update the password file
###     Will use _ADMIN_PWD, _MAINT_PWD, _AM_PWD and _QCM_PWD
###	Usage:	call WRITEPASSWD
.PROC WRITEPASSWD
	write $FMS_DATA/syspass.txt $_ADMIN_PWD $_MAINT_PWD $_AM_PWD $_QCM_PWD
	if $_SYSSTAT != 0 then
		logwarn "Error Modifying Password File"
		phlanget 2399 "Error Modifying Password File" "" _TEMP_STA
		dpywerr "$_TEMP_STA" "$_MS_CALLSUPP"
		return
	endif

### CHKTRAINACCESS
###	Print access denied error message.
###	Usage:	call CHKTRAINACCESS
.PROC CHKTRAINACCESS
	set _SYSSTAT $_UE_NONE 
	if $FMS_TRAIN == Y then
		phlanget 2400 "      .....   ACCESS DENIED in Practice Mode ......" "" _TEMP_STA
		dpywmsg -b "$_TEMP_STA"
		sleep 3
		dpywclr
		set _SYSSTAT $_UE_FATAL
	endif
	return

.PROC TESTSTORE
	if $FMS_STORETYPE == DELCO then
 		set _MS_LBRERR  "Missing lbrdschm.dat"
	endif
	if $FMS_STORETYPE != DELCO then
 		set _MS_LBRERR  "Missing lbrtschm.dat"
	endif
	return

### SETAPPL
###	Read the applstat.txt file and parse thru and assign
###	variables to correct values
###	Usage:	call SETAPPL
.PROC SETAPPL
 	access r "$FMS_DATA/applstat.txt"
 	if $_SYSSTAT != 0 then
 		logwarn "Application status file not found."
		set _RLSA inact
		set _RLSB inact
		set _RLSC inact
		set _RLSD inact
 		return
 	endif
	read "$FMS_DATA/applstat.txt" _RELEAS_A _RELEAS_B _RELEAS_C _RELEAS_D
	substr _RLSA 10,5 $_RELEAS_A
	substr _RLSB 10,5 $_RELEAS_B
	substr _RLSC 10,5 $_RELEAS_C
	substr _RLSD 10,5 $_RELEAS_D
	substr _RLSA_LOG 16,5 $_RELEAS_A
	substr _RLSB_LOG 16,4 $_RELEAS_B
	substr _RLSC_LOG 16,3 $_RELEAS_C
	substr _RLSD_LOG 16,3 $_RELEAS_D
	substr _RLSA_PWD 22,5 $_RELEAS_A
	substr _RLSB_PWD 21,5 $_RELEAS_B
	substr _RLSC_PWD 20,5 $_RELEAS_C
	substr _RLSD_PWD 20,5 $_RELEAS_D

### CHKAPPL
###	Check to see if selected application is installed (training)
###	and active (production) before allowing access.
###	Usage:	call CHKAPPL <release status>
.PROC CHKAPPL
	set _SYSSTAT 0
	if "$_1" == "activ"	return
	if $FMS_TRAIN != "Y" then
		set _SYSSTAT $_UE_FATAL
		phlanget 2401 "This application is currently not available." "" _TEMP_STA
		dpywerr "$_TEMP_STA"
		return
	endif
	if "$_1" == "inact" then
		set _SYSSTAT $_UE_FATAL
		phlanget 2401 "This application is currently not available." "" _TEMP_STA
		dpywerr "$_TEMP_STA"
		return
	endif
	return

### PFSENVIRON
###	Set environment for PFS SourceLink
###	
.PROC PFSENVIRON
		set _FMSPATH    "$PATH"
		set PATH	"$SEC/PFS/bin:$FMS/bin:/bin:/usr/bin"
		set PFSHLP	"$SEC/PFS/bin" 
		set PFSDBP	"$SEC/PFS/data" 
		set PFSIFP	"$SEC/PFS/extract" 
		set PFSXTRP	"$SEC/PFS/extract" 
		set DWTDOLIB	"$SEC/PFS/bin/DWtdolib" 
		unset PFSPRACT
		return

### PFSTRAINENV
###	Set TRAINING environment for PFS SourceLink
###	
.PROC PFSTRAINENV
		set _FMSPATH    "$PATH"
		set PATH	"$SEC/PFS/bin:$FMS/bin:/bin:/usr/bin"
		set FMS_STORE 	"401020"
		set PFSHLP	"$SEC/PFS/bin" 
		set PFSDBP	"$SEC/PFS/train" 
		set PFSIFP	"$SEC/PFS/train" 
		set PFSXTRP	"$SEC/PFS/train" 
		set DWTDOLIB	"$SEC/PFS/bin/DWtdolib" 
		if $FMS_STORETYPE != DELCO then
			set PFSPRACT	"19891214"
		endif
		if $FMS_STORETYPE == DELCO then
			set PFSPRACT	"19911030"
		endif

### PFSUNSET
###	Unset the PFS SourceLink environment 
###	
.PROC PFSUNSET
		set PATH        "$_FMSPATH"
		unset PFSHLP
		unset PFSDBP
		unset PFSIFP
		unset PFSXTRP
		unset DWTDOLIB
		unset PFSPRACT
		if "$FMS_TRAIN" == "Y"	set FMS_STORE "TRAIN!"

### PFSREPORT
###	PFS SourceLink Reporting Function 
###	
.PROC PFSREPORT
		dpyclr
		system "tput clear"
		if $_PRINTER == 0 then
			system "$_1 -n $_2"
			system "[ -s $PFSXTRP/$_1.prn ] && cat $PFSXTRP/$_1.prn | sysviewf -n $_1"	
			system "rm -f $PFSXTRP/$_1.prn"
			return
		endif
		system "$_1 -n $_2"
		system "[ -s $PFSXTRP/$_1.prn ] && sysprntr cat $PFSXTRP/$_1.prn"
		system "rm -f $PFSXTRP/$_1.prn"
		return
### PFSAPPLY

###	PFS SourceLink Telecom File Posting
###
.PROC PFSAPPLY
	dpywmsg " Loading PFS SourceLink... $_MS_PATIENT"
	system "pfsapply"
	system "ansi reset"
	refresh
	return

### PFSLDFC
### 	PFS SourceLink Interface File Posting
###
.PROC PFSLDFC
	dpywmsg " Loading PFS SourceLink... $_MS_PATIENT"
	system "pfsldfc"
	system "ansi reset"
	refresh
	return
	
### PFSCLNUP
###	PFS SourceLink Database Cleanup
###
.PROC PFSCLNUP
	set _PFSCLNDATE 0
	access r "$PFSDBP/cleandate"
	if $_SYSSTAT == 0	read $PFSDBP/cleandate _PFSCLNDATE
	if $_PFSDATE > $_PFSCLNDATE then
		dpywmsg " Performing daily cleanup... $_MS_PATIENT"
		system "pfsclnup 3 42"
		system "ansi reset"
		refresh
		write $PFSDBP/cleandate $_PFSDATE
	endif
	return

### SYSLEVEL
###	Determine whether specified application (system) is ACTIVE or BASIC
###	Usage:	call SYSLEVEL <application name>
.PROC SYSLEVEL
access r "$FMS_DATA/syslevel.txt"
if $_SYSSTAT != 0 then
	logwarn "Application level file (syslevel.txt) not found, default for $_1 is BASIC."
	set _SYSLEVEL  "BASIC"
	return 
endif
systemv _SYSLEVEL \
	"grep $_1 $FMS_DATA/syslevel.txt 2>/dev/null| cut -c10-17 2>/dev/null"
if "$_SYSLEVEL" != "ADVANCED"	set _SYSLEVEL "BASIC"
return

### GETPROMPTDAY 
###	Get date to prompt user for reports on critical reports menu
###	Date is date of first guest check for today (or last_date_proc
###	if no gcdata.dat file)
### 	Usage:  call GETPROMPTDAY <day> where <day> = 0 for today, 1 for
###		yesterday
.PROC GETPROMPTDAY
set _DAYOPT ""
if "$_1" == "1" 	set _DAYOPT "-a-86400"

access r "$FMS_DATA/gcdata.dat"
if $_SYSSTAT != 0 goto getdateproc
systemv _TMPDAY	"syspdate -o -g $_DAYOPT 2>/dev/null"
if $_SYSSTAT == 0 goto retgcdate

@getdateproc
access r "$FMS_DATA/sysflag.dat"
if $_SYSSTAT != 0 goto getsysdate
systemv _TMPPROC "sysflag -p last_date_proc 2>/dev/null"
if $_SYSSTAT == 0 goto retdateproc
 
@getsysdate
systemv _TMPDAY "syspdate -g $_DAYOPT 2>/dev/null"
if $_SYSSTAT != 0 set _TMPDAY "MM/DD/YY"
goto retgcdate

@retdateproc
systemv _TMPDAY "syspdate -b $_DAYOPT $_TMPPROC 2>/dev/null"
@retgcdate
substr _MM 0,2 $_TMPDAY
substr _DD 3,2 $_TMPDAY
substr _YY 6,2 $_TMPDAY
set _YYMMDD "$_YY$_MM$_DD"
systemv _PRMTDAY "syspdate -f$_YYMMDD 2>/dev/null"
return

########################################################################
## Crew Selection
########################################################################

## CANDIDATE INFORMATION
##
## Usage: call CAND_INFO
.PROC CAND_INFO
        access f $FMS/bin/criss
        if $_SYSSTAT != 0 then
        	phlanget 2672 "Crew Selection Application is Missing" "" \
			_TEMP_SA
                dpywerr "$_TEMP_SA" "$_MS_CALLSUPP"
                return
        endif
        call RSLOCK "criss" 
        if $_SYSSTAT != 0       return
        phlanget 2673 "Loading Candidate Form..." "" _TEMP_SA
        dpywmsg " $_TEMP_SA $_MS_PATIENT"
        call SAFECMDC "$FMS/bin/criss -i" "criss.dat crissaux.dat" "" "criss"
        call RSUNLOCK "criss"

## CANDIDATE SCORE PROFILE
##
## Usage: call CAND_SCORE
.PROC CAND_SCORE
	set _WROW 8
	systemc "$FMS/bin/criss -n"
	if $_SYSSTAT == 255     goto rptexit
	set _SEL_NUM $_SYSSTAT
	call GETPRINTER $_WROW 25
	if $_SYSSTAT != 0       goto rptexit
	if $_PRINTER == 0       then
		call SAFECMDC "$FMS/bin/criss -c $_SEL_NUM" \
			"criss.dat c rissaux.dat"
		goto rptexit
	endif
	systemc "sysprntr $FMS/bin/crirpt -c $_SEL_NUM"
       @rptexit
	unset _WROW _SEL_NUM _ANSWER _SBDATE _SEDATE _SAVROW
	return

## CANDIDATE SCORE LISTING
##
## Usage: call CAND_SCLST
.PROC CAND_SCLST
	set _WROW 8
	phlanget 2674 "Score Listing Reports" "" _TEMP_SHA
	phlanget 2675 "1) Score Listing By Date" "" _TEMP_SHB
	phlanget 2676 "2) Score Listing All Days" "" _TEMP_SHC

	ask $_WROW 24 _ANSWER menu 2 - 0 "$_TEMP_SHA"\
		"$_TEMP_SHB" "$_TEMP_SHC"
	if $_SYSSTAT != 0       goto rptexit
	call NEXTLINE $_ANSWER
	set _SBDATE ""
	set _SEDATE ""

	if $_ANSWER == 0        goto bydate
	if $_ANSWER == 1        goto alldates
       @bydate
	set _SAVROW $_WROW
	phlanget 1687  "Enter Starting Date" "" _TEMP_STA
	ask $_WROW 24 _SBDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SYSDATE
	if $_SYSSTAT != 0       goto rptexit
	call NEXTLINE 0
	phlanget 1688 "Enter Ending Date" "" _TEMP_STA
	ask $_WROW 24 _SEDATE date 8 "$_TEMP_STA [$_DATEFMT]: " $_SBDATE
	if $_SYSSTAT != 0       goto rptexit
	call NEXTLINE 0
	systemv _YYMMDD "syspdate -k$_SBDATE 2>/dev/null"
	call SPLITYYMMDD $_YYMMDD 
	set _SBDATE "$_MM/$_DD/$_YY"
	systemv _YYMMDD "syspdate -k$_SEDATE 2>/dev/null"
	call SPLITYYMMDD $_YYMMDD 
	set _SEDATE "$_MM/$_DD/$_YY"
       @alldates
	phlanget 2677 "Sort Record By" "" _TEMP_SHD
	phlanget 2678 "1) Name" "" _TEMP_SHE
	phlanget 2679 "2) SSN" "" _TEMP_SHF
	phlanget 2680 "3) Test Date" "" _TEMP_SHG
	phlanget 2681 "4) Test Score" "" _TEMP_SHH

	ask $_WROW 24 _ANSWER menu 4 - 0 "$_TEMP_SHD"\
		"$_TEMP_SHE" "$_TEMP_SHF" "$_TEMP_SHG" "$_TEMP_SHH"
	if $_SYSSTAT != 0       goto rptexit
	call NEXTLINE $_ANSWER
	call GETPRINTER $_WROW 24
	if $_SYSSTAT != 0       goto rptexit
	if $_PRINTER == 0       then
		call SAFECMDC\
			"$FMS/bin/criss -l $_SBDATE $_SEDATE -s $_ANSWER"\
			"criss.dat crissaux.dat"
		goto rptexit
	endif
	systemc "sysprntr $FMS/bin/crirpt -l $_SBDATE $_SEDATE -s $_ANSWER"
       @rptexit
	unset _WROW _SEL_NUM _ANSWER _SBDATE _SEDATE _SAVROW
	return
